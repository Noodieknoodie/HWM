##### OLD CODE -- FRONTEND AND OTHER ######

+++ This is the frontend and other folders for a project was originally scaffolded with the Teams Toolkit, which introduced unnecessary complexity, dead weight, and tightly-coupled abstractions we don't need. What you're seeing now includes leftover config files, redundant state management, and extra wrappers that are being phased out. We're actively refactoring toward a clean, minimal setup: standalone React frontend, FastAPI backend, and a dead-simple Teams manifestâ€”no toolkit, no magic, no BS. +++


.env.local
```local
VITE_API_URL=http://localhost:7071
```

.vscode\extensions.json
```json
{
  "recommendations": [
    "ms-azuretools.vscode-azurefunctions",
    "ms-python.python",
    "TeamsDevApp.ms-teams-vscode-extension"
  ]
}
```

.vscode\launch.json
```json
{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Launch Remote in Teams (Edge)",
            "type": "msedge",
            "request": "launch",
            "url": "https://teams.microsoft.com/l/app/${{TEAMS_APP_ID}}?installAppPackage=true&webjoin=true&${account-hint}",
            "presentation": {
                "group": "group 1: Teams",
                "order": 3
            },
            "internalConsoleOptions": "neverOpen"
        },
        {
            "name": "Launch Remote in Teams (Chrome)",
            "type": "chrome",
            "request": "launch",
            "url": "https://teams.microsoft.com/l/app/${{TEAMS_APP_ID}}?installAppPackage=true&webjoin=true&${account-hint}",
            "presentation": {
                "group": "group 1: Teams",
                "order": 3
            },
            "internalConsoleOptions": "neverOpen"
        },
        {
            "name": "Launch Remote in Outlook (Edge)",
            "type": "msedge",
            "request": "launch",
            "url": "https://outlook.office.com/host/${{M365_APP_ID}}?${account-hint}",
            "presentation": {
                "group": "group 2: Outlook",
                "order": 3
            },
            "internalConsoleOptions": "neverOpen"
        },
        {
            "name": "Launch Remote in Outlook (Chrome)",
            "type": "chrome",
            "request": "launch",
            "url": "https://outlook.office.com/host/${{M365_APP_ID}}?${account-hint}",
            "presentation": {
                "group": "group 2: Outlook",
                "order": 3
            },
            "internalConsoleOptions": "neverOpen"
        },
        {
            "name": "Launch Remote in the Microsoft 365 app (Edge)",
            "type": "msedge",
            "request": "launch",
            "url": "https://www.office.com/m365apps/${{M365_APP_ID}}?auth=2&${account-hint}",
            "presentation": {
                "group": "group 3: the Microsoft 365 app",
                "order": 3
            },
            "internalConsoleOptions": "neverOpen"
        },
        {
            "name": "Launch Remote in the Microsoft 365 app (Chrome)",
            "type": "chrome",
            "request": "launch",
            "url": "https://www.office.com/m365apps/${{M365_APP_ID}}?auth=2&${account-hint}",
            "presentation": {
                "group": "group 3: the Microsoft 365 app",
                "order": 3
            },
            "internalConsoleOptions": "neverOpen"
        },
        {
            "name": "Attach to Frontend in Teams (Edge)",
            "type": "msedge",
            "request": "launch",
            "url": "https://teams.microsoft.com/l/app/${{local:TEAMS_APP_ID}}?installAppPackage=true&webjoin=true&${account-hint}",
            "cascadeTerminateToConfigurations": [
                "Attach to Local Service"
            ],
            "presentation": {
                "group": "all",
                "hidden": true
            },
            "internalConsoleOptions": "neverOpen"
        },
        {
            "name": "Attach to Frontend in Teams (Chrome)",
            "type": "chrome",
            "request": "launch",
            "url": "https://teams.microsoft.com/l/app/${{local:TEAMS_APP_ID}}?installAppPackage=true&webjoin=true&${account-hint}",
            "cascadeTerminateToConfigurations": [
                "Attach to Local Service"
            ],
            "presentation": {
                "group": "all",
                "hidden": true
            },
            "internalConsoleOptions": "neverOpen"
        },
        {
            "name": "Attach to Frontend in Outlook (Edge)",
            "type": "msedge",
            "request": "launch",
            "url": "https://outlook.office.com/host/${{local:M365_APP_ID}}?${account-hint}",
            "cascadeTerminateToConfigurations": [
                "Attach to Local Service"
            ],
            "presentation": {
                "group": "all",
                "hidden": true
            },
            "internalConsoleOptions": "neverOpen"
        },
        {
            "name": "Attach to Frontend in Outlook (Chrome)",
            "type": "chrome",
            "request": "launch",
            "url": "https://outlook.office.com/host/${{local:M365_APP_ID}}?${account-hint}",
            "cascadeTerminateToConfigurations": [
                "Attach to Local Service"
            ],
            "presentation": {
                "group": "all",
                "hidden": true
            },
            "internalConsoleOptions": "neverOpen"
        },
        {
            "name": "Attach to Frontend in the Microsoft 365 app (Edge)",
            "type": "msedge",
            "request": "launch",
            "url": "https://www.office.com/m365apps/${{local:M365_APP_ID}}?auth=2&${account-hint}",
            "cascadeTerminateToConfigurations": [
                "Attach to Local Service"
            ],
            "presentation": {
                "group": "all",
                "hidden": true
            },
            "internalConsoleOptions": "neverOpen"
        },
        {
            "name": "Attach to Frontend in the Microsoft 365 app (Chrome)",
            "type": "chrome",
            "request": "launch",
            "url": "https://www.office.com/m365apps/${{local:M365_APP_ID}}?auth=2&${account-hint}",
            "cascadeTerminateToConfigurations": [
                "Attach to Local Service"
            ],
            "presentation": {
                "group": "all",
                "hidden": true
            },
            "internalConsoleOptions": "neverOpen"
        },
        {
            "name": "Attach to Local Service",
            "type": "node",
            "request": "attach",
            "port": 9239,
            "restart": true,
            "presentation": {
                "group": "all",
                "hidden": true
            },
            "internalConsoleOptions": "neverOpen"
        },
        {
            "name": "Attach to Python Functions",
            "type": "debugpy",
            "request": "attach",
            "connect": {
                "host": "localhost",
                "port": 9091
            },
            "preLaunchTask": "func: host start"
        }
    ],
    "compounds": [
        {
            "name": "Debug in Teams (Edge)",
            "configurations": [
                "Attach to Frontend in Teams (Edge)",
                "Attach to Local Service"
            ],
            "preLaunchTask": "Start Teams App Locally",
            "presentation": {
                "group": "group 1: Teams",
                "order": 1
            },
            "stopAll": true
        },
        {
            "name": "Debug in Teams (Chrome)",
            "configurations": [
                "Attach to Frontend in Teams (Chrome)",
                "Attach to Local Service"
            ],
            "preLaunchTask": "Start Teams App Locally",
            "presentation": {
                "group": "group 1: Teams",
                "order": 2
            },
            "stopAll": true
        },
        {
            "name": "Debug in Outlook (Edge)",
            "configurations": [
                "Attach to Frontend in Outlook (Edge)",
                "Attach to Local Service"
            ],
            "preLaunchTask": "Start Teams App Locally",
            "presentation": {
                "group": "group 2: Outlook",
                "order": 1
            },
            "stopAll": true
        },
        {
            "name": "Debug in Outlook (Chrome)",
            "configurations": [
                "Attach to Frontend in Outlook (Chrome)",
                "Attach to Local Service"
            ],
            "preLaunchTask": "Start Teams App Locally",
            "presentation": {
                "group": "group 2: Outlook",
                "order": 2
            },
            "stopAll": true
        },
        {
            "name": "Debug in the Microsoft 365 app (Edge)",
            "configurations": [
                "Attach to Frontend in the Microsoft 365 app (Edge)",
                "Attach to Local Service"
            ],
            "preLaunchTask": "Start Teams App Locally",
            "presentation": {
                "group": "group 3: the Microsoft 365 app",
                "order": 1
            },
            "stopAll": true
        },
        {
            "name": "Debug in the Microsoft 365 app (Chrome)",
            "configurations": [
                "Attach to Frontend in the Microsoft 365 app (Chrome)",
                "Attach to Local Service"
            ],
            "preLaunchTask": "Start Teams App Locally",
            "presentation": {
                "group": "group 3: the Microsoft 365 app",
                "order": 2
            },
            "stopAll": true
        }
    ]
}
```

.vscode\settings.json
```json
{
    "debug.onTaskErrors": "abort",
    "json.schemas": [
        {
            "fileMatch": [
                "/aad.*.json"
            ],
            "schema": {}
        }
    ],
    "azureFunctions.deploySubpath": "api",
    "azureFunctions.scmDoBuildDuringDeployment": true,
    "azureFunctions.pythonVenv": ".venv",
    "azureFunctions.projectLanguage": "Python",
    "azureFunctions.projectRuntime": "~4",
    "debug.internalConsoleOptions": "neverOpen"
}
```

.vscode\tasks.json
```json
// This file is automatically generated by Teams Toolkit.
// The teamsfx tasks defined in this file require Teams Toolkit version >= 5.0.0.
// See https://aka.ms/teamsfx-tasks for details on how to customize each task.
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Start Teams App Locally",
            "dependsOn": [
                "Validate prerequisites",
                "Provision",
                "Deploy",
                "Start application"
            ],
            "dependsOrder": "sequence"
        },
        {
            "label": "Validate prerequisites",
            "type": "teamsfx",
            "command": "debug-check-prerequisites",
            "args": {
                "prerequisites": [
                    "nodejs",
                    "m365Account",
                    "portOccupancy"
                ],
                "portOccupancy": [
                    53000,
                    9239
                ]
            }
        },
        {
            "label": "Provision",
            "type": "teamsfx",
            "command": "provision",
            "args": {
                "env": "local"
            }
        },
        {
            "label": "Deploy",
            "type": "teamsfx",
            "command": "deploy",
            "args": {
                "env": "local"
            }
        },
        {
            "label": "Start application",
            "type": "shell",
            "command": "npm run dev:teamsfx",
            "isBackground": true,
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "problemMatcher": {
                "pattern": {
                    "regexp": "^.*$",
                    "file": 0,
                    "location": 1,
                    "message": 2
                },
                "background": {
                    "activeOnStart": true,
                    "beginsPattern": ".*",
                    "endsPattern": "Compiled|Failed|compiled|failed|listening"
                }
            }
        },
        {
            "type": "func",
            "label": "func: host start",
            "command": "host start",
            "problemMatcher": "$func-python-watch",
            "isBackground": true,
            "dependsOn": "pip install (functions)",
            "options": {
                "cwd": "${workspaceFolder}/api"
            }
        },
        {
            "label": "pip install (functions)",
            "type": "shell",
            "osx": {
                "command": "${config:azureFunctions.pythonVenv}/bin/python -m pip install -r requirements.txt"
            },
            "windows": {
                "command": "${config:azureFunctions.pythonVenv}\\Scripts\\python -m pip install -r requirements.txt"
            },
            "linux": {
                "command": "${config:azureFunctions.pythonVenv}/bin/python -m pip install -r requirements.txt"
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}/api"
            }
        }
    ]
}
```

env\.env.dev
```dev
# This file includes environment variables that will be committed to git by default.

# Built-in environment variables
TEAMSFX_ENV=dev
APP_NAME_SUFFIX=dev

# Updating AZURE_SUBSCRIPTION_ID or AZURE_RESOURCE_GROUP_NAME after provision may also require an update to RESOURCE_SUFFIX, because some services require a globally unique name across subscriptions/resource groups.
AZURE_SUBSCRIPTION_ID=e2ed8f3b-7c6a-46b9-a829-65aad1898d3e
AZURE_RESOURCE_GROUP_NAME=Agenda_Teams_Subscription
SQL_CONNECTION_STRING=Server=tcp:hohimerpro-db-server.database.windows.net,1433;Initial Catalog=HohimerPro-401k;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;Authentication="Active Directory Default";
SQL_SERVER=hohimerpro-db-server.database.windows.net
SQL_DATABASE=HohimerPro-401k
SQL_AUTH=ActiveDirectory

# Generated during provision, you can also add your own variables.
TEAMS_APP_ID=
TAB_AZURE_APP_SERVICE_RESOURCE_ID=
TAB_ENDPOINT=
```

env\.env.local
```local
# This file includes environment variables that can be committed to git. It's gitignored by default because it represents your local development environment.

# Built-in environment variables
TEAMSFX_ENV=local
APP_NAME_SUFFIX=local


# SQL Database Configuration
SQL_SERVER=hohimerpro-db-server.database.windows.net
SQL_DATABASE=HohimerPro-401k

# Generated during provision, you can also add your own variables.
TAB_DOMAIN=
TAB_ENDPOINT=
TEAMS_APP_ID=
TEAMS_APP_PACKAGE_PATH=

# Generated during deploy, you can also add your own variables.
SSL_CRT_FILE=
SSL_KEY_FILE=
```

infra\azure.bicep
```bicep
@maxLength(20)
@minLength(4)
@description('Used to generate names for all resources in this file')
param resourceBaseName string

param webAppSku string

param serverfarmsName string = resourceBaseName
param webAppName string = resourceBaseName
param location string = resourceGroup().location

// Compute resources for your Web App
resource serverfarm 'Microsoft.Web/serverfarms@2021-02-01' = {
  kind: 'app'
  location: location
  name: serverfarmsName
  sku: {
    name: webAppSku
  }
}

// Azure Web App that hosts your website
resource webApp 'Microsoft.Web/sites@2021-02-01' = {
  kind: 'app'
  location: location
  name: webAppName
  properties: {
    serverFarmId: serverfarm.id
    httpsOnly: true
    siteConfig: {
      appSettings: [
        {
          name: 'WEBSITE_RUN_FROM_PACKAGE'
          value: '1' // Run Azure App Service from a package file
        }
        {
          name: 'WEBSITE_NODE_DEFAULT_VERSION'
          value: '~18' // Set NodeJS version to 18.x for your site
        }
        {
          name: 'RUNNING_ON_AZURE'
          value: '1'
        }
      ]
      ftpsState: 'FtpsOnly'
    }
  }
}

// The output will be persisted in .env.{envName}. Visit https://aka.ms/teamsfx-actions/arm-deploy for more details.
output TAB_AZURE_APP_SERVICE_RESOURCE_ID string = webApp.id // used in deploy stage
output TAB_DOMAIN string = webApp.properties.defaultHostName
output TAB_ENDPOINT string = 'https://${webApp.properties.defaultHostName}'
```

package.json
```json
{
    "name": "teamz2",
    "version": "0.1.0",
    "engines": {
        "node": "18 || 20"
    },
    "private": true,
    "main": "./lib/app.js",
    "dependencies": {
        "@heroicons/react": "^2.2.0",
        "@tanstack/react-query": "^5.81.5",
        "date-fns": "^4.1.0",
        "express": "^4.21.1",
        "react": "^19.1.0",
        "react-dom": "^19.1.0",
        "react-router-dom": "^7.6.3",
        "send": "^0.18.0",
        "zustand": "^5.0.6"
    },
    "devDependencies": {
        "@tailwindcss/forms": "^0.5.10",
        "@types/express": "^5.0.0",
        "@types/node": "^18.19.115",
        "@types/react": "^19.1.8",
        "@types/react-dom": "^19.1.6",
        "@types/send": "^0.17.1",
        "@vitejs/plugin-react": "^4.6.0",
        "autoprefixer": "^10.4.17",
        "env-cmd": "^10.1.0",
        "nodemon": "^3.1.7",
        "postcss": "^8.4.33",
        "shx": "^0.3.3",
        "tailwindcss": "^3.4.0",
        "ts-node": "^10.9.1",
        "typescript": "^4.1.2",
        "vite": "^5.4.19"
    },
    "scripts": {
        "dev:teamsfx": "env-cmd --silent -f .localConfigs npm run start",
        "start": "nodemon --exec node --inspect=9239 --signal SIGINT -r ts-node/register src/app.ts",
        "build": "npm run build:react && npm run build:server",
        "build:react": "vite build",
        "build:server": "tsc --build && shx cp -r ./src/views ./dist ./lib/",
        "dev:react": "vite",
        "preview": "vite preview",
        "test": "echo \"Error: no test specified\" && exit 1"
    },
    "homepage": "."
}
```

postcss.config.js
```js
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
```

src\app.ts
```ts
import express from "express";
import * as fs from "fs";
import * as https from "https";
import * as path from "path";
import send from "send";

const app = express();

const sslOptions = {
  key: process.env.SSL_KEY_FILE ? fs.readFileSync(process.env.SSL_KEY_FILE) : undefined,
  cert: process.env.SSL_CRT_FILE ? fs.readFileSync(process.env.SSL_CRT_FILE) : undefined,
};

// Serve static files (including Vite build output)
app.use("/static", express.static(path.join(__dirname, "static")));
app.use("/dist", express.static(path.join(__dirname, "..", "dist")));

// Adding tabs to our app. This will setup routes to various views
// Setup home page
app.get("/", (req, res) => {
  send(req, path.join(__dirname, "views", "tab.html")).pipe(res);
});

// Setup the static tab
app.get("/tab", (req, res) => {
  send(req, path.join(__dirname, "views", "tab.html")).pipe(res);
});

// API proxy (when running in production, the Azure Functions are at /api)
if (process.env.NODE_ENV === "production") {
  app.all("/api/*", (req, res) => {
    res.status(404).json({ error: "API endpoint not found" });
  });
}

// Create HTTP server
const port = process.env.port || process.env.PORT || 3333;

if (sslOptions.key && sslOptions.cert) {
  https.createServer(sslOptions, app).listen(port, () => {
    console.log(`Express server listening on port ${port}`);
  });
} else {
  app.listen(port, () => {
    console.log(`Express server listening on port ${port}`);
  });
}
```

src\components\client\ClientSearch.tsx
```tsx
import React, { useState, useEffect } from 'react';
import useStore from '../../store';

const ClientSearch = ({ clients = [], isLoading = false }) => {
  const { selectedClientId, setSelectedClientId } = useStore();
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredClients, setFilteredClients] = useState(clients);
  
  // Update filtered clients when search term or clients change
  useEffect(() => {
    if (!searchTerm.trim()) {
      setFilteredClients(clients);
      return;
    }
    
    const lowerSearchTerm = searchTerm.toLowerCase();
    const filtered = clients.filter(client => 
      client.display_name.toLowerCase().includes(lowerSearchTerm) ||
      (client.provider_name && client.provider_name.toLowerCase().includes(lowerSearchTerm))
    );
    
    setFilteredClients(filtered);
  }, [searchTerm, clients]);
  
  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };
  
  const handleClearSearch = () => {
    setSearchTerm('');
  };
  
  return (
    <div className="relative mb-4">
      <div className="relative group">
        <svg
          className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-dark-400 group-hover:text-primary-500 transition-colors duration-200"
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
        >
          <circle cx="11" cy="11" r="8"></circle>
          <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
        </svg>
        
        <input
          type="search"
          placeholder="Search clients..."
          className="pl-10 pr-8 w-full p-2.5 rounded-lg border border-light-400 bg-light-200
                    focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent
                    shadow-sm hover:shadow transition-all duration-200 text-dark-600 placeholder-dark-400"
          value={searchTerm}
          onChange={handleSearchChange}
          disabled={isLoading}
        />
        
        {searchTerm && (
          <button
            className="absolute right-3 top-1/2 transform -translate-y-1/2 text-dark-400 hover:text-primary-600 transition-colors duration-200"
            onClick={handleClearSearch}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            >
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          </button>
        )}
      </div>
      
      {searchTerm && filteredClients.length > 0 && (
        <div className="absolute left-0 right-0 mt-1 bg-white border border-light-400 rounded-lg shadow-lg z-10 max-h-64 overflow-y-auto animate-fade-in">
          {filteredClients.map(client => (
            <button
              key={client.client_id}
              className="w-full text-left px-4 py-2.5 hover:bg-light-200 flex items-center first:rounded-t-lg last:rounded-b-lg border-b border-light-300 last:border-b-0"
              onClick={() => {
                setSelectedClientId(client.client_id);
                setSearchTerm('');
              }}
            >
              <span className="mr-2">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  className={
                    client.compliance_status === 'green'
                      ? 'text-green-500'
                      : 'text-yellow-500' // Binary: green or yellow only
                  }
                >
                  <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                  <circle cx="12" cy="7" r="4"></circle>
                </svg>
              </span>
              <div className="flex-1">
                <div className="font-medium">{client.display_name}</div>
                {client.provider_name && (
                  <div className="text-xs text-gray-500">{client.provider_name}</div>
                )}
              </div>
            </button>
          ))}
        </div>
      )}
      
      {searchTerm && filteredClients.length === 0 && (
        <div className="absolute left-0 right-0 mt-1 bg-white border border-gray-200 rounded-md shadow-lg z-10 p-4 text-center text-gray-500">
          No clients found matching "{searchTerm}"
        </div>
      )}
    </div>
  );
};

export default ClientSearch;
```

src\components\document\DocumentViewer.tsx
```tsx
import React from 'react';
import useStore from '../../store';

const DocumentViewer = () => {
  const { 
    documentViewerOpen, 
    setDocumentViewerOpen
  } = useStore();
  
  if (!documentViewerOpen) {
    return null;
  }
  
  return (
    <div className="w-2/5 border-l border-gray-200 bg-white flex flex-col h-full">
      <div className="flex items-center justify-between p-4 border-b border-gray-200">
        <h2 className="text-lg font-medium text-gray-800">Document Preview</h2>
        <div className="flex items-center space-x-2">
          <button 
            className="w-8 h-8 flex items-center justify-center rounded-md hover:bg-gray-100"
            title="Close"
            onClick={() => setDocumentViewerOpen(false)}
          >
            <svg 
              xmlns="http://www.w3.org/2000/svg" 
              width="16" 
              height="16" 
              viewBox="0 0 24 24" 
              fill="none" 
              stroke="currentColor" 
              strokeWidth="2" 
              strokeLinecap="round" 
              strokeLinejoin="round"
            >
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          </button>
        </div>
      </div>
      
      <div className="flex-grow flex flex-col overflow-hidden relative">
        {/* Coming Soon Overlay */}
        <div className="absolute inset-0 bg-white bg-opacity-95 z-10 flex items-center justify-center">
          <div className="text-center p-8">
            <svg 
              xmlns="http://www.w3.org/2000/svg" 
              width="64" 
              height="64" 
              viewBox="0 0 24 24" 
              fill="none" 
              stroke="currentColor" 
              strokeWidth="2" 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              className="mx-auto mb-4 text-primary-400"
            >
              <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
              <polyline points="14 2 14 8 20 8"></polyline>
              <line x1="16" y1="13" x2="8" y2="13"></line>
              <line x1="16" y1="17" x2="8" y2="17"></line>
              <polyline points="10 9 9 9 8 9"></polyline>
            </svg>
            <h3 className="text-xl font-semibold text-gray-800 mb-2">Document Viewer Coming Soon</h3>
            <p className="text-gray-600 mb-4">We're working on integrating document viewing functionality.</p>
            <p className="text-sm text-gray-500">This feature will allow you to view payment documentation directly within the application.</p>
          </div>
        </div>
        
        {/* UI Shell (visible but not functional) */}
        <div className="flex-1 p-4 overflow-hidden flex flex-col opacity-50">
          <div className="h-full flex flex-col">
            <div className="bg-gray-50 p-2 rounded-md mb-2 text-sm text-gray-700">
              <div className="font-medium">Sample Document.pdf</div>
              <div className="text-xs text-gray-500 mt-1">
                Path: /documents/payments/sample.pdf
              </div>
            </div>
            
            <div className="flex-1 flex flex-col items-center bg-gray-100 rounded-md overflow-hidden">
              <div className="w-full flex justify-center p-2 bg-gray-50 border-b border-gray-200">
                <div className="flex items-center space-x-2">
                  <button className="p-1 rounded text-gray-300" disabled>
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      <circle cx="11" cy="11" r="8"></circle>
                      <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                      <line x1="8" y1="11" x2="14" y2="11"></line>
                    </svg>
                  </button>
                  <button className="px-2 py-1 text-xs bg-gray-200 rounded text-gray-700" disabled>
                    100%
                  </button>
                  <button className="p-1 rounded text-gray-300" disabled>
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      <circle cx="11" cy="11" r="8"></circle>
                      <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                      <line x1="11" y1="8" x2="11" y2="14"></line>
                      <line x1="8" y1="11" x2="14" y2="11"></line>
                    </svg>
                  </button>
                </div>
              </div>
              
              <div className="flex-1 w-full flex items-center justify-center p-4">
                <div className="w-96 h-96 bg-white shadow-lg rounded-md border border-gray-300"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default DocumentViewer;
```

src\components\ErrorBoundary.tsx
```tsx
import React from 'react';

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true, error };
  }

  componentDidCatch(error, errorInfo) {
    console.error('Error caught by boundary:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="min-h-screen bg-red-50 px-4 py-16 sm:px-6 sm:py-24 md:grid md:place-items-center lg:px-8">
          <div className="mx-auto max-w-max">
            <main className="sm:flex">
              <div className="text-center sm:text-left">
                <h1 className="text-4xl font-bold tracking-tight text-gray-900 sm:text-5xl">
                  Something went wrong
                </h1>
                <p className="mt-4 text-base text-gray-500">
                  An unexpected error occurred. Please refresh the page to try again.
                </p>
                <div className="mt-10">
                  <button
                    type="button"
                    onClick={() => window.location.reload()}
                    className="inline-flex items-center rounded-md bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-blue-700"
                  >
                    Refresh Page
                  </button>
                </div>
              </div>
            </main>
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;
```

src\components\LaunchMenu.tsx
```tsx
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { 
  CreditCardIcon, 
  DocumentIcon, 
  ChartBarIcon, 
  ChatBubbleLeftRightIcon,
  ChartPieIcon 
} from '@heroicons/react/24/outline';

const modules = [
  {
    id: 'payments',
    title: '401k Payments Manager',
    description: 'Manage and Review Client 401k payments',
    href: '/payments',
    icon: CreditCardIcon,
    available: true,
  },
  {
    id: 'agenda',
    title: 'Agenda Generator',
    description: 'Create and manage meeting agendas',
    href: '/agenda',
    icon: DocumentIcon,
    available: false,
  },
  {
    id: 'efip',
    title: 'eFIP',
    description: 'Financial Independence Projections',
    href: '/efip',
    icon: ChartBarIcon,
    available: false,
  },
  {
    id: 'structured-notes',
    title: 'Structured Notes Tracker',
    description: 'GBIL, Cash, and Structured Notes',
    href: '/structured-notes',
    icon: ChatBubbleLeftRightIcon,
    available: false,
  },
  {
    id: 'ai-tools',
    title: 'AI Tools',
    description: 'AI-powered investment analysis',
    href: '/ai-tools',
    icon: ChartPieIcon,
    available: false,
  },
];

export default function LaunchMenu() {
  const navigate = useNavigate();

  const handleNavigation = (module) => {
    if (module.available) {
      navigate(module.href);
    } else {
      navigate(`/under-construction?feature=${encodeURIComponent(module.title)}`);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="py-12 sm:py-16 lg:py-20">
        <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
          <div className="text-center">
            <h1 className="text-4xl font-bold tracking-tight text-gray-900 sm:text-5xl">
              Welcome to HohimerPro
            </h1>
            <p className="mt-4 text-xl text-gray-600">
              Investment management suite for Hohimer Wealth Management
            </p>
          </div>

          <div className="mt-12 grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-3">
            {modules.map((module) => (
              <button
                key={module.id}
                onClick={() => handleNavigation(module)}
                className="group relative rounded-lg border border-gray-200 bg-white p-6 shadow-sm transition-all hover:border-blue-500 hover:shadow-lg"
              >
                <div>
                  <span className="inline-flex rounded-lg bg-blue-50 p-3 text-blue-600 ring-4 ring-white">
                    <module.icon className="h-6 w-6" aria-hidden="true" />
                  </span>
                </div>
                <div className="mt-4">
                  <h3 className="text-xl font-medium text-gray-900">
                    {module.title}
                  </h3>
                  <p className="mt-2 text-sm text-gray-500">
                    {module.description}
                  </p>
                </div>
                <span
                  className="pointer-events-none absolute right-6 top-6 text-gray-300 group-hover:text-gray-400"
                  aria-hidden="true"
                >
                  <svg className="h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M20 4h1a1 1 0 00-1-1v1zm-1 12a1 1 0 102 0h-2zM8 3a1 1 0 000 2V3zM3.293 19.293a1 1 0 101.414 1.414l-1.414-1.414zM19 4v12h2V4h-2zm1-1H8v2h12V3zm-.707.293l-16 16 1.414 1.414 16-16-1.414-1.414z" />
                  </svg>
                </span>
              </button>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}
```

src\components\layout\Header.tsx
```tsx
import React from 'react';
import { Link, useLocation } from 'react-router-dom';

const Header = () => {
  const location = useLocation();
  
  const navItems = [
    { title: 'HOME', path: '/', active: location.pathname === '/' },
    { title: 'PAYMENTS', path: '/payments', active: location.pathname === '/payments' },
    { title: 'SUMMARY', path: '/summary', active: location.pathname === '/summary' },
    { title: 'CONTACTS', path: '/contacts', active: location.pathname === '/contacts' },
    { title: 'CONTRACTS', path: '/contracts', active: location.pathname === '/contracts' },
    { title: 'EXPORT DATA', path: '/export', active: location.pathname === '/export' },
  ];
  
  return (
    <header className="navbar-dark shadow-md">
      <div className="flex h-14 items-center justify-between px-6">
        <div className="flex items-center">
          <Link to="/" className="text-xl font-semibold text-white mr-8 hover:text-primary-300 transition-colors duration-200">
            HohimerPro
          </Link>
          <nav className="hidden md:flex space-x-1">
            {navItems.map((item) => (
              <Link 
                key={item.path} 
                to={item.path}
                className={`${
                  location.pathname === item.path 
                    ? 'bg-primary-600 text-white shadow-sm' 
                    : 'text-light-300 hover:bg-dark-accent hover:text-white'
                } rounded-md px-4 py-2 text-sm font-medium h-10 flex items-center transition-colors duration-200`}
              >
                {item.title}
              </Link>
            ))}
          </nav>
        </div>
        <div className="flex items-center space-x-4">
          <button className="flex items-center gap-2 p-2 text-light-300 hover:text-white transition-colors duration-200">
            <span className="hidden sm:inline-block text-sm font-medium">Admin User</span>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <polyline points="6 9 12 15 18 9"></polyline>
            </svg>
          </button>
        </div>
      </div>
      <div className="md:hidden overflow-x-auto bg-dark-600 px-3">
        <nav className="flex">
          {navItems.map((item) => (
            <Link
              key={item.path}
              to={item.path}
              className={`${
                location.pathname === item.path
                  ? 'border-b-2 border-primary-500 text-white'
                  : 'text-light-400 hover:text-white'
              } px-4 py-2 text-sm`}
            >
              {item.title}
            </Link>
          ))}
        </nav>
      </div>
    </header>
  );
};

export default Header;
```

src\components\layout\PageLayout.tsx
```tsx
import React from 'react';
import Header from './Header';
import Sidebar from './Sidebar';
import DocumentViewer from '../document/DocumentViewer';
import useStore from '../../store';

const PageLayout = ({ children, clients = [], isLoading = false }) => {
  const { documentViewerOpen } = useStore();
  
  return (
    <div className="flex flex-col min-h-screen bg-light-200">
      <Header />
      
      <div className="flex flex-1 overflow-hidden">
        <Sidebar clients={clients} isLoading={isLoading} />
        
        <div className="flex flex-1 overflow-hidden">
          <div className={`flex-1 overflow-auto px-5 py-6 ${documentViewerOpen ? 'w-3/5' : 'w-full'}`}>
            <div className={`mx-auto ${documentViewerOpen ? 'max-w-full' : 'max-w-full'}`}>
              {children}
            </div>
          </div>
          
          <DocumentViewer />
        </div>
      </div>
    </div>
  );
};

export default PageLayout;
```

src\components\layout\Sidebar.tsx
```tsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import useStore from '../../store';
import ClientSearch from '../client/ClientSearch';

const Sidebar = ({ clients = [], isLoading = false }) => {
  const { selectedClientId, setSelectedClientId } = useStore();
  const [showByProvider, setShowByProvider] = useState(false);
  const navigate = useNavigate();
  
  // Group clients by provider
  const groupClientsByProvider = () => {
    if (!showByProvider) {
      return [['All', clients]];
    }
    
    return Object.entries(
      clients.reduce((acc, client) => {
        const provider = client.provider_name || 'No Provider';
        if (!acc[provider]) acc[provider] = [];
        acc[provider].push(client);
        return acc;
      }, {})
    ).sort((a, b) => a[0].localeCompare(b[0]));
  };
  
  const groupedClients = groupClientsByProvider();
  
  // Get the status icon based on compliance status (binary: green or yellow)
  const StatusIcon = ({ status }) => {
    if (status === 'green') {
      return (
        <svg 
          xmlns="http://www.w3.org/2000/svg" 
          width="16" 
          height="16" 
          viewBox="0 0 24 24" 
          fill="none" 
          stroke="currentColor" 
          strokeWidth="2" 
          strokeLinecap="round" 
          strokeLinejoin="round" 
          className="text-green-500"
        >
          <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
          <polyline points="22 4 12 14.01 9 11.01"></polyline>
        </svg>
      );
    } else {
      // Default to yellow for 'Due' status
      return (
        <svg 
          xmlns="http://www.w3.org/2000/svg" 
          width="16" 
          height="16" 
          viewBox="0 0 24 24" 
          fill="none" 
          stroke="currentColor" 
          strokeWidth="2" 
          strokeLinecap="round" 
          strokeLinejoin="round" 
          className="text-yellow-500"
        >
          <circle cx="12" cy="12" r="10"></circle>
          <line x1="12" y1="8" x2="12" y2="12"></line>
          <line x1="12" y1="16" x2="12.01" y2="16"></line>
        </svg>
      );
    }
  };
  
  if (isLoading) {
    return (
      <div className="w-80 border-r border-gray-200 bg-white flex flex-col h-full">
        <div className="p-4 border-b border-gray-200">
          <h2 className="text-xl font-semibold text-gray-800 mb-4">Clients</h2>
          <div className="animate-pulse space-y-4">
            <div className="h-10 bg-gray-200 rounded"></div>
            <div className="h-6 bg-gray-200 rounded w-2/3"></div>
          </div>
        </div>
        <div className="p-2 flex-1 overflow-auto">
          <div className="animate-pulse space-y-3">
            {[...Array(5)].map((_, i) => (
              <div key={i} className="h-10 bg-gray-200 rounded"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }
  
  return (
    <div className="w-80 border-r border-gray-200 bg-white flex flex-col h-full">
      <div className="p-4 border-b border-gray-200">
        <h2 className="text-xl font-semibold text-gray-800 mb-4">Clients</h2>
        <ClientSearch clients={clients} isLoading={isLoading} />
        <div className="flex items-center justify-between mt-3">
          <span className="text-sm font-medium text-gray-700">View by Provider</span>
          <button 
            className={`h-5 w-10 rounded-full relative ${showByProvider ? 'bg-blue-600' : 'bg-gray-200'}`}
            onClick={() => setShowByProvider(!showByProvider)}
          >
            <div 
              className={`absolute w-3 h-3 rounded-full bg-white top-1 transition-all ${
                showByProvider ? 'right-1' : 'left-1'
              }`}
            ></div>
          </button>
        </div>
      </div>
      <div className="p-2 flex-1 overflow-auto">
        {groupedClients.map(([provider, providerClients]) => (
          <div key={provider} className="mb-2">
            {showByProvider && (
              <div className="px-3 py-2 text-xs font-semibold text-gray-600 bg-gray-50 rounded-md mb-1">
                {provider}
              </div>
            )}
            {providerClients.map(client => (
              <button
                key={client.client_id}
                className={`w-full flex items-center py-2 px-3 mb-1 text-left rounded transition-colors ${
                  selectedClientId === client.client_id 
                    ? 'bg-gray-100 border-l-4 border-primary-600 font-medium text-dark-700' 
                    : 'text-gray-700 hover:bg-gray-50'
                }`}
                onClick={() => setSelectedClientId(client.client_id)}
              >
                <span className="truncate flex-grow">{client.display_name}</span>
                <span className="ml-2 flex-shrink-0">
                  <StatusIcon status={client.compliance_status} />
                </span>
              </button>
            ))}
          </div>
        ))}
        
        {clients.length === 0 && (
          <div className="p-4 text-center text-gray-500">
            No clients available
          </div>
        )}
      </div>
    </div>
  );
};

export default Sidebar;
```

src\components\payment\ClientDashboard.tsx
```tsx
import React from 'react';
import ContractCard from './ContractCard';
import PaymentInfoCard from './PaymentInfoCard';
import ComplianceCard from './ComplianceCard';
import ErrorDisplay from '../ui/ErrorDisplay';
import { useClientDashboard } from '../../hooks/useClientData';
import useStore from '../../store';

const ClientDashboard = ({ clientId }) => {
  const { documentViewerOpen } = useStore();

  // Fetch dashboard data - single endpoint for all dashboard needs
  const {
    data: dashboardData,
    isLoading: isDashboardLoading,
    error: dashboardError,
  } = useClientDashboard(clientId);

  // Extract data from dashboard response
  const client = dashboardData?.client;
  const contract = dashboardData?.contract;
  const payments = dashboardData?.recent_payments || [];
  const metrics = dashboardData?.metrics;

  const isLoading = isDashboardLoading;
  const error = dashboardError;

  if (error) {
    return (
      <ErrorDisplay 
        title="Error loading client information"
        error={error}
      />
    );
  }

  // Determine layout based on document viewer state
  const cardLayoutClass = documentViewerOpen
    ? "grid grid-cols-1 lg:grid-cols-2 gap-6"
    : "grid grid-cols-1 md:grid-cols-3 gap-6";

  return (
    <div className="space-y-6">
      <div className={cardLayoutClass}>
        <ContractCard
          contract={contract}
          isLoading={isLoading}
        />
        <PaymentInfoCard
          dashboardData={dashboardData}
          isLoading={isLoading}
        />
        <ComplianceCard
          dashboardData={dashboardData}
          isLoading={isLoading}
        />
      </div>
    </div>
  );
};

export default ClientDashboard;
```

src\components\payment\ComplianceCard.tsx
```tsx
import React from 'react';
import Card from '../ui/Card';
import { formatCurrency, generateFeeReferences } from '../../utils/formatters';

const ComplianceCard = ({ dashboardData, isLoading }) => {
  if (isLoading) {
    return (
      <Card variant="default" elevation="default">
        <div className="pb-2">
          <h3 className="text-base font-semibold text-dark-700 border-b border-light-300 pb-2">Payment Status</h3>
        </div>
        <div className="animate-pulse flex flex-col md:flex-row gap-4 mt-3">
          <div className="flex-1">
            <div className="h-10 bg-gray-200 rounded w-2/3 mb-4"></div>
            <div className="space-y-3">
              <div className="h-4 bg-gray-200 rounded"></div>
              <div className="h-4 bg-gray-200 rounded"></div>
            </div>
          </div>
        </div>
      </Card>
    );
  }

  // Use data from dashboard API
  const paymentStatus = dashboardData?.payment_status?.status || 'Due';
  const currentPeriod = dashboardData?.payment_status?.current_period || 'N/A';
  const compliance = dashboardData?.compliance;
  const contract = dashboardData?.contract;
  const client = dashboardData?.client;

  // Payment status background color (binary: green or yellow)
  const getStatusBgColor = () => {
    if (paymentStatus === 'Paid') return 'bg-green-50 border-green-200 text-green-700';
    return 'bg-yellow-50 border-yellow-200 text-yellow-700'; // Due
  };

  // Payment status text
  const getStatusText = () => {
    if (paymentStatus === 'Paid') return 'Up to Date';
    return 'Payment Due';
  };

  // Get last recorded AUM for fee reference calculations
  const lastRecordedAUM = dashboardData?.recent_payments?.find(p => p.total_assets)?.total_assets || null;
  const feeReferences = contract ? generateFeeReferences(contract, lastRecordedAUM) : null;

  return (
    <Card variant="default" elevation="default">
      <div className="pb-2">
        <h3 className="text-base font-semibold text-dark-700 border-b border-light-300 pb-2">Payment Status</h3>
      </div>
      <div className="flex flex-col gap-4 mt-4">
        {/* Payment Status Indicator */}
        <div className="flex-1">
          <div className={`rounded border p-3 ${getStatusBgColor()}`}>
            <div className="flex items-center gap-2">
              <StatusIcon status={paymentStatus === 'Paid' ? "green" : "yellow"} />
              <span className="font-medium">{getStatusText()}</span>
            </div>
            {/* Current Period Status */}
            <div className="mt-2 text-sm">
              <span className="font-medium">Current Period:</span> {currentPeriod}
              <span className="ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-white bg-opacity-50">
                {paymentStatus}
              </span>
            </div>
            {/* Compliance Reason from backend */}
            {compliance?.reason && (
              <div className="mt-2 text-sm italic">
                {compliance.reason}
              </div>
            )}
          </div>

          {/* Contract info */}
          {contract && (
            <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-2 text-sm">
              <div className="text-dark-500">
                <span className="font-medium">Schedule:</span> {contract.payment_schedule === 'monthly' ? 'Monthly' : 'Quarterly'}
              </div>
              <div className="text-dark-500">
                <span className="font-medium">Fee Type:</span> {contract.fee_type === 'flat' ? 'Flat' : 'Percentage'}
              </div>
            </div>
          )}
        </div>

        {/* Fee Reference */}
        {feeReferences && (
          <div className="mt-2 border-t border-light-300 pt-3">
            <h4 className="text-sm font-medium text-dark-600 mb-2">Fee Reference</h4>
            <div className="grid grid-cols-3 gap-2">
              <div className="bg-light-200 p-2 rounded text-center">
                <div className="text-xs text-dark-500">Monthly</div>
                <div className="font-medium text-dark-700">{feeReferences.monthly}</div>
              </div>
              <div className="bg-light-200 p-2 rounded text-center">
                <div className="text-xs text-dark-500">Quarterly</div>
                <div className="font-medium text-dark-700">{feeReferences.quarterly}</div>
              </div>
              <div className="bg-light-200 p-2 rounded text-center">
                <div className="text-xs text-dark-500">Annual</div>
                <div className="font-medium text-dark-700">{feeReferences.annual}</div>
              </div>
            </div>
          </div>
        )}
      </div>
    </Card>
  );
};

// Status Icon Component (binary: green or yellow only)
const StatusIcon = ({ status }) => {
  if (status === 'green') {
    return (
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-green-500">
        <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
        <polyline points="22 4 12 14.01 9 11.01"></polyline>
      </svg>
    );
  }
  // Default to yellow for 'Due' status
  return (
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-yellow-500">
      <circle cx="12" cy="12" r="10"></circle>
      <line x1="12" y1="8" x2="12" y2="12"></line>
      <line x1="12" y1="16" x2="12.01" y2="16"></line>
    </svg>
  );
};

export default ComplianceCard;
```

src\components\payment\ContractCard.tsx
```tsx
import React from 'react';
import Card from '../ui/Card';
import { formatCurrency } from '../../utils/formatters';

const ContractCard = ({ contract, isLoading }) => {
  if (isLoading) {
    return (
      <Card 
        variant="default"
        elevation="default"
      >
        <div className="pb-2">
          <h3 className="text-base font-semibold text-dark-700 border-b border-light-300 pb-2">Contract Details</h3>
        </div>
        <div className="animate-pulse mt-3">
          <div className="grid grid-cols-1 gap-2">
            {[1, 2, 3, 4, 5].map((i) => (
              <div key={i} className="flex justify-between py-1">
                <div className="h-4 bg-gray-200 rounded w-1/3"></div>
                <div className="h-4 bg-gray-200 rounded w-1/3"></div>
              </div>
            ))}
          </div>
        </div>
      </Card>
    );
  }
  
  if (!contract) {
    return (
      <Card 
        variant="default"
        elevation="default"
      >
        <div className="pb-2">
          <h3 className="text-base font-semibold text-dark-700 border-b border-light-300 pb-2">Contract Details</h3>
        </div>
        <div className="py-6 text-center text-gray-500">
          No contract information available
        </div>
      </Card>
    );
  }
  
  const details = [
    {
      label: 'Contract Number',
      value: contract.contract_number || 'N/A',
    },
    {
      label: 'Plan Provider',
      value: contract.provider_name,
    },
    {
      label: 'Payment Frequency',
      value: contract.payment_schedule === 'monthly' ? 'Monthly' : 'Quarterly',
    },
    {
      label: 'Fee Structure',
      value: contract.fee_type === 'flat' ? 'Flat Rate' : 'Percentage of AUM',
    },
    {
      label: 'Fee Amount',
      value:
        contract.fee_type === 'flat'
          ? formatCurrency(contract.flat_rate)
          : `${(contract.percent_rate * 100).toFixed(3)}%`,
    },
  ];
  
  return (
    <Card variant="default" elevation="default">
      <div className="pb-2">
        <h3 className="text-base font-semibold text-dark-700 border-b border-light-300 pb-2">Contract Details</h3>
      </div>
      <dl className="grid grid-cols-1 gap-2 text-sm mt-4">
        {details.map((item, idx) => (
          <div key={idx} className="flex justify-between py-1.5 px-2 -mx-2 rounded hover:bg-light-100 transition-colors">
            <dt className="text-dark-500">{item.label}</dt>
            <dd className="font-medium text-dark-700">{item.value}</dd>
          </div>
        ))}
      </dl>
    </Card>
  );
};

export default ContractCard;
```

src\components\payment\PaymentForm.tsx
```tsx
import React, { useState } from 'react';
import Card from '../ui/Card';
import LoadingSpinner from '../ui/LoadingSpinner';
import EmptyState from '../ui/EmptyState';
import { useClientContract } from '../../hooks/useClientData';
import { useAvailablePeriods } from '../../hooks/usePaymentData';
import PaymentFormFields from './PaymentFormFields';
import ConfirmDialog from '../ui/ConfirmDialog';
import FormActions from './PaymentForm/FormActions';
import { usePaymentFormState } from './PaymentForm/usePaymentFormState';
import { usePaymentFormValidation } from './PaymentForm/usePaymentFormValidation';
import { usePaymentFormSubmit } from './PaymentForm/usePaymentFormSubmit';
const PaymentForm = ({ clientId, editingPayment, onEditingPaymentChange }) => {
  const { data: contract, isLoading: isContractLoading } = useClientContract(clientId);
  const { data: periodsData, isLoading: isPeriodsLoading } = useAvailablePeriods(
    contract?.contract_id,
    clientId,
    { enabled: !!contract?.contract_id && !!clientId }
  );

  const [showConfirmDialog, setShowConfirmDialog] = useState(false);
  const [isFormDirty, setIsFormDirty] = useState(false);

  // Custom hooks for form management
  const {
    formValues,
    resetForm,
    handleInputChange
  } = usePaymentFormState(clientId, contract, periodsData, editingPayment, setIsFormDirty);

  const {
    formErrors,
    setFormErrors,
    validateForm,
    clearFieldError,
    clearAllErrors
  } = usePaymentFormValidation();

  const {
    handleSubmit,
    isSubmitting,
    submitError
  } = usePaymentFormSubmit(clientId, contract, editingPayment, () => {
    resetForm();
    clearAllErrors();
  });

  // Enhanced input change handler with error clearing
  const handleInputChangeWithValidation = (field, value) => {
    handleInputChange(field, value);
    clearFieldError(field);
  };

  const handleFormSubmit = (e) => {
    e.preventDefault();
    handleSubmit(formValues, setFormErrors, validateForm);
  };

  const handleReset = () => {
    if (isFormDirty) {
      setShowConfirmDialog(true);
    } else {
      resetForm();
      clearAllErrors();
    }
  };

  const clearEditingPayment = () => {
    if (onEditingPaymentChange) {
      onEditingPaymentChange(null);
    }
  };

  const handleCancelEdit = () => {
    if (isFormDirty) {
      setShowConfirmDialog(true);
    } else {
      clearEditingPayment();
    }
  };

  const handleConfirmReset = () => {
    resetForm();
    clearAllErrors();
    setShowConfirmDialog(false);
    if (editingPayment) {
      clearEditingPayment();
    }
  };

  const isDisabled = !clientId || !contract;

  return (
    <div className={`animate-fade-in relative ${editingPayment ? 'form-focus' : ''}`}>
      <Card className="p-4 mb-4 relative z-10" elevation={editingPayment ? "raised" : "default"}>
        <div className="flex items-center justify-between mb-2">
          <h2 className="text-xl font-semibold text-dark-700 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-dark-500 mr-2">
              <rect x="3" y="5" width="18" height="14" rx="2" ry="2"></rect>
              <line x1="3" y1="10" x2="21" y2="10"></line>
            </svg>
            {editingPayment ? 'Edit Payment' : 'Record New Payment'}
          </h2>

          {editingPayment && (
            <button
              onClick={handleCancelEdit}
              className="text-sm text-dark-500 hover:text-dark-700 flex items-center"
            >
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-1">
                <line x1="18" y1="6" x2="6" y2="18"></line>
                <line x1="6" y1="6" x2="18" y2="18"></line>
              </svg>
              Cancel Edit
            </button>
          )}
        </div>

        {isContractLoading ? (
          <div className="flex justify-center py-6">
            <LoadingSpinner />
          </div>
        ) : !contract ? (
          <EmptyState 
            title="Select a client"
            message="Please select a client to add payment details"
            className="py-6"
          />
        ) : (
          <>
            <ConfirmDialog
              isOpen={showConfirmDialog}
              title="Unsaved Changes"
              message="You have unsaved changes. Are you sure you want to clear the form?"
              confirmText="Clear Form"
              cancelText="Cancel"
              confirmVariant="danger"
              onConfirm={handleConfirmReset}
              onCancel={() => setShowConfirmDialog(false)}
            />

            <form onSubmit={handleFormSubmit} className="space-y-4">
              <PaymentFormFields
                formValues={formValues}
                handleInputChange={handleInputChangeWithValidation}
                periodOptions={periodsData}
                isDisabled={isDisabled}
                isPeriodsLoading={isPeriodsLoading}
                contract={contract}
                formErrors={formErrors}
              />

              <FormActions
                editingPayment={editingPayment}
                isSubmitting={isSubmitting}
                submitError={submitError}
                onReset={handleReset}
                onSubmit={handleFormSubmit}
              />
            </form>
          </>
        )}
      </Card>

      {editingPayment && (
        <div className="fixed inset-0 bg-dark-800 bg-opacity-30 z-0" />
      )}
    </div>
  );
};

export default PaymentForm;
```

src\components\payment\PaymentForm\FormActions.tsx
```tsx
import React from 'react';
import Button from '../../ui/Button';
import ErrorDisplay from '../../ui/ErrorDisplay';

const FormActions = ({ 
  editingPayment, 
  isSubmitting, 
  submitError,
  onReset, 
  onSubmit 
}) => {
  return (
    <>
      {submitError && (
        <ErrorDisplay 
          title="Submission Error"
          error={submitError}
        />
      )}

      <div className="flex justify-end gap-3 mt-3">
        <Button
          variant="secondary"
          type="button"
          onClick={onReset}
          disabled={isSubmitting}
        >
          {editingPayment ? 'Cancel' : 'Clear Form'}
        </Button>
        <Button
          variant="primary"
          type="submit"
          disabled={isSubmitting}
          onClick={onSubmit}
        >
          {isSubmitting ? 'Submitting...' : editingPayment ? 'Update Payment' : 'Record Payment'}
        </Button>
      </div>
    </>
  );
};

export default FormActions;
```

src\components\payment\PaymentForm\usePaymentFormState.js
```js
import { useState, useEffect } from 'react';

export const usePaymentFormState = (clientId, contract, periodsData, editingPayment, setIsFormDirty) => {
  // Initial form state
  const defaultFormValues = {
    received_date: new Date().toISOString().split('T')[0],
    total_assets: '',
    actual_fee: '',
    method: '',
    notes: '',
    selected_period: '',
  };

  const [formValues, setFormValues] = useState(defaultFormValues);
  const [initialFormState, setInitialFormState] = useState(defaultFormValues);

  // Reset form when client changes or when editing payment changes
  useEffect(() => {
    if (clientId && !editingPayment) {
      resetForm();
    }
  }, [clientId]);

  // Find default period (previous month/quarter)
  const findDefaultPeriod = () => {
    if (!periodsData?.periods?.length || !contract?.payment_schedule) {
      return '';
    }

    const today = new Date();
    const currentMonth = today.getMonth() + 1; // 1-indexed
    const currentYear = today.getFullYear();

    if (contract.payment_schedule === 'monthly') {
      // Default to previous month
      const prevMonth = currentMonth === 1 ? 12 : currentMonth - 1;
      const prevYear = currentMonth === 1 ? currentYear - 1 : currentYear;
      const periodValue = `${prevMonth}-${prevYear}`;

      const foundPeriod = periodsData.periods.find(p => p.value === periodValue);
      return foundPeriod ? foundPeriod.value : periodsData.periods[0].value;
    } else {
      // Default to previous quarter
      const currentQuarter = Math.ceil(currentMonth / 3);
      const prevQuarter = currentQuarter === 1 ? 4 : currentQuarter - 1;
      const prevYear = currentQuarter === 1 ? currentYear - 1 : currentYear;
      const periodValue = `${prevQuarter}-${prevYear}`;

      const foundPeriod = periodsData.periods.find(p => p.value === periodValue);
      return foundPeriod ? foundPeriod.value : periodsData.periods[0].value;
    }
  };

  // Set default period when periods data is loaded
  useEffect(() => {
    if (periodsData?.periods?.length && !formValues.selected_period && !editingPayment) {
      const defaultPeriod = findDefaultPeriod();
      if (defaultPeriod) {
        setFormValues(prev => ({
          ...prev,
          selected_period: defaultPeriod
        }));
      }
    }
  }, [periodsData, editingPayment, contract]);

  // Populate form when editing a payment
  useEffect(() => {
    if (editingPayment) {
      const formattedValues = {
        received_date: editingPayment.received_date,
        total_assets: editingPayment.total_assets?.toString() || '',
        actual_fee: editingPayment.actual_fee?.toString() || '',
        method: editingPayment.method || '',
        notes: editingPayment.notes || '',
        selected_period: `${editingPayment.applied_period}-${editingPayment.applied_year}`,
      };

      setFormValues(formattedValues);
      setInitialFormState({ ...formattedValues });
      setIsFormDirty && setIsFormDirty(false);
    }
  }, [editingPayment, setIsFormDirty]);

  // Check if form is dirty on any input change
  useEffect(() => {
    const isDirty = JSON.stringify(formValues) !== JSON.stringify(initialFormState);
    setIsFormDirty && setIsFormDirty(isDirty);
  }, [formValues, initialFormState, setIsFormDirty]);

  const resetForm = () => {
    setFormValues({ ...defaultFormValues });
    setInitialFormState({ ...defaultFormValues });
    setIsFormDirty && setIsFormDirty(false);
  };

  const handleInputChange = (field, value) => {
    setFormValues((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  return {
    formValues,
    setFormValues,
    initialFormState,
    setInitialFormState,
    resetForm,
    handleInputChange
  };
};
```

src\components\payment\PaymentForm\usePaymentFormSubmit.js
```js
import { useCreatePayment, useUpdatePayment } from '../../../hooks/usePaymentData';

export const usePaymentFormSubmit = (clientId, contract, editingPayment, resetForm) => {
  const createPaymentMutation = useCreatePayment();
  const updatePaymentMutation = useUpdatePayment();

  const handleSubmit = (formValues, setFormErrors, validateForm) => {
    const errors = validateForm(formValues);
    if (Object.keys(errors).length > 0) {
      setFormErrors(errors);
      return;
    }

    // Parse selected period
    const periodParts = formValues.selected_period.split('-');
    const period = parseInt(periodParts[0], 10);
    const year = parseInt(periodParts[1], 10);

    // Prepare payment data from form values
    const paymentData = {
      contract_id: contract.contract_id,
      client_id: clientId,
      received_date: formValues.received_date,
      total_assets: formValues.total_assets ? parseFloat(formValues.total_assets) : null,
      actual_fee: parseFloat(formValues.actual_fee),
      method: formValues.method || null,
      notes: formValues.notes || null,
      applied_period_type: contract.payment_schedule,
      applied_period: period,
      applied_year: year
    };

    // Update or create payment
    if (editingPayment) {
      updatePaymentMutation.mutate(
        { id: editingPayment.payment_id, data: paymentData },
        {
          onSuccess: () => {
            resetForm();
          },
        }
      );
    } else {
      createPaymentMutation.mutate(paymentData, {
        onSuccess: () => {
          resetForm();
        },
      });
    }
  };

  return {
    handleSubmit,
    createPaymentMutation,
    updatePaymentMutation,
    isSubmitting: createPaymentMutation.isLoading || updatePaymentMutation.isLoading,
    submitError: createPaymentMutation.error || updatePaymentMutation.error
  };
};
```

src\components\payment\PaymentForm\usePaymentFormValidation.js
```js
import { useState } from 'react';

export const usePaymentFormValidation = () => {
  const [formErrors, setFormErrors] = useState({});

  const validateForm = (formValues) => {
    const errors = {};

    if (!formValues.received_date) {
      errors.received_date = 'Received date is required';
    }

    if (!formValues.actual_fee) {
      errors.actual_fee = 'Payment amount is required';
    } else if (isNaN(parseFloat(formValues.actual_fee))) {
      errors.actual_fee = 'Payment amount must be a number';
    }

    if (!formValues.selected_period) {
      errors.selected_period = 'Applied period is required';
    }

    return errors;
  };

  const clearFieldError = (field) => {
    if (formErrors[field]) {
      setFormErrors((prev) => ({
        ...prev,
        [field]: null,
      }));
    }
  };

  const clearAllErrors = () => {
    setFormErrors({});
  };

  return {
    formErrors,
    setFormErrors,
    validateForm,
    clearFieldError,
    clearAllErrors
  };
};
```

src\components\payment\PaymentFormFields.tsx
```tsx
import React from 'react';
import DatePicker from '../ui/DatePicker';
import Input from '../ui/Input';
import Select from '../ui/Select';
import { PAYMENT_METHODS } from '../../utils/constants';
import { formatCurrency } from '../../utils/formatters';

/**
 * Form fields for payment entry/editing
 */
const PaymentFormFields = ({
  formValues,
  handleInputChange,
  periodOptions,
  isDisabled,
  isPeriodsLoading,
  contract,
  formErrors
}) => {
  // Format period options from the raw data
  const formattedPeriodOptions = periodOptions?.periods?.map(period => ({
    label: period.label,
    value: period.value
  })) || [];

  // Calculate expected fee based on contract type
  const calculateExpectedFee = () => {
    if (!contract) return null;
    
    if (contract.fee_type === 'flat') {
      return contract.flat_rate;
    } else if (contract.fee_type === 'percentage' && formValues.total_assets) {
      const assets = parseFloat(formValues.total_assets);
      if (!isNaN(assets) && contract.percent_rate) {
        return assets * contract.percent_rate;
      }
    }
    return null;
  };

  const expectedFee = calculateExpectedFee();

  return (
    <>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-5">
        <DatePicker
          label="Received Date"
          value={formValues.received_date}
          onChange={(value) => handleInputChange('received_date', value)}
          required
          disabled={isDisabled}
          error={formErrors.received_date}
        />

        <Select
          label="Applied Period"
          options={formattedPeriodOptions}
          value={formValues.selected_period}
          onChange={(value) => handleInputChange('selected_period', value)}
          placeholder={isPeriodsLoading ? "Loading periods..." : "Select period"}
          required
          disabled={isDisabled || isPeriodsLoading}
          error={formErrors.selected_period}
        />
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-5">
        <Input
          label="Assets Under Management"
          type="text"
          value={formValues.total_assets}
          onChange={(value) => handleInputChange('total_assets', value)}
          placeholder="Enter AUM (optional)"
          prefix="$"
          disabled={isDisabled}
        />

        <Input
          label="Payment Amount"
          type="text"
          value={formValues.actual_fee}
          onChange={(value) => handleInputChange('actual_fee', value)}
          placeholder="Enter payment amount"
          prefix="$"
          required
          disabled={isDisabled}
          error={formErrors.actual_fee}
        />

        <Select
          label="Payment Method"
          options={PAYMENT_METHODS}
          value={formValues.method}
          onChange={(value) => handleInputChange('method', value)}
          placeholder="Select method (optional)"
          disabled={isDisabled}
        />
      </div>

      <div className="space-y-3 p-3 bg-gray-50 rounded-md">
        <Input
          label="Notes"
          type="text"
          value={formValues.notes}
          onChange={(value) => handleInputChange('notes', value)}
          placeholder="Enter any notes about this payment"
          disabled={isDisabled}
        />

        <div className="grid grid-cols-1 md:grid-cols-2 gap-3 mt-3">
          {/* Expected Fee Card */}
          {contract && (
            <div className="p-2 bg-blue-50 rounded text-sm">
              <div className="font-medium text-blue-800">Expected Fee:</div>
              <div className="text-blue-600">
                {expectedFee !== null
                  ? formatCurrency(expectedFee)
                  : (contract?.fee_type === 'percentage' ? 'Needs AUM data' : 'N/A')}
              </div>
              <div className="text-xs text-blue-500 mt-1">
                {contract?.fee_type === 'flat' 
                  ? 'Flat fee as specified in contract'
                  : contract?.percent_rate 
                    ? `${(contract.percent_rate * 100).toFixed(2)}% of AUM`
                    : 'Enter AUM to calculate expected fee'}
              </div>
            </div>
          )}

          {/* Next Payment Due - Moved to backend calculations */}
        </div>
      </div>
    </>
  );
};

export default PaymentFormFields;
```

src\components\payment\PaymentHistory.tsx
```tsx
import React from 'react';
import { usePaymentHistory, useDeletePayment } from '../../hooks/usePaymentData';
import LoadingSpinner from '../ui/LoadingSpinner';
import EmptyState from '../ui/EmptyState';
import ErrorDisplay from '../ui/ErrorDisplay';
import ConfirmDialog from '../ui/ConfirmDialog';
import Card from '../ui/Card';
import Button from '../ui/Button';
import PaymentTableRow from './PaymentHistory/PaymentTableRow';
import { usePaymentTableState } from './PaymentHistory/usePaymentTableState';
import useStore from '../../store';

const PaymentHistory = ({ clientId, editingPayment, onEditingPaymentChange }) => {
  const { setDocumentViewerOpen, setSelectedDocumentUrl } = useStore();
  
  const {
    page,
    year,
    showDeleteConfirm,
    setPage,
    setYear,
    confirmDelete,
    cancelDelete,
    getAvailableYears
  } = usePaymentTableState();

  const {
    data: payments = [],
    isLoading,
    error,
    isPreviousData,
  } = usePaymentHistory(clientId, { page, limit: 10, year });

  // Calculate variance for each payment since backend doesn't include it
  const calculateVariance = (actual, expected) => {
    if (!actual || !expected) return { status: 'unknown', message: 'N/A' };
    const diff = actual - expected;
    const percent = (diff / expected) * 100;
    
    if (Math.abs(diff) < 0.01) return { status: 'exact', message: 'Exact Match' };
    if (Math.abs(percent) <= 5) return { status: 'acceptable', message: `$${diff.toFixed(2)} (${percent.toFixed(1)}%)` };
    if (Math.abs(percent) <= 15) return { status: 'warning', message: `$${diff.toFixed(2)} (${percent.toFixed(1)}%)` };
    return { status: 'alert', message: `$${diff.toFixed(2)} (${percent.toFixed(1)}%)` };
  };

  // Add variance to each payment
  const paymentsWithVariance = payments.map(payment => ({
    ...payment,
    variance: calculateVariance(payment.actual_fee, payment.expected_fee)
  }));

  const deletePaymentMutation = useDeletePayment();

  const handleEdit = (payment) => {
    onEditingPaymentChange && onEditingPaymentChange(payment);
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const handleDelete = (paymentId) => {
    deletePaymentMutation.mutate({ id: paymentId, clientId });
    cancelDelete();
  };

  const handleViewFile = (payment) => {
    if (payment.has_files) {
      setSelectedDocumentUrl(`/api/files/payment/${payment.payment_id}`);
      setDocumentViewerOpen(true);
    }
  };

  const availableYears = getAvailableYears();

  if (error) {
    return (
      <ErrorDisplay 
        title="Error loading payment history"
        error={error}
      />
    );
  }

  return (
    <div className="animate-fade-in mt-3">
      <div className="flex items-center justify-between mb-2">
        <h2 className="text-xl font-semibold text-dark-700 flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-dark-500 mr-2">
            <path d="M19 5H5a2 2 0 00-2 2v10a2 2 0 002 2h14a2 2 0 002-2V7a2 2 0 00-2-2z"></path>
            <line x1="8" y1="2" x2="8" y2="5"></line>
            <line x1="16" y1="2" x2="16" y2="6"></line>
            <line x1="3" y1="10" x2="21" y2="10"></line>
          </svg>
          Payment History
        </h2>
        <div className="flex items-center space-x-2">
          <label className="text-sm text-dark-500">Filter by Year:</label>
          <select
            className="border border-light-500 rounded-md text-sm p-1.5 bg-white shadow-sm focus:ring-1 focus:ring-primary-400 focus:border-primary-400 transition-all duration-200"
            value={year || ''}
            onChange={(e) => setYear(e.target.value === '' ? null : e.target.value)}
          >
            <option value="">All Years</option>
            {availableYears.map((y) => (
              <option key={y} value={y}>{y}</option>
            ))}
          </select>
        </div>
      </div>

      {isLoading ? (
        <div className="flex justify-center py-5">
          <LoadingSpinner />
        </div>
      ) : payments.length === 0 ? (
        <EmptyState 
          title="No payment records found"
          className="bg-white border border-light-300 p-5 rounded-lg text-center shadow-sm"
        />
      ) : (
        <Card className="p-0 overflow-hidden" elevation="default" variant="default">
          <div className="overflow-x-auto -mx-1">
            <table className="min-w-full table-fixed border-collapse">
              <thead>
                <tr className="bg-light-200 border-b border-light-300">
                  <th className="w-[2%] py-2.5 px-1 text-left text-xs font-medium text-dark-600 uppercase tracking-wider"></th>
                  <th className="w-[11%] py-2.5 px-2 text-left text-xs font-medium text-dark-600 uppercase tracking-wider">Date</th>
                  <th className="w-[17%] py-2.5 px-2 text-left text-xs font-medium text-dark-600 uppercase tracking-wider">Provider</th>
                  <th className="w-[12%] py-2.5 px-2 text-left text-xs font-medium text-dark-600 uppercase tracking-wider">Period</th>
                  <th className="w-[12%] py-2.5 px-2 text-left text-xs font-medium text-dark-600 uppercase tracking-wider">AUM</th>
                  <th className="w-[13%] py-2.5 px-2 text-left text-xs font-medium text-dark-600 uppercase tracking-wider">Expected</th>
                  <th className="w-[13%] py-2.5 px-2 text-left text-xs font-medium text-dark-600 uppercase tracking-wider">Actual</th>
                  <th className="w-[14%] py-2.5 px-2 text-left text-xs font-medium text-dark-600 uppercase tracking-wider">Variance</th>
                  <th className="w-[6%] py-2.5 px-1 text-center text-xs font-medium text-dark-600 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-light-300">
                {paymentsWithVariance.map((payment) => (
                  <PaymentTableRow
                    key={payment.payment_id}
                    payment={payment}
                    showDeleteConfirm={showDeleteConfirm}
                    onEdit={handleEdit}
                    onViewFile={handleViewFile}
                    onConfirmDelete={handleDelete}
                    onCancelDelete={cancelDelete}
                    onDeleteClick={confirmDelete}
                    isDeleting={deletePaymentMutation.isLoading}
                  />
                ))}
              </tbody>
            </table>
          </div>

          {/* Pagination */}
          <div className="flex items-center justify-between px-4 py-2 bg-light-200 border-t border-light-300">
            <div className="text-sm text-dark-500">
              Showing {payments.length} payments
            </div>
            <nav className="flex items-center space-x-2">
              <Button
                variant="secondary"
                size="sm"
                onClick={() => setPage(Math.max(page - 1, 1))}
                disabled={page === 1 || isPreviousData}
              >
                Previous
              </Button>
              <Button
                variant="secondary"
                size="sm"
                onClick={() => {
                  if (payments.length === 10 && !isPreviousData) {
                    setPage(page + 1);
                  }
                }}
                disabled={payments.length < 10 || isPreviousData}
              >
                Next
              </Button>
            </nav>
          </div>
        </Card>
      )}

      <ConfirmDialog
        isOpen={!!showDeleteConfirm}
        title="Confirm Delete"
        message="Are you sure you want to delete this payment? This action cannot be undone."
        confirmText="Delete"
        cancelText="Cancel"
        confirmVariant="danger"
        onConfirm={() => handleDelete(showDeleteConfirm)}
        onCancel={cancelDelete}
        isLoading={deletePaymentMutation.isLoading}
      />
    </div>
  );
};

export default PaymentHistory;
```

src\components\payment\PaymentHistory\PaymentTableRow.tsx
```tsx
import React from 'react';
import { formatDate, formatAppliedPeriod } from '../../../utils/dateUtils';
import { formatCurrency } from '../../../utils/formatters';
import StatusBadge from '../../ui/StatusBadge';

const PaymentTableRow = ({ 
  payment, 
  showDeleteConfirm,
  onEdit,
  onViewFile,
  onConfirmDelete,
  onCancelDelete,
  onDeleteClick,
  isDeleting
}) => {
  const expectedFee = payment.expected_fee;
  const variance = payment.variance || { status: 'unknown', message: 'N/A' };

  return (
    <tr className="hover:bg-light-200" data-payment-id={payment.payment_id}>
      <td className="py-2 px-1"></td>
      <td className="py-2 px-2 whitespace-nowrap">{formatDate(payment.received_date)}</td>
      <td className="py-2 px-2 truncate">{payment.provider_name || 'N/A'}</td>
      <td className="py-2 px-2 whitespace-nowrap">
        {formatAppliedPeriod(payment)}
      </td>
      <td className="py-2 px-2 whitespace-nowrap">
        {payment.total_assets ? formatCurrency(payment.total_assets) : 'N/A'}
      </td>
      <td className="py-2 px-2 whitespace-nowrap">
        {expectedFee !== null ? formatCurrency(expectedFee) : 'N/A'}
      </td>
      <td className="py-2 px-2 whitespace-nowrap font-medium">{formatCurrency(payment.actual_fee)}</td>
      <td className="py-2 px-2">
        <StatusBadge
          status={variance.status}
          label={variance.message}
          size="md"
        />
      </td>
      <td className="py-2 px-1">
        <div className="grid grid-cols-3 gap-1 justify-items-center">
          <div className="w-6">
            {payment.has_files && (
              <button
                onClick={() => onViewFile(payment)}
                className="text-blue-500 hover:text-blue-600 transition-colors file-indicator"
                title="View document"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="18"
                  height="18"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                  <polyline points="14 2 14 8 20 8"></polyline>
                  <line x1="16" y1="13" x2="8" y2="13"></line>
                  <line x1="16" y1="17" x2="8" y2="17"></line>
                  <polyline points="10 9 9 9 8 9"></polyline>
                </svg>
              </button>
            )}
          </div>
          <div className="w-6">
            <button
              onClick={() => onEdit(payment)}
              className="text-dark-500 hover:text-primary-600 transition-colors"
              aria-label="Edit payment"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="18"
                height="18"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              >
                <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
              </svg>
            </button>
          </div>
          <div className="w-6">
            {showDeleteConfirm === payment.payment_id ? (
              <div className="flex items-center">
                <button
                  className="text-dark-500 hover:text-status-success transition-colors"
                  onClick={() => onConfirmDelete(payment.payment_id)}
                  disabled={isDeleting}
                  aria-label="Confirm delete"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="18"
                    height="18"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  >
                    <polyline points="20 6 9 17 4 12"></polyline>
                  </svg>
                </button>
                <button
                  className="text-dark-500 hover:text-dark-700 ml-1 transition-colors"
                  onClick={onCancelDelete}
                  aria-label="Cancel delete"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="18"
                    height="18"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  >
                    <line x1="18" y1="6" x2="6" y2="18"></line>
                    <line x1="6" y1="6" x2="18" y2="18"></line>
                  </svg>
                </button>
              </div>
            ) : (
              <button
                onClick={() => onDeleteClick(payment.payment_id)}
                className="text-dark-500 hover:text-status-error transition-colors"
                aria-label="Delete payment"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="18"
                  height="18"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <polyline points="3 6 5 6 21 6"></polyline>
                  <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
                  <line x1="10" y1="11" x2="10" y2="17"></line>
                  <line x1="14" y1="11" x2="14" y2="17"></line>
                </svg>
              </button>
            )}
          </div>
        </div>
      </td>
    </tr>
  );
};

export default PaymentTableRow;
```

src\components\payment\PaymentHistory\usePaymentTableState.js
```js
import { useState } from 'react';

export const usePaymentTableState = () => {
  const [page, setPage] = useState(1);
  const [year, setYear] = useState(null);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(null);

  const confirmDelete = (paymentId) => {
    setShowDeleteConfirm(paymentId);
  };

  const cancelDelete = () => {
    setShowDeleteConfirm(null);
  };

  // Generate available years for filter
  const getAvailableYears = () => {
    const currentYear = new Date().getFullYear();
    const availableYears = [];
    for (let y = currentYear; y >= currentYear - 5; y--) {
      availableYears.push(y);
    }
    return availableYears;
  };

  return {
    // State
    page,
    year,
    showDeleteConfirm,
    
    // Setters
    setPage,
    setYear,
    
    // Actions
    confirmDelete,
    cancelDelete,
    
    // Utilities
    getAvailableYears
  };
};
```

src\components\payment\PaymentInfoCard.tsx
```tsx
import React from 'react';
import Card from '../ui/Card';
import { formatCurrency } from '../../utils/formatters';
import { formatDate } from '../../utils/dateUtils';
import { MONTH_NAMES } from '../../utils/constants';

const PaymentInfoCard = ({ dashboardData, isLoading }) => {
  if (isLoading) {
    return (
      <Card variant="default" elevation="default">
        <div className="pb-2">
          <h3 className="text-base font-semibold text-dark-700 border-b border-light-300 pb-2">Payment Information</h3>
        </div>
        <div className="animate-pulse mt-3">
          <div className="grid grid-cols-1 gap-2">
            {[1, 2, 3, 4, 5].map((i) => (
              <div key={i} className="flex justify-between py-1">
                <div className="h-4 bg-gray-200 rounded w-1/3"></div>
                <div className="h-4 bg-gray-200 rounded w-1/3"></div>
              </div>
            ))}
          </div>
        </div>
      </Card>
    );
  }

  // Extract data from dashboard response
  const metrics = dashboardData?.metrics || {};
  const paymentStatus = dashboardData?.payment_status || {};
  const payments = dashboardData?.recent_payments || [];
  
  // Get latest payment data
  const latestPayment = payments.length > 0 ? payments[0] : null;
  
  // Use metrics from dashboard API
  const lastRecordedAUM = metrics.last_recorded_assets;
  const currentPeriod = paymentStatus.current_period || 'N/A';
  const expectedFee = paymentStatus.expected_fee;
  const isPaid = paymentStatus.status === 'Paid';

  const details = [
    {
      label: 'AUM',
      value: lastRecordedAUM ? formatCurrency(lastRecordedAUM) : 'No AUM data',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-dark-400">
          <path d="M12 2v20M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path>
        </svg>
      )
    },
    {
      label: 'Expected Fee',
      value: expectedFee ? formatCurrency(expectedFee) : 'N/A',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-dark-400">
          <circle cx="12" cy="12" r="10"></circle>
          <line x1="12" y1="8" x2="12" y2="16"></line>
          <line x1="8" y1="12" x2="16" y2="12"></line>
        </svg>
      )
    },
    {
      label: 'Last Payment',
      value: paymentStatus.last_payment_date ? formatDate(paymentStatus.last_payment_date) : 'No payments recorded',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-dark-400">
          <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
          <line x1="16" y1="2" x2="16" y2="6"></line>
          <line x1="8" y1="2" x2="8" y2="6"></line>
          <line x1="3" y1="10" x2="21" y2="10"></line>
        </svg>
      )
    },
    {
      label: 'Last Payment Amount',
      value: paymentStatus.last_payment_amount ? formatCurrency(paymentStatus.last_payment_amount) : 'N/A',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-dark-400">
          <line x1="12" y1="1" x2="12" y2="23"></line>
          <path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path>
        </svg>
      )
    },
    {
      label: 'Current Period',
      value: currentPeriod,
      highlight: true,
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-primary-500">
          <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
          <line x1="16" y1="2" x2="16" y2="6"></line>
          <line x1="8" y1="2" x2="8" y2="6"></line>
          <line x1="3" y1="10" x2="21" y2="10"></line>
        </svg>
      )
    },
    {
      label: 'Payment Status',
      value: paymentStatus.status || 'Due',
      highlight: !isPaid,
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={!isPaid ? 'text-amber-500' : 'text-green-500'}>
          <circle cx="12" cy="12" r="10"></circle>
          <polyline points="12 6 12 12 16 14"></polyline>
        </svg>
      )
    },
    {
      label: 'YTD Payments',
      value: metrics.total_ytd_payments ? formatCurrency(metrics.total_ytd_payments) : 'N/A',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-dark-400">
          <line x1="8" y1="6" x2="21" y2="6"></line>
          <line x1="8" y1="12" x2="21" y2="12"></line>
          <line x1="8" y1="18" x2="21" y2="18"></line>
          <line x1="3" y1="6" x2="3.01" y2="6"></line>
          <line x1="3" y1="12" x2="3.01" y2="12"></line>
          <line x1="3" y1="18" x2="3.01" y2="18"></line>
        </svg>
      )
    },
  ];

  return (
    <Card variant="default" elevation="default">
      <div className="pb-2">
        <h3 className="text-base font-semibold text-dark-700 border-b border-light-300 pb-2">Payment Information</h3>
      </div>
      <dl className="grid grid-cols-1 gap-2 text-sm mt-4">
        {details.map((item, idx) => (
          <div
            key={idx}
            className={`
              flex justify-between items-center py-1.5 px-2 -mx-2 rounded
              ${item.highlight ? 'bg-light-200 border border-light-400' : ''}
            `}
          >
            <dt className="text-dark-500 flex items-center gap-2">
              {item.icon}
              {item.label}
            </dt>
            <dd className={`font-medium ${item.highlight ? 'text-primary-600' : 'text-dark-700'}`}>
              {item.value}
            </dd>
          </div>
        ))}
      </dl>
    </Card>
  );
};

export default PaymentInfoCard;
```

src\components\ui\Button.tsx
```tsx
import React from 'react';

const Button = ({ 
  children, 
  variant = 'primary', 
  size = 'md',
  className = '',
  iconLeft = null,
  iconRight = null,
  ...props 
}) => {
  const variantStyles = {
    primary: 'bg-primary-600 text-white hover:bg-primary-700 hover:shadow-sm shadow-sm',
    secondary: 'bg-white border border-light-500 text-dark-500 hover:bg-light-200 hover:border-light-500 hover:text-dark-600 shadow-sm',
    outline: 'bg-transparent border border-primary-600 text-primary-600 hover:bg-primary-50 hover:border-primary-700 hover:text-primary-700 shadow-sm',
    dark: 'bg-dark-600 text-white hover:bg-dark-700 hover:shadow-sm shadow-sm',
    ghost: 'text-dark-500 hover:bg-light-300 hover:text-dark-600',
    danger: 'bg-status-error text-white hover:bg-red-700 hover:shadow-sm shadow-sm',
  };
  
  const sizeStyles = {
    sm: 'px-3 py-1.5 text-sm',
    md: 'px-4 py-2',
    lg: 'px-6 py-3 text-base',
  };
  
  return (
    <button
      className={`
        ${variantStyles[variant]} 
        ${sizeStyles[size]} 
        flex items-center justify-center gap-2
        rounded-md font-medium 
        transition-all duration-200 ease-in-out
        focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-primary-500
        ${className}
      `}
      {...props}
    >
      {iconLeft && <span className="flex-shrink-0">{iconLeft}</span>}
      <span>{children}</span>
      {iconRight && <span className="flex-shrink-0">{iconRight}</span>}
    </button>
  );
};

export default Button;
```

src\components\ui\Card.tsx
```tsx
import React from 'react';

const Card = ({ 
  children, 
  title,
  className = '',
  titleClassName = '',
  bodyClassName = '',
  variant = 'default',
  size = 'default',
  elevation = 'default',
  ...props 
}) => {
  const elevationClasses = {
    none: '',
    default: 'shadow-sm',
    raised: 'shadow-md',
    floating: 'shadow-lg',
  };

  const variantClasses = {
    default: 'bg-white border border-light-300',
    outlined: 'bg-white border border-light-300',
    filled: 'bg-light-100 border border-light-200',
  };

  // Default to p-3 (smaller than before) if no padding class is specified in className
  const hasPaddingClass = /\bp-\d+\b/.test(className);
  const paddingClass = hasPaddingClass ? '' : 'p-3';

  const baseClasses = 'rounded-lg';
  const elevationClass = elevationClasses[elevation] || elevationClasses.default;
  const variantClass = variantClasses[variant] || variantClasses.default;

  return (
    <div 
      className={`${baseClasses} ${elevationClass} ${variantClass} ${paddingClass} ${className}`}
      {...props}
    >
      {title && (
        <div className={`px-5 py-4 border-b border-light-400 font-medium ${titleClassName}`}>
          <h3 className="text-lg">{title}</h3>
        </div>
      )}
      <div className={`${size} ${bodyClassName}`}>
        {children}
      </div>
    </div>
  );
};

export default Card;
```

src\components\ui\ConfirmDialog.tsx
```tsx
import React from 'react';
import Card from './Card';
import Button from './Button';

const ConfirmDialog = ({ 
  isOpen = true,
  title = "Confirm Action", 
  message = "Are you sure you want to proceed?", 
  confirmText = "Confirm",
  cancelText = "Cancel",
  confirmVariant = "danger",
  onConfirm, 
  onCancel,
  isLoading = false
}) => {
  if (!isOpen) {
    return null;
  }

  return (
    <div className="fixed inset-0 bg-dark-800 bg-opacity-75 flex items-center justify-center z-50">
      <Card className="max-w-md w-full" elevation="default">
        <div className="p-4">
          <h3 className="text-lg font-medium mb-2 text-dark-700">{title}</h3>
          <p className="mb-3 text-dark-500">{message}</p>
          <div className="flex justify-end space-x-3">
            <Button
              variant="secondary"
              onClick={onCancel}
              disabled={isLoading}
            >
              {cancelText}
            </Button>
            <Button
              variant={confirmVariant}
              onClick={onConfirm}
              disabled={isLoading}
            >
              {isLoading ? 'Processing...' : confirmText}
            </Button>
          </div>
        </div>
      </Card>
    </div>
  );
};

export default ConfirmDialog;
```

src\components\ui\DatePicker.tsx
```tsx
import React from 'react';

const DatePicker = ({
  label,
  value,
  onChange,
  placeholder = '',
  disabled = false,
  required = false,
  error = null,
}) => {
  return (
    <div className="space-y-1.5">
      {label && (
        <label className="text-sm font-medium flex items-center">
          {label}
          {required && <span className="text-red-500 ml-1">*</span>}
        </label>
      )}
      <div className="relative">
        <input
          type="date"
          value={value || ''}
          onChange={(e) => onChange(e.target.value)}
          placeholder={placeholder}
          disabled={disabled}
          className={`
            w-full h-10 pl-8 pr-3 border rounded-md
            ${error ? 'border-red-500' : 'border-gray-200'}
            ${disabled ? 'bg-gray-100 text-gray-500' : 'bg-white text-gray-900'}
            focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent
          `}
        />
        <div className="absolute left-3 top-1/2 transform -translate-y-1/2 pointer-events-none">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
            className="text-gray-400"
          >
            <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
            <line x1="16" y1="2" x2="16" y2="6"></line>
            <line x1="8" y1="2" x2="8" y2="6"></line>
            <line x1="3" y1="10" x2="21" y2="10"></line>
          </svg>
        </div>
      </div>
      {error && <p className="text-red-500 text-xs">{error}</p>}
    </div>
  );
};

export default DatePicker;
```

src\components\ui\EmptyState.tsx
```tsx
import React from 'react';

const EmptyState = ({ 
  title, 
  message, 
  icon = null,
  className = '',
  bgColor = 'bg-gray-50',
  textColor = 'text-gray-500'
}) => (
  <div className={`flex-1 flex items-center justify-center p-4 ${bgColor} ${textColor} ${className}`}>
    <div className="text-center">
      {icon}
      <p className="font-medium mb-1">{title}</p>
      {message && <p className="text-sm">{message}</p>}
    </div>
  </div>
);

export default EmptyState;
```

src\components\ui\ErrorDisplay.tsx
```tsx
import React from 'react';

const ErrorDisplay = ({ title, message, error }) => (
  <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
    <h3 className="font-medium mb-1">{title}</h3>
    <p>{error?.message || message}</p>
  </div>
);

export default ErrorDisplay;
```

src\components\ui\Input.tsx
```tsx
import React from 'react';

const Input = ({
  label,
  type = 'text',
  value,
  onChange,
  placeholder = '',
  prefix = null,
  disabled = false,
  className = '',
  required = false,
  error = null,
}) => {
  return (
    <div className="space-y-1.5">
      {label && (
        <label className="text-sm font-medium flex items-center text-dark-600">
          {label}
          {required && <span className="text-red-500 ml-1">*</span>}
        </label>
      )}
      <div className="relative group">
        {prefix && (
          <div className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 group-hover:text-primary-500 transition-colors duration-200">
            {prefix}
          </div>
        )}
        <input
          type={type}
          value={value || ''}
          onChange={(e) => onChange(e.target.value)}
          placeholder={placeholder}
          disabled={disabled}
          className={`
            w-full h-10 rounded-md border shadow-sm
            ${error ? 'border-red-500' : 'border-gray-200 group-hover:border-primary-300'}
            ${prefix ? 'pl-8' : 'pl-3'}
            ${disabled ? 'bg-gray-100 text-gray-500 cursor-not-allowed' : 'bg-white text-gray-900'}
            focus:outline-none focus:ring-2 focus:ring-primary-400 focus:border-transparent
            transition-all duration-200 ease-in-out
            ${className}
          `}
        />
        {!error && !disabled && (
          <div className="absolute inset-0 border border-transparent rounded-md pointer-events-none group-hover:border-primary-200 group-hover:shadow-sm transition-all duration-200"></div>
        )}
      </div>
      {error && <p className="text-red-500 text-xs mt-1">{error}</p>}
    </div>
  );
};

export default Input;
```

src\components\ui\Loader.tsx
```tsx
import React from 'react';

const Loader = ({ size = 'md', color = 'blue' }) => {
  const sizeClasses = {
    sm: 'h-4 w-4',
    md: 'h-6 w-6',
    lg: 'h-8 w-8',
    xl: 'h-12 w-12',
  };
  
  const colorClasses = {
    blue: 'text-blue-600',
    gray: 'text-gray-600',
    white: 'text-white',
  };
  
  return (
    <svg
      className={`animate-spin ${sizeClasses[size]} ${colorClasses[color]}`}
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
    >
      <circle
        className="opacity-25"
        cx="12"
        cy="12"
        r="10"
        stroke="currentColor"
        strokeWidth="4"
      ></circle>
      <path
        className="opacity-75"
        fill="currentColor"
        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
      ></path>
    </svg>
  );
};

export default Loader;
```

src\components\ui\LoadingSpinner.tsx
```tsx
import React from 'react';

const LoadingSpinner = ({ size = 'default', className = '' }) => {
  const sizeClasses = {
    sm: 'w-4 h-4',
    default: 'w-10 h-10',
    lg: 'w-16 h-16'
  };

  return (
    <div className={`border-4 border-primary-200 border-t-primary-600 rounded-full animate-spin ${sizeClasses[size]} ${className}`} />
  );
};

export default LoadingSpinner;
```

src\components\ui\Select.tsx
```tsx
import React from 'react';

/**
 * Select component with consistent styling
 */
const Select = ({
  label,
  options = [],
  value,
  onChange,
  placeholder = 'Select an option',
  disabled = false,
  required = false,
  error = null,
  className = '',
  size = 'default',
}) => {
  const sizeStyles = {
    sm: 'h-8 px-2 text-sm',
    default: 'h-10 px-3 text-sm',
    lg: 'h-12 px-4 text-base',
  };
  
  return (
    <div className={`space-y-1.5 w-full ${className}`}>
      {label && (
        <label className="text-sm font-medium text-dark-600 flex items-center">
          {label}
          {required && <span className="text-status-error ml-1">*</span>}
        </label>
      )}
      
      <div className="relative w-full group">
        <select
          value={value || ''}
          onChange={(e) => onChange(e.target.value)}
          disabled={disabled}
          className={`
            w-full rounded-md appearance-none shadow-sm
            ${sizeStyles[size] || sizeStyles.default}
            transition-all duration-200 ease-in-out
            ${error ? 'border-status-error' : 'border-light-400 group-hover:border-light-500'}
            ${disabled ? 'bg-light-300 text-dark-400 cursor-not-allowed' : 'bg-light-100 text-dark-600'}
            focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-transparent
          `}
        >
          <option value="" disabled>
            {placeholder}
          </option>
          {options.map((option) => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
        
        <div className="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
            className="text-dark-400 group-hover:text-dark-500 transition-colors duration-200"
          >
            <polyline points="6 9 12 15 18 9"></polyline>
          </svg>
        </div>
        
        {!error && !disabled && (
          <div className="absolute inset-0 border border-transparent rounded-md pointer-events-none group-hover:border-light-400 transition-all duration-200"></div>
        )}
      </div>
      
      {error && (
        <p className="text-status-error text-xs mt-1 animate-fade-in">{error}</p>
      )}
    </div>
  );
};

export default Select;
```

src\components\ui\StatusBadge.tsx
```tsx
import React from 'react';
import { STATUS_COLORS } from '../../utils/constants';

/**
 * Status badge component for displaying statuses with appropriate colors
 * @param {string} status - Status identifier (exact, acceptable, warning, alert, unknown)
 * @param {string} label - Text label to display
 * @param {string} size - Size variant (xs, sm, md, lg)
 */
const StatusBadge = ({ status, label, size = 'md' }) => {
  const sizeClasses = {
    xs: 'px-1 py-0.5 text-xs',
    sm: 'px-1.5 py-0.5 text-xs',
    md: 'px-2 py-1 text-xs',
    lg: 'px-3 py-1.5 text-sm',
  };

  const colorClass = STATUS_COLORS[status] || STATUS_COLORS.gray;
  const sizeClass = sizeClasses[size] || sizeClasses.md;

  // Format the display label for clarity
  const getDisplayLabel = () => {
    if (!label || label === 'N/A') return 'N/A';

    // Show symbols for common statuses
    switch (status) {
      case 'exact':
        return 'âœ“ Exact';
      case 'acceptable':
        return 'âœ“ ' + label;
      case 'unknown':
        return 'N/A';
      default:
        return label;
    }
  };

  return (
    <span className={`inline-flex items-center font-medium rounded-full ${colorClass} ${sizeClass}`}>
      {getDisplayLabel()}
    </span>
  );
};

export default StatusBadge;
```

src\components\UnderConstruction.tsx
```tsx
import React from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { ExclamationTriangleIcon } from '@heroicons/react/24/outline';

export default function UnderConstruction() {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const featureName = searchParams.get('feature') || 'This feature';

  return (
    <div className="min-h-screen bg-gray-50 px-4 py-16 sm:px-6 sm:py-24 md:grid md:place-items-center lg:px-8">
      <div className="mx-auto max-w-max">
        <main className="sm:flex">
          <div className="text-center sm:text-left">
            <div className="flex justify-center sm:justify-start">
              <ExclamationTriangleIcon className="h-12 w-12 text-yellow-400" aria-hidden="true" />
            </div>
            <h1 className="mt-4 text-4xl font-bold tracking-tight text-gray-900 sm:text-5xl">
              Under Construction
            </h1>
            <p className="mt-4 text-base text-gray-500">
              {featureName} is currently under development and will be available soon.
            </p>
            <div className="mt-10 flex flex-col space-y-3 sm:flex-row sm:space-x-3 sm:space-y-0">
              <button
                type="button"
                onClick={() => navigate('/')}
                className="inline-flex items-center rounded-md bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
              >
                Go back home
              </button>
              <button
                type="button"
                onClick={() => navigate('/payments')}
                className="inline-flex items-center rounded-md bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
              >
                Go to 401k Payments
              </button>
            </div>
          </div>
        </main>
      </div>
    </div>
  );
}
```

src\hooks\useClientData.js
```js
import { useQuery } from '@tanstack/react-query';
import api from '../services/api';
import { queryKeys } from '../store/queries';
/**
 * Hook to fetch all clients
 * @param {string} provider - Optional provider filter
 * @returns {Object} - Query result with clients data
 */
export const useClientList = (provider = null) => {
  return useQuery({
    queryKey: queryKeys.clients.all,
    queryFn: () => api.clients.list(provider),
    staleTime: 1000 * 60 * 5,
  });
};
/**
 * Hook to fetch a single client by ID
 * @param {number} clientId - Client ID
 * @returns {Object} - Query result with client data
 */
export const useClient = (clientId) => {
  return useQuery({
    queryKey: queryKeys.clients.detail(clientId),
    queryFn: () => api.clients.get(clientId),
    enabled: !!clientId,
    staleTime: 1000 * 60,
  });
};
/**
 * Hook to fetch client contract
 * @param {number} clientId - Client ID
 * @returns {Object} - Query result with contract data
 */
export const useClientContract = (clientId) => {
  return useQuery({
    queryKey: queryKeys.clients.contract(clientId),
    queryFn: () => api.contracts.getByClient(clientId),
    enabled: !!clientId,
    staleTime: 1000 * 60 * 10,
  });
};
/**
 * Hook to fetch client dashboard data (replaces multiple API calls)
 * @param {number} clientId - Client ID
 * @returns {Object} - Query result with complete dashboard data
 */
export const useClientDashboard = (clientId) => {
  return useQuery({
    queryKey: queryKeys.clients.dashboard(clientId),
    queryFn: () => api.dashboard.get(clientId),
    enabled: !!clientId,
    staleTime: 1000 * 60,
  });
};
```

src\hooks\useFileData.js
```js
import { useQuery } from '@tanstack/react-query';
import api from '../services/api';
import { queryKeys } from '../store/queries';
/**
 * Hook to check if a payment has associated files
 * @param {number} paymentId - Payment ID
 * @param {Object} options - Additional query options
 * @returns {Object} - Query result for payment files
 */
export const usePaymentFiles = (paymentId, options = {}) => {
  const { enabled = true } = options;
  return useQuery({
    queryKey: queryKeys.payments.files(paymentId),
    queryFn: () => Promise.resolve([]), // TODO: Implement api.payments.files when backend ready
    enabled: !!paymentId && enabled,
    staleTime: 1000 * 60 * 5,
    gcTime: 1000 * 60 * 10, // v5 uses gcTime instead of cacheTime
    retry: 1,
  });
};
/**
 * Hook to check if a client has any associated files
 * @param {number} clientId - Client ID
 * @param {Object} options - Additional query options
 * @returns {Object} - Query result for client files check
 */
export const useClientFiles = (clientId, options = {}) => {
  const { enabled = true } = options;
  return useQuery({
    queryKey: queryKeys.clients.files(clientId),
    queryFn: () => Promise.resolve({ has_files: false }), // TODO: Implement api.clients.files when backend ready
    enabled: !!clientId && enabled,
    staleTime: 1000 * 60 * 5,
    gcTime: 1000 * 60 * 10, // v5 uses gcTime instead of cacheTime
    retry: 1,
  });
};
/**
 * Cache for payment file status to reduce API calls
 */
const paymentFileCache = new Map();
/**
 * Set file status for a payment in the cache
 * @param {number} paymentId - Payment ID
 * @param {boolean} hasFiles - Whether the payment has files
 */
export const setPaymentFileStatus = (paymentId, hasFiles) => {
  paymentFileCache.set(paymentId, !!hasFiles);
};
/**
 * Get file status for a payment from the cache
 * @param {number} paymentId - Payment ID
 * @returns {boolean|undefined} - True if has files, false if not, undefined if not in cache
 */
export const getPaymentFileStatus = (paymentId) => {
  return paymentFileCache.has(paymentId) 
    ? paymentFileCache.get(paymentId) 
    : undefined;
};
/**
 * Clear file status cache
 */
export const clearFileCache = () => {
  paymentFileCache.clear();
};
/**
 * Check if a payment has files with cache support
 * @param {number} paymentId - Payment ID
 * @returns {Promise<boolean>} - Promise resolving to true if payment has files
 */
export const checkPaymentHasFiles = async (paymentId) => {
  if (paymentFileCache.has(paymentId)) {
    return paymentFileCache.get(paymentId);
  }
  try {
    // TODO: Implement api.payments.checkFiles when backend ready
    const hasFiles = false; // Placeholder
    setPaymentFileStatus(paymentId, hasFiles);
    return hasFiles;
  } catch (error) {
    return false;
  }
};
```

src\hooks\usePaymentData.js
```js
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import api from '../services/api';
import { queryKeys } from '../store/queries';
import { clearFileCache } from './useFileData';
/**
 * Hook to fetch payment history for a client
 * @param {number} clientId - Client ID
 * @param {Object} options - Query options including pagination and filters
 * @returns {Object} - Query result with payments data
 */
export const usePaymentHistory = (clientId, options = {}) => {
  const { page = 1, limit = 10, year = null } = options;
  const params = { page, limit };
  if (year !== null) {
    params.year = year;
  }
  return useQuery({
    queryKey: [...queryKeys.clients.payments(clientId), page, limit, year],
    queryFn: () => api.payments.list(clientId, year),
    enabled: !!clientId,
    staleTime: 1000 * 60,
  });
};
/**
 * Hook to fetch a single payment
 * @param {number} paymentId - Payment ID
 * @returns {Object} - Query result with payment data
 */
export const usePayment = (paymentId) => {
  return useQuery({
    queryKey: queryKeys.payments.detail(paymentId),
    queryFn: () => api.payments.get(paymentId),
    enabled: !!paymentId,
    staleTime: 1000 * 60,
  });
};
/**
 * Hook to fetch available periods for a contract
 * @param {number} contractId - Contract ID
 * @param {number} clientId - Client ID
 * @returns {Object} - Query result with periods data
 */
export const useAvailablePeriods = (contractId, clientId) => {
  return useQuery({
    queryKey: queryKeys.contracts.periods(contractId, clientId),
    queryFn: () => api.periods.available(clientId, contractId),
    enabled: !!contractId && !!clientId,
    staleTime: 1000 * 60 * 60,
  });
};
/**
 * Hook to create a new payment
 * @returns {Object} - Mutation object for creating payment
 */
export const useCreatePayment = () => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (paymentData) => api.payments.create(paymentData),
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: queryKeys.clients.payments(data.client_id) });
      queryClient.invalidateQueries({ queryKey: queryKeys.clients.summary(data.client_id) });
      queryClient.invalidateQueries({ queryKey: queryKeys.clients.detail(data.client_id) });
    }
  });
};
/**
 * Hook to update an existing payment
 * @returns {Object} - Mutation object for updating payment
 */
export const useUpdatePayment = () => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: ({ id, data }) => api.payments.update(id, data),
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: queryKeys.payments.detail(data.payment_id) });
      queryClient.invalidateQueries({ queryKey: queryKeys.clients.payments(data.client_id) });
      queryClient.invalidateQueries({ queryKey: queryKeys.clients.summary(data.client_id) });
      queryClient.invalidateQueries({ queryKey: queryKeys.clients.detail(data.client_id) });
      clearFileCache();
    }
  });
};
/**
 * Hook to delete a payment
 * @returns {Object} - Mutation object for deleting payment
 */
export const useDeletePayment = () => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: ({ id, clientId }) => api.payments.delete(id).then(() => ({ id, clientId })),
    onSuccess: ({ id, clientId }) => {
      queryClient.invalidateQueries({ queryKey: queryKeys.clients.payments(clientId) });
      queryClient.invalidateQueries({ queryKey: queryKeys.clients.summary(clientId) });
      queryClient.invalidateQueries({ queryKey: queryKeys.clients.detail(clientId) });
      clearFileCache();
    }
  });
};
```

src\services\__tests__\api.test.ts
```ts
import { api } from '../api';

// Mock fetch globally
global.fetch = jest.fn();

describe('API Service', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    (global.fetch as jest.Mock).mockClear();
  });

  const mockFetch = (response: any, status = 200) => {
    (global.fetch as jest.Mock).mockResolvedValueOnce({
      ok: status >= 200 && status < 300,
      status,
      statusText: status === 200 ? 'OK' : 'Error',
      json: async () => response,
    });
  };

  describe('Clients API', () => {
    const mockClient = {
      client_id: 1,
      display_name: 'Test Client',
      full_name: 'Test Client LLC',
      ima_signed_date: '2024-01-01',
      provider_name: 'John Hancock',
      valid_from: '2024-01-01T00:00:00',
      valid_to: null,
    };

    test('list clients', async () => {
      mockFetch([mockClient]);
      
      const result = await api.clients.list();
      
      expect(fetch).toHaveBeenCalledWith(
        'http://localhost:7071/api/clients',
        { headers: { 'Content-Type': 'application/json' } }
      );
      expect(result).toEqual([mockClient]);
    });

    test('list clients with provider filter', async () => {
      mockFetch([mockClient]);
      
      const result = await api.clients.list('John Hancock');
      
      expect(fetch).toHaveBeenCalledWith(
        'http://localhost:7071/api/clients?provider=John%20Hancock',
        { headers: { 'Content-Type': 'application/json' } }
      );
      expect(result).toEqual([mockClient]);
    });

    test('get single client', async () => {
      mockFetch(mockClient);
      
      const result = await api.clients.get(1);
      
      expect(fetch).toHaveBeenCalledWith(
        'http://localhost:7071/api/clients/1',
        { headers: { 'Content-Type': 'application/json' } }
      );
      expect(result).toEqual(mockClient);
    });

    test('create client', async () => {
      const newClient = { display_name: 'New Client', full_name: 'New Client LLC' };
      mockFetch({ ...newClient, client_id: 2 });
      
      const result = await api.clients.create(newClient);
      
      expect(fetch).toHaveBeenCalledWith(
        'http://localhost:7071/api/clients',
        {
          method: 'POST',
          body: JSON.stringify(newClient),
          headers: { 'Content-Type': 'application/json' },
        }
      );
      expect(result).toHaveProperty('client_id', 2);
    });

    test('update client', async () => {
      const updates = { display_name: 'Updated Client' };
      mockFetch({ message: 'Client updated successfully' });
      
      const result = await api.clients.update(1, updates);
      
      expect(fetch).toHaveBeenCalledWith(
        'http://localhost:7071/api/clients/1',
        {
          method: 'PUT',
          body: JSON.stringify(updates),
          headers: { 'Content-Type': 'application/json' },
        }
      );
      expect(result).toEqual({ message: 'Client updated successfully' });
    });

    test('delete client', async () => {
      mockFetch(null, 204);
      
      const result = await api.clients.delete(1);
      
      expect(fetch).toHaveBeenCalledWith(
        'http://localhost:7071/api/clients/1',
        {
          method: 'DELETE',
          headers: { 'Content-Type': 'application/json' },
        }
      );
      expect(result).toBeNull();
    });
  });

  describe('Contracts API', () => {
    const mockContract = {
      contract_id: 1,
      client_id: 1,
      provider_name: 'John Hancock',
      fee_type: 'percentage' as const,
      payment_schedule: 'quarterly' as const,
      percent_rate: 0.0025,
      valid_from: '2024-01-01T00:00:00',
      valid_to: null,
    };

    test('list contracts', async () => {
      mockFetch([mockContract]);
      
      const result = await api.contracts.list();
      
      expect(fetch).toHaveBeenCalledWith(
        'http://localhost:7071/api/contracts',
        { headers: { 'Content-Type': 'application/json' } }
      );
      expect(result).toEqual([mockContract]);
    });

    test('get contract by client', async () => {
      mockFetch(mockContract);
      
      const result = await api.contracts.getByClient(1);
      
      expect(fetch).toHaveBeenCalledWith(
        'http://localhost:7071/api/contracts/client/1',
        { headers: { 'Content-Type': 'application/json' } }
      );
      expect(result).toEqual(mockContract);
    });

    test('create contract', async () => {
      const newContract = {
        client_id: 1,
        provider_name: 'Voya',
        fee_type: 'flat' as const,
        payment_schedule: 'monthly' as const,
        flat_rate: 1000,
      };
      mockFetch({ ...newContract, contract_id: 2 });
      
      const result = await api.contracts.create(newContract);
      
      expect(fetch).toHaveBeenCalledWith(
        'http://localhost:7071/api/contracts',
        {
          method: 'POST',
          body: JSON.stringify(newContract),
          headers: { 'Content-Type': 'application/json' },
        }
      );
      expect(result).toHaveProperty('contract_id', 2);
    });
  });

  describe('Payments API', () => {
    const mockPayment = {
      payment_id: 1,
      contract_id: 1,
      client_id: 1,
      received_date: '2024-03-15',
      total_assets: 1000000,
      actual_fee: 2500,
      expected_fee: 2500,
      applied_period_type: 'quarterly' as const,
      applied_period: 1,
      applied_year: 2024,
      client_name: 'Test Client',
      provider_name: 'John Hancock',
    };

    test('list payments with pagination', async () => {
      mockFetch([mockPayment]);
      
      const result = await api.payments.list(1, 2024, 2, 25);
      
      expect(fetch).toHaveBeenCalledWith(
        'http://localhost:7071/api/payments?client_id=1&page=2&limit=25&year=2024',
        { headers: { 'Content-Type': 'application/json' } }
      );
      expect(result).toEqual([mockPayment]);
    });

    test('create payment', async () => {
      const newPayment = {
        contract_id: 1,
        client_id: 1,
        received_date: '2024-06-15',
        total_assets: 1100000,
        actual_fee: 2750,
        applied_period_type: 'quarterly' as const,
        applied_period: 2,
        applied_year: 2024,
      };
      mockFetch({ ...newPayment, payment_id: 2 });
      
      const result = await api.payments.create(newPayment);
      
      expect(fetch).toHaveBeenCalledWith(
        'http://localhost:7071/api/payments',
        {
          method: 'POST',
          body: JSON.stringify(newPayment),
          headers: { 'Content-Type': 'application/json' },
        }
      );
      expect(result).toHaveProperty('payment_id', 2);
    });
  });

  describe('Dashboard API', () => {
    const mockDashboard = {
      client: {
        client_id: 1,
        display_name: 'Test Client',
        full_name: 'Test Client LLC',
      },
      contract: {
        contract_id: 1,
        provider_name: 'John Hancock',
        fee_type: 'percentage',
        percent_rate: 0.0025,
        payment_schedule: 'quarterly',
      },
      payment_status: {
        status: 'Paid' as const,
        current_period: 'Q2',
        current_period_number: 2,
        current_year: 2024,
        last_payment_date: '2024-03-15',
        last_payment_amount: 2500,
      },
      compliance: {
        status: 'compliant' as const,
        color: 'green' as const,
        reason: 'All payments up to date',
      },
      recent_payments: [],
      metrics: {
        total_ytd_payments: 5000,
        avg_quarterly_payment: 2500,
        last_recorded_assets: 1000000,
      },
    };

    test('get dashboard data', async () => {
      mockFetch(mockDashboard);
      
      const result = await api.dashboard.get(1);
      
      expect(fetch).toHaveBeenCalledWith(
        'http://localhost:7071/api/dashboard/1',
        { headers: { 'Content-Type': 'application/json' } }
      );
      expect(result).toEqual(mockDashboard);
    });
  });

  describe('Periods API', () => {
    const mockPeriods = {
      periods: [
        { value: '2024-1', label: 'Q1 2024', type: 'quarterly' as const },
        { value: '2024-2', label: 'Q2 2024', type: 'quarterly' as const },
      ],
      payment_schedule: 'quarterly',
    };

    test('get available periods', async () => {
      mockFetch(mockPeriods);
      
      const result = await api.periods.getAvailable(1, 1);
      
      expect(fetch).toHaveBeenCalledWith(
        'http://localhost:7071/api/periods?client_id=1&contract_id=1',
        { headers: { 'Content-Type': 'application/json' } }
      );
      expect(result).toEqual(mockPeriods);
    });
  });

  describe('Calculations API', () => {
    const mockVariance = {
      status: 'acceptable',
      message: 'Within 5% variance',
      difference: 50,
      percent_difference: 2,
    };

    test('calculate variance', async () => {
      mockFetch(mockVariance);
      
      const result = await api.calculations.variance(2550, 2500);
      
      expect(fetch).toHaveBeenCalledWith(
        'http://localhost:7071/api/calculations/variance?actual_fee=2550&expected_fee=2500',
        { headers: { 'Content-Type': 'application/json' } }
      );
      expect(result).toEqual(mockVariance);
    });
  });

  describe('Error Handling', () => {
    test('handles API error with error message', async () => {
      (global.fetch as jest.Mock).mockResolvedValueOnce({
        ok: false,
        status: 400,
        statusText: 'Bad Request',
        json: async () => ({ error: 'Invalid client ID' }),
      });

      await expect(api.clients.get(999)).rejects.toThrow('Invalid client ID');
    });

    test('handles API error without error message', async () => {
      (global.fetch as jest.Mock).mockResolvedValueOnce({
        ok: false,
        status: 500,
        statusText: 'Internal Server Error',
        json: async () => { throw new Error(); },
      });

      await expect(api.clients.get(1)).rejects.toThrow('API error: Internal Server Error');
    });

    test('handles network error', async () => {
      (global.fetch as jest.Mock).mockRejectedValueOnce(new Error('Network failed'));

      await expect(api.clients.get(1)).rejects.toThrow('Network error: Unable to connect to API');
    });

    test('handles 204 No Content response', async () => {
      mockFetch(null, 204);
      
      const result = await api.clients.delete(1);
      
      expect(result).toBeNull();
    });
  });

  describe('Environment Variable', () => {
    const originalEnv = process.env;

    beforeEach(() => {
      jest.resetModules();
      process.env = { ...originalEnv };
    });

    afterAll(() => {
      process.env = originalEnv;
    });

    test('uses custom API URL from environment', async () => {
      process.env.REACT_APP_API_URL = 'https://custom-api.com';
      
      // Re-import to get the new environment variable
      jest.isolateModules(() => {
        const { api: customApi } = require('../api');
        mockFetch([]);
        
        customApi.clients.list();
        
        expect(fetch).toHaveBeenCalledWith(
          'https://custom-api.com/clients',
          expect.any(Object)
        );
      });
    });
  });
});
```

src\services\api.ts
```ts
//src/api.ts
import { 
  Client, 
  Contract, 
  Payment, 
  DashboardData, 
  AvailablePeriod,
  CreatePaymentRequest,
  UpdatePaymentRequest,
  ApiError
} from '../utils/types';

const API_BASE = 'http://localhost:7071';

  class ApiService {
    private async request<T>(
      endpoint: string,
      options: RequestInit = {}
    ): Promise<T> {
      // Always prepend /api to every endpoint
      const url = `${API_BASE}/api${endpoint}`;
      const config: RequestInit = {
        ...options,
        headers: {
          'Content-Type': 'application/json',
          ...options.headers,
        },
      };

      try {
        const response = await fetch(url, config);

        if (!response.ok) {
          let errorMessage = `API request failed: ${response.statusText}`;
          try {
            const errorData = await response.json();
            errorMessage = errorData.error || errorMessage;
          } catch {
            // If response isn't JSON, use default message
          }

          const error = new ApiError(errorMessage, response.status, response.statusText);
          throw error;
        }

        // Handle 204 No Content
        if (response.status === 204) {
          return null as T;
        }

        return response.json();
      } catch (error: any) {
        if (error instanceof ApiError) {
          throw error;
        }
        // Network error
        throw new ApiError('Network error: Unable to connect to API', 0, error.message);
      }
    }
  

  clients = {
    list: (provider?: string): Promise<Client[]> => {
      const params = provider ? `?provider=${encodeURIComponent(provider)}` : '';
      return this.request<Client[]>(`/clients${params}`);
    },

    get: (id: number): Promise<Client> => {
      return this.request<Client>(`/clients/${id}`);
    },

    search: (query: string): Promise<Client[]> => {
      return this.request<Client[]>(`/clients/search?q=${encodeURIComponent(query)}`);
    },

    create: (client: any): Promise<Client> => {
      return this.request<Client>('/clients', {
        method: 'POST',
        body: JSON.stringify(client),
      });
    },

    update: (id: number, updates: any): Promise<any> => {
      return this.request<any>(`/clients/${id}`, {
        method: 'PUT',
        body: JSON.stringify(updates),
      });
    },

    delete: (id: number): Promise<void> => {
      return this.request<void>(`/clients/${id}`, {
        method: 'DELETE',
      });
    },
  };

  contracts = {
    list: (clientId?: number): Promise<Contract[]> => {
      const params = clientId ? `?client_id=${clientId}` : '';
      return this.request<Contract[]>(`/contracts${params}`);
    },

    get: (id: number): Promise<Contract> => {
      return this.request<Contract>(`/contracts/${id}`);
    },

    getByClient: (clientId: number): Promise<Contract> => {
      return this.request<Contract>(`/contracts/client/${clientId}`);
    },

    create: (contract: any): Promise<Contract> => {
      return this.request<Contract>('/contracts', {
        method: 'POST',
        body: JSON.stringify(contract),
      });
    },
  };

  payments = {
    list: (clientId?: number, year?: number, page: number = 1, limit: number = 10): Promise<Payment[]> => {
      const params = new URLSearchParams();
      if (clientId) params.append('client_id', clientId.toString());
      if (year) params.append('year', year.toString());
      params.append('page', page.toString());
      params.append('limit', limit.toString());
      const queryString = params.toString() ? `?${params.toString()}` : '';
      return this.request<Payment[]>(`/payments${queryString}`);
    },

    get: (id: number): Promise<Payment> => {
      return this.request<Payment>(`/payments/${id}`);
    },

    create: (payment: CreatePaymentRequest): Promise<Payment> => {
      return this.request<Payment>('/payments', {
        method: 'POST',
        body: JSON.stringify(payment),
      });
    },

    update: (id: number, payment: UpdatePaymentRequest): Promise<Payment> => {
      return this.request<Payment>(`/payments/${id}`, {
        method: 'PUT',
        body: JSON.stringify(payment),
      });
    },

    delete: (id: number): Promise<void> => {
      return this.request<void>(`/payments/${id}`, {
        method: 'DELETE',
      });
    },
  };

  dashboard = {
    get: (clientId: number): Promise<DashboardData> => {
      return this.request<DashboardData>(`/dashboard/${clientId}`);
    },
  };

  periods = {
    available: (clientId: number, contractId: number): Promise<{periods: AvailablePeriod[], payment_schedule: string}> => {
      return this.request<{periods: AvailablePeriod[], payment_schedule: string}>(
        `/periods?client_id=${clientId}&contract_id=${contractId}`
      );
    },
  };

  calculations = {
    variance: (actual: number, expected: number): Promise<any> => {
      return this.request<any>(
        `/calculations/variance?actual_fee=${actual}&expected_fee=${expected}`
      );
    },
  };
}

export const api = new ApiService();
export default api;
```

src\store\index.js
```js
import { create } from 'zustand';
/**
 * Central application state store using Zustand
 */
const useStore = create((set) => ({
  selectedClientId: null,
  setSelectedClientId: (clientId) => set({ selectedClientId: clientId }),
  documentViewerOpen: false,
  setDocumentViewerOpen: (isOpen) => set({ documentViewerOpen: isOpen }),
  selectedDocumentUrl: null,
  setSelectedDocumentUrl: (url) => set({ selectedDocumentUrl: url }),
  isMobileMenuOpen: false,
  setMobileMenuOpen: (isOpen) => set({ isMobileMenuOpen: isOpen }),
  modalOpen: false,
  modalContent: null,
  openModal: (content) => set({ modalOpen: true, modalContent: content }),
  closeModal: () => set({ modalOpen: false, modalContent: null }),
}));
export default useStore;
```

src\store\queries.js
```js
import { QueryClient } from '@tanstack/react-query';
/**
 * Configured QueryClient for application-wide use
 */
export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      refetchOnWindowFocus: false,
      staleTime: 1000 * 60 * 5,
      retry: (failureCount, error) => {
        if (error?.message?.includes('API error') && error.message.includes('4')) {
          return false;
        }
        return failureCount < 2;
      },
      retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000),
      onError: (error) => {
        console.error('Query error:', error);
      }
    },
    mutations: {
      retry: (failureCount, error) => {
        if (error?.message?.includes('API error') && error.message.includes('4')) {
          return false;
        }
        return failureCount < 1;
      },
      retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 10000)
    }
  },
});
/**
 * Centralized query keys for better cache management
 */
export const queryKeys = {
  clients: {
    all: ['clients'],
    detail: (id) => ['clients', id],
    contract: (id) => ['clients', id, 'contract'],
    payments: (id) => ['clients', id, 'payments'],
    summary: (id) => ['clients', id, 'summary'],
    files: (id) => ['clients', id, 'files'],
    dashboard: (id) => ['clients', id, 'dashboard'],
  },
  payments: {
    all: ['payments'],
    detail: (id) => ['payments', id],
    files: (id) => ['payments', id, 'files'],
  },
  contracts: {
    all: ['contracts'],
    detail: (id) => ['contracts', id],
    periods: (id, clientId) => ['contracts', id, 'periods', clientId],
  },
};
```

src\styles\globals.css
```css
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Import Inter font - a modern, clean sans-serif font perfect for financial applications */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

:root {
  /* Typography */
  --font-primary: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
  
  /* Font sizes */
  --text-xs: 0.75rem;   /* 12px */
  --text-sm: 0.875rem;  /* 14px */
  --text-base: 1rem;    /* 16px */
  --text-lg: 1.125rem;  /* 18px */
  --text-xl: 1.25rem;   /* 20px */
  --text-2xl: 1.5rem;   /* 24px */
  --text-3xl: 1.875rem; /* 30px */

  /* Line heights */
  --leading-none: 1;
  --leading-tight: 1.25;
  --leading-snug: 1.375;
  --leading-normal: 1.5;
  --leading-relaxed: 1.625;
  
  /* Letter spacing */
  --tracking-tight: -0.025em;
  --tracking-normal: 0;
  --tracking-wide: 0.025em;
  --tracking-wider: 0.05em;
}

html,
body {
  padding: 0;
  margin: 0;
  font-family: var(--font-primary);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-size: var(--text-base);
  line-height: var(--leading-normal);
  color: theme('colors.dark.500');
  background-color: theme('colors.light.bg');
}

* {
  box-sizing: border-box;
}

/* Typography Overrides */
h1, h2, h3, h4, h5, h6 {
  font-weight: 600;
  line-height: var(--leading-tight);
  margin-top: 0;
  color: theme('colors.dark.700');
}

h1 {
  font-size: var(--text-2xl);
  font-weight: 700;
}

h2 {
  font-size: var(--text-xl);
  font-weight: 600;
}

h3 {
  font-size: var(--text-lg);
  font-weight: 600;
}

p {
  margin-top: 0;
  margin-bottom: 1rem;
}

/* Table Typography & Styling */
table {
  font-size: var(--text-sm);
  border-collapse: separate;
  border-spacing: 0;
  width: 100%;
  overflow: hidden;
  border-radius: 0.5rem;
  box-shadow: theme('boxShadow.DEFAULT');
  background-color: theme('colors.light.100');
}

thead {
  background-color: theme('colors.light.300');
}

th {
  font-size: var(--text-xs);
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: var(--tracking-wider);
  color: theme('colors.dark.500');
  padding: 1rem;
  text-align: left;
  border-bottom: 1px solid theme('colors.light.400');
}

td {
  font-size: var(--text-sm);
  line-height: var(--leading-snug);
  padding: 1rem;
  border-bottom: 1px solid theme('colors.light.300');
  transition: background-color 0.2s ease;
}

tr:hover td {
  background-color: theme('colors.primary.50');
}

tr:last-child td {
  border-bottom: none;
}

/* Form Typography */
label {
  font-size: var(--text-sm);
  font-weight: 500;
  color: theme('colors.dark.500');
  margin-bottom: 0.25rem;
  display: block;
}

input, select, textarea {
  font-family: var(--font-primary);
  font-size: var(--text-sm);
  padding: 0.625rem 0.75rem;
  border: 1px solid theme('colors.light.500');
  border-radius: 0.375rem;
  background-color: theme('colors.light.100');
  transition: all 0.2s ease;
  width: 100%;
}

input:focus, select:focus, textarea:focus {
  outline: none;
  border-color: theme('colors.primary.500');
  box-shadow: 0 0 0 3px rgba(124, 58, 237, 0.15);
}

button {
  font-family: var(--font-primary);
  font-weight: 500;
  font-size: var(--text-sm);
}

/* Links */
a {
  color: theme('colors.primary.600');
  text-decoration: none;
  transition: color 0.2s ease-in-out;
}

a:hover {
  color: theme('colors.primary.700');
}

/* Utility Classes */
.text-xs {
  font-size: var(--text-xs);
  line-height: var(--leading-normal);
}

.text-sm {
  font-size: var(--text-sm);
  line-height: var(--leading-normal);
}

.text-base {
  font-size: var(--text-base);
  line-height: var(--leading-normal);
}

.text-lg {
  font-size: var(--text-lg);
  line-height: var(--leading-normal);
}

.text-xl {
  font-size: var(--text-xl);
  line-height: var(--leading-tight);
}

.text-2xl {
  font-size: var(--text-2xl);
  line-height: var(--leading-tight);
}

.font-light {
  font-weight: 300;
}

.font-normal {
  font-weight: 400;
}

.font-medium {
  font-weight: 500;
}

.font-semibold {
  font-weight: 600;
}

.font-bold {
  font-weight: 700;
}

/* ========== COMPONENT STYLES ========== */

/* Card Styling */
.card {
  border-radius: 0.5rem;
  background-color: theme('colors.light.card');
  box-shadow: theme('boxShadow.card');
  transition: box-shadow 0.3s ease, transform 0.3s ease;
  overflow: hidden;
}

.card:hover {
  box-shadow: theme('boxShadow.hover');
}

/* Form Styling */
.form-container {
  background-color: theme('colors.light.card');
  border-radius: 0.5rem;
  box-shadow: theme('boxShadow.form');
  border-left: 3px solid theme('colors.primary.600');
}

/* Dark UI Elements */
.navbar-dark {
  background-color: theme('colors.dark.bg');
  color: theme('colors.light.300');
}

.sidebar-dark {
  background-color: theme('colors.dark.card');
  color: theme('colors.light.300');
}

/* Animation classes */
.animate-fade-in {
  animation: fadeIn 0.3s ease-in-out;
}

.animate-slide-up {
  animation: slideUp 0.3s ease-out;
}

@keyframes fadeIn {
  0% { opacity: 0; }
  100% { opacity: 1; }
}

@keyframes slideUp {
  0% { transform: translateY(10px); opacity: 0; }
  100% { transform: translateY(0); opacity: 1; }
}

/* Custom scrollbar styling */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: theme('colors.light.300');
  border-radius: 4px;
}

::-webkit-scrollbar-thumb {
  background: theme('colors.light.500');
  border-radius: 4px;
  transition: background 0.2s ease;
}

::-webkit-scrollbar-thumb:hover {
  background: theme('colors.dark.400');
}
```

src\styles\index.css
```css
/* Form focus effect */
.form-focus {
  position: relative;
  z-index: 50;
}

.form-focus::before {
  content: '';
  position: fixed;
  inset: 0;
  background-color: rgba(0, 0, 0, 0.3);
  backdrop-filter: blur(2px);
  z-index: 40;
  animation: fadeIn 0.2s ease-out;
}

.form-focus > * {
  position: relative;
  z-index: 50;
  transform: translateY(0);
  transition: transform 0.2s ease-out;
  animation: cardRaise 0.3s cubic-bezier(0.19, 1, 0.22, 1);
  box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes cardRaise {
  from { transform: translateY(10px); }
  to { transform: translateY(0); }
}

/* Comprehensive vertical spacing reduction */
/* Global container spacing */
.card-container > * {
  margin-bottom: 0.75rem !important; /* Reduced from default 1rem */
}

.card-container > *:last-child {
  margin-bottom: 0 !important;
}

/* Card internal spacing */
.card {
  padding: 0.875rem !important;
}

/* Form spacing */
.space-y-5 > * {
  margin-top: 1rem !important;
  margin-bottom: 0 !important;
}

.space-y-5 > *:first-child {
  margin-top: 0 !important;
}

/* Header spacing */
h1, h2, h3, h4, h5, h6 {
  margin-bottom: 0.5rem !important;
}

/* Padding classes */
.py-3 {
  padding-top: 0.625rem !important;
  padding-bottom: 0.625rem !important;
}

.py-4 {
  padding-top: 0.875rem !important;
  padding-bottom: 0.875rem !important;
}

.py-5 {
  padding-top: 1.125rem !important;
  padding-bottom: 1.125rem !important;
}

.p-5 {
  padding: 1.125rem !important;
}

.p-4 {
  padding: 0.875rem !important;
}

/* Margin classes */
.mt-6 {
  margin-top: 1.25rem !important;
}

.mt-5 {
  margin-top: 1.125rem !important;
}

.mt-4 {
  margin-top: 0.875rem !important;
}

.mb-4 {
  margin-bottom: 0.875rem !important;
}

.mb-6 {
  margin-bottom: 1.25rem !important;
}

.my-4 {
  margin-top: 0.875rem !important;
  margin-bottom: 0.875rem !important;
}
```

src\utils\constants.ts
```ts
/**
 * Application-wide constants
 */
export const MONTH_NAMES = [
  "January", "February", "March", "April", "May", "June",
  "July", "August", "September", "October", "November", "December"
];
export const PAYMENT_METHODS = [
  { label: 'Auto - ACH', value: 'Auto - ACH' },
  { label: 'Auto - Check', value: 'Auto - Check' },
  { label: 'Invoice - Check', value: 'Invoice - Check' },
  { label: 'Wire Transfer', value: 'Wire Transfer' },
  { label: 'Check', value: 'Check' },
];
export const STATUS_COLORS = {
  green: 'bg-green-100 text-green-800',
  yellow: 'bg-yellow-100 text-yellow-800',
  exact: 'bg-blue-100 text-blue-800',
  acceptable: 'bg-green-100 text-green-800',
  warning: 'bg-yellow-100 text-yellow-800',
  unknown: 'bg-gray-100 text-gray-800',
  gray: 'bg-gray-100 text-gray-800',
};
export const FEE_TYPES = {
  FLAT: 'flat',
  PERCENTAGE: 'percentage',
  PERCENT: 'percent'
};
export const PAYMENT_SCHEDULES = {
  MONTHLY: 'monthly',
  QUARTERLY: 'quarterly'
};
export const PAYMENT_STATUS = {
  PAID: 'Paid',
  DUE: 'Due'
};
```

src\utils\dateUtils.ts
```ts
import { format, parseISO } from 'date-fns';
import { MONTH_NAMES } from './constants';
/**
 * Format a date string or Date object to a human-readable format
 * @param {string|Date} dateInput - ISO date string or Date object
 * @param {string} formatStr - Optional format string
 * @returns {string} - Formatted date string
 */
export const formatDate = (dateInput, formatStr = 'MMM d, yyyy') => {
  if (!dateInput) return 'N/A';
  try {
    const date = dateInput instanceof Date ? dateInput : parseISO(dateInput);
    return format(date, formatStr);
  } catch (error) {
    return 'Invalid Date';
  }
};
/**
 * Format applied period from payment data
 * @param {Object} payment - Payment object
 * @returns {string} - Formatted period string
 */
export const formatAppliedPeriod = (payment) => {
  if (!payment) return 'N/A';
  
  // New format: applied_period_type, applied_period, applied_year
  if (payment.applied_period_type && payment.applied_period && payment.applied_year) {
    if (payment.applied_period_type === 'quarterly') {
      return `Q${payment.applied_period} ${payment.applied_year}`;
    } else if (payment.applied_period_type === 'monthly') {
      const monthIndex = payment.applied_period - 1;
      if (monthIndex >= 0 && monthIndex < 12) {
        return `${MONTH_NAMES[monthIndex]} ${payment.applied_year}`;
      }
    }
  }
  
  // Legacy format fallback
  if (payment.applied_start_quarter) {
    return `Q${payment.applied_start_quarter} ${payment.applied_start_quarter_year}`;
  }
  if (payment.applied_start_month) {
    const monthIndex = payment.applied_start_month - 1; 
    if (monthIndex >= 0 && monthIndex < 12) {
      return `${MONTH_NAMES[monthIndex]} ${payment.applied_start_month_year}`;
    }
  }
  return 'N/A';
};
/**
 * Format period range for split payments
 * @param {Object} payment - Payment object
 * @returns {string} - Formatted period range
 */
export const formatPeriodRange = (payment) => {
  if (!payment || !payment.is_split_payment) return formatAppliedPeriod(payment);
  let startPeriod, endPeriod;
  if (payment.applied_start_quarter) {
    startPeriod = `Q${payment.applied_start_quarter} ${payment.applied_start_quarter_year}`;
    endPeriod = `Q${payment.applied_end_quarter} ${payment.applied_end_quarter_year}`;
  } else if (payment.applied_start_month) {
    const startMonthIndex = payment.applied_start_month - 1;
    const endMonthIndex = payment.applied_end_month - 1;
    if (startMonthIndex >= 0 && startMonthIndex < 12 &&
      endMonthIndex >= 0 && endMonthIndex < 12) {
      startPeriod = `${MONTH_NAMES[startMonthIndex]} ${payment.applied_start_month_year}`;
      endPeriod = `${MONTH_NAMES[endMonthIndex]} ${payment.applied_end_month_year}`;
    } else {
      return 'Invalid Period';
    }
  } else {
    return 'N/A';
  }
  return `${startPeriod} - ${endPeriod}`;
};
```

src\utils\formatters.ts
```ts
/**
 * Formatting utilities for the frontend.
 * This file contains only presentation/formatting functions, no business logic.
 */
import { FEE_TYPES } from './constants';
/**
 * Format a number as currency
 * @param {number} value - Number to format
 * @returns {string} - Formatted currency string
 */
export const formatCurrency = (value) => {
  if (value === null || value === undefined) return 'N/A';
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  }).format(value);
};
/**
 * Format a number as percentage
 * @param {number} value - Number to format (as a decimal, e.g. 0.42 for 42%)
 * @returns {string} - Formatted percentage string
 */
export const formatPercentage = (value) => {
  if (value === null || value === undefined) return 'N/A';
  return new Intl.NumberFormat('en-US', {
    style: 'percent',
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  }).format(value);
};
/**
 * Generate fee references for different payment frequencies
 * NOTE: This is display logic for fee reference tables.
 * TODO: Consider moving to backend API for Sprint 4+
 * 
 * @param {Object} contract - Contract object
 * @param {number} baseAssets - Base asset amount for percentage calculations (optional)
 * @returns {Object|null} - Object with monthly, quarterly, and annual rates
 */
export const generateFeeReferences = (contract, baseAssets = null) => {
  if (!contract) return null;
  let monthlyRate, quarterlyRate, annualRate;
  if (contract.fee_type === FEE_TYPES.FLAT) {
    if (contract.payment_schedule === 'monthly') {
      monthlyRate = contract.flat_rate;
      quarterlyRate = monthlyRate * 3;
      annualRate = monthlyRate * 12;
    } else {
      quarterlyRate = contract.flat_rate;
      monthlyRate = quarterlyRate / 3;
      annualRate = quarterlyRate * 4;
    }
    return {
      monthly: formatCurrency(monthlyRate),
      quarterly: formatCurrency(quarterlyRate),
      annual: formatCurrency(annualRate)
    };
  } else if (contract.percent_rate) {
    const percentRate = contract.percent_rate;
    if (baseAssets) {
      if (contract.payment_schedule === 'monthly') {
        monthlyRate = baseAssets * percentRate;
        quarterlyRate = monthlyRate * 3;
        annualRate = monthlyRate * 12;
      } else {
        quarterlyRate = baseAssets * percentRate;
        monthlyRate = quarterlyRate / 3;
        annualRate = quarterlyRate * 4;
      }
      return {
        monthly: formatCurrency(monthlyRate),
        quarterly: formatCurrency(quarterlyRate),
        annual: formatCurrency(annualRate)
      };
    } else {
      if (contract.payment_schedule === 'monthly') {
        monthlyRate = percentRate * 100;
        quarterlyRate = monthlyRate * 3;
        annualRate = monthlyRate * 12;
      } else {
        quarterlyRate = percentRate * 100;
        monthlyRate = quarterlyRate / 3;
        annualRate = quarterlyRate * 4;
      }
      return {
        monthly: `${monthlyRate.toFixed(3)}%`,
        quarterly: `${quarterlyRate.toFixed(3)}%`,
        annual: `${annualRate.toFixed(3)}%`
      };
    }
  }
  return null;
};
```

src\utils\types.ts
```ts
// API Types matching backend models

export interface Client {
  client_id: number;
  display_name: string;
  full_name: string;
  ima_signed_date: string | null;
  provider_name: string;
  provider_id: string | null;
  valid_from: string;
  valid_to: string | null;
}

export interface Contract {
  contract_id: number;
  client_id: number;
  fee_type: 'percent' | 'flat';
  percent_rate: number | null;
  flat_rate: number | null;
  payment_schedule: 'monthly' | 'quarterly';
  contract_signed_date: string | null;
  valid_from: string;
  valid_to: string | null;
}

export interface Payment {
  payment_id: number;
  client_id: number;
  contract_id: number;
  payment_amount: number;
  payment_date: string;
  applied_period_type: 'monthly' | 'quarterly';
  applied_period: number;
  applied_year: number;
  created_by: string;
  created_date: string;
  modified_by: string | null;
  modified_date: string | null;
  valid_from: string;
  valid_to: string | null;
}

export interface DashboardData {
  client: Client;
  contracts: Contract[];
  payment_status: {
    current_period: number;
    current_year: number;
    period_type: 'monthly' | 'quarterly';
    expected_amount: number;
    is_paid: boolean;
    paid_amount: number | null;
    payment_id: number | null;
  };
  compliance: {
    status: 'exact' | 'acceptable' | 'warning' | 'alert';
    color: string;
    reason: string;
  };
  recent_payments: Payment[];
  metrics: {
    total_payments: number;
    total_paid: number;
    average_variance: number;
    on_time_rate: number;
    last_payment_date: string | null;
  };
}

export interface AvailablePeriod {
  period_type: 'monthly' | 'quarterly';
  period: number;
  year: number;
  label: string;
}

export interface CreatePaymentRequest {
  client_id: number;
  contract_id: number;
  payment_amount: number;
  payment_date: string;
  applied_period_type: 'monthly' | 'quarterly';
  applied_period: number;
  applied_year: number;
}

export interface UpdatePaymentRequest {
  payment_amount?: number;
  payment_date?: string;
  applied_period_type?: 'monthly' | 'quarterly';
  applied_period?: number;
  applied_year?: number;
}

export class ApiError extends Error {
  constructor(
    message: string,
    public status: number,
    public response?: string
  ) {
    super(message);
    this.name = 'ApiError';
  }
}
```

src\views\PaymentsPage.tsx
```tsx
import React, { useEffect, useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import PageLayout from '../components/layout/PageLayout';
import ClientDashboard from '../components/payment/ClientDashboard';
import PaymentForm from '../components/payment/PaymentForm';
import PaymentHistory from '../components/payment/PaymentHistory';
import ErrorDisplay from '../components/ui/ErrorDisplay';
import api from '../services/api';
import useStore from '../store';

const PaymentsPage = () => {
  const { selectedClientId, setSelectedClientId } = useStore();
  const [editingPayment, setEditingPayment] = useState(null);

  const { data: clients = [], isLoading, error } = useQuery({
    queryKey: ['clients'],
    queryFn: () => api.clients.list()
  });

  useEffect(() => {
    if (!selectedClientId && clients.length > 0) {
      setSelectedClientId(clients[0].client_id);
    }
  }, [clients, selectedClientId, setSelectedClientId]);

  if (!selectedClientId) {
    return (
      <PageLayout clients={clients} isLoading={isLoading}>
        <div className="bg-white p-6 rounded-lg shadow-sm text-center">
          Select a client from the sidebar
        </div>
      </PageLayout>
    );
  }

  return (
    <PageLayout clients={clients} isLoading={isLoading}>
      <div className="space-y-6">
        <ClientDashboard clientId={selectedClientId} />
        <PaymentForm 
          clientId={selectedClientId} 
          editingPayment={editingPayment}
          onEditingPaymentChange={setEditingPayment}
        />
        <PaymentHistory 
          clientId={selectedClientId}
          editingPayment={editingPayment}
          onEditingPaymentChange={setEditingPayment}
        />
      </div>
    </PageLayout>
  );
};

export default PaymentsPage;
```

src\views\tab.html
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HohimerPro - 401(k) Payment Tracking System</title>
    <link rel="stylesheet" href="/static/styles/main.css">
</head>
<body>
    <div id="root"></div>
    <script src="https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js"></script>
    <script type="module" src="/dist/scripts/app.js"></script>
</body>
</html>
```

staticwebapp.config.json
```json
{
  "routes": [
    {
      "route": "/*",
      "serve": "/index.html",
      "statusCode": 200
    }
  ],
  "navigationFallback": {
    "rewrite": "/index.html",
    "exclude": ["/assets/*", "/scripts/*", "/*.js", "/*.css", "/*.png", "/*.jpg", "/*.ico"]
  },
  "mimeTypes": {
    ".json": "application/json",
    ".js": "text/javascript",
    ".css": "text/css",
    ".html": "text/html",
    ".tsx": "text/javascript",
    ".ts": "text/javascript"
  },
  "responseOverrides": {
    "404": {
      "rewrite": "/index.html",
      "statusCode": 200
    }
  }
}
```

tailwind.config.js
```js
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
    "./index.html"
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#f5f3ff',
          100: '#ede9fe',
          200: '#ddd6fe',
          300: '#c4b5fd',
          400: '#a78bfa',
          500: '#8b5cf6',
          600: '#7c3aed',
          700: '#6d28d9',
          800: '#5b21b6',
          900: '#4c1d95',
          950: '#2e1065',
        },
        dark: {
          400: '#4b5563',
          500: '#374151',
          600: '#1f2937',
          700: '#111827',
          800: '#030712',
          bg: '#1a1a2e',
          card: '#16213e',
          accent: '#0f3460',
        },
        light: {
          100: '#ffffff',
          200: '#f9fafb',
          300: '#f3f4f6',
          400: '#e5e7eb',
          500: '#d1d5db',
          bg: '#f8f9fc',
          card: '#ffffff',
        },
        status: {
          success: '#10b981',
          warning: '#f59e0b',
          error: '#ef4444',
          info: '#3b82f6',
        },
        green: {
          100: '#d1fae5',
          500: '#10b981',
          800: '#065f46',
        },
        yellow: {
          100: '#fef3c7',
          500: '#f59e0b',
          800: '#92400e',
        },
        red: {
          100: '#fee2e2',
          500: '#ef4444',
          700: '#b91c1c',
          800: '#991b1b',
        },
        blue: {
          50: '#eff6ff',
          100: '#dbeafe',
          500: '#3b82f6',
          600: '#2563eb',
          800: '#1e40af',
        },
        amber: {
          500: '#f59e0b',
        },
        gray: {
          50: '#f9fafb',
          100: '#f3f4f6',
          200: '#e5e7eb',
          300: '#d1d5db',
          400: '#9ca3af',
          500: '#6b7280',
          600: '#4b5563',
          700: '#374151',
          800: '#1f2937',
        },
      },
      boxShadow: {
        'xs': '0 1px 2px rgba(0, 0, 0, 0.05)',
        'sm': '0 1px 2px rgba(0, 0, 0, 0.05)',
        'DEFAULT': '0 1px 3px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.06)',
        'md': '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
        'lg': '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
        'xl': '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',
        'inner': 'inset 0 2px 4px 0 rgba(0, 0, 0, 0.06)',
        'nav': '0 1px 3px rgba(0, 0, 0, 0.08)',
        'card': '0 2px 4px rgba(0, 0, 0, 0.02), 0 8px 16px rgba(0, 0, 0, 0.05)',
        'hover': '0 4px 8px rgba(0, 0, 0, 0.04), 0 12px 24px rgba(0, 0, 0, 0.08)',
        'form': '0 8px 30px rgba(0, 0, 0, 0.06)',
        'none': 'none',
      },
      fontFamily: {
        primary: ['Inter', '-apple-system', 'BlinkMacSystemFont', 'Segoe UI', 'Roboto', 'Helvetica Neue', 'Arial', 'sans-serif'],
      },
      fontSize: {
        'xs': '0.75rem',
        'sm': '0.875rem',
        'base': '1rem',
        'lg': '1.125rem',
        'xl': '1.25rem',
        '2xl': '1.5rem',
        '3xl': '1.875rem',
      },
      lineHeight: {
        'none': '1',
        'tight': '1.25',
        'snug': '1.375',
        'normal': '1.5',
        'relaxed': '1.625',
      },
      letterSpacing: {
        'tight': '-0.025em',
        'normal': '0',
        'wide': '0.025em',
        'wider': '0.05em',
      },
    },
  },
  plugins: [
    require('@tailwindcss/forms'),
  ],
}
```

teamsapp.local.yml
```yml
# yaml-language-server: $schema=https://aka.ms/teams-toolkit/v1.7/yaml.schema.json
# Visit https://aka.ms/teamsfx-v5.0-guide for details on this file
# Visit https://aka.ms/teamsfx-actions for details on actions
version: v1.7

provision:
  # Creates a Teams app
  - uses: teamsApp/create
    with:
      # Teams app name
      name: TEAMZ2${{APP_NAME_SUFFIX}}
    # Write the information of created resources into environment file for
    # the specified environment variable(s).
    writeToEnvironmentFile:
      teamsAppId: TEAMS_APP_ID

  # Set TAB_DOMAIN and TAB_ENDPOINT for local launch
  - uses: script
    with:
      run:
        echo "::set-teamsfx-env TAB_DOMAIN=localhost";
        echo "::set-teamsfx-env TAB_ENDPOINT=https://localhost:53000";

  # Validate using manifest schema
  - uses: teamsApp/validateManifest
    with:
      # Path to manifest template
      manifestPath: ./appPackage/manifest.json
  # Build Teams app package with latest env value
  - uses: teamsApp/zipAppPackage
    with:
      # Path to manifest template
      manifestPath: ./appPackage/manifest.json
      outputZipPath: ./appPackage/build/appPackage.${{TEAMSFX_ENV}}.zip
      outputFolder: ./appPackage/build
  # Validate app package using validation rules
  - uses: teamsApp/validateAppPackage
    with:
      # Relative path to this file. This is the path for built zip file.
      appPackagePath: ./appPackage/build/appPackage.${{TEAMSFX_ENV}}.zip
  # Apply the Teams app manifest to an existing Teams app in
  # Teams Developer Portal.
  # Will use the app id in manifest file to determine which Teams app to update.
  - uses: teamsApp/update
    with:
      # Relative path to this file. This is the path for built zip file.
      appPackagePath: ./appPackage/build/appPackage.${{TEAMSFX_ENV}}.zip
  # Extend your Teams app to Outlook and the Microsoft 365 app
  - uses: teamsApp/extendToM365
    with:
      # Relative path to the build app package.
      appPackagePath: ./appPackage/build/appPackage.${{TEAMSFX_ENV}}.zip
    # Write the information of created resources into environment file for
    # the specified environment variable(s).
    writeToEnvironmentFile:
      titleId: M365_TITLE_ID
      appId: M365_APP_ID

deploy:
  # Install development tool(s)
  - uses: devTool/install
    with:
      devCert:
        trust: true
    # Write the information of installed development tool(s) into environment
    # file for the specified environment variable(s).
    writeToEnvironmentFile:
      sslCertFile: SSL_CRT_FILE
      sslKeyFile: SSL_KEY_FILE

  # Run npm command
  - uses: cli/runNpmCommand
    with:
      args: install --no-audit

  # Generate runtime environment variables
  - uses: file/createOrUpdateEnvironmentFile
    with:
      target: ./.localConfigs
      envs:
        PORT: 53000
        SSL_CRT_FILE: ${{SSL_CRT_FILE}}
        SSL_KEY_FILE: ${{SSL_KEY_FILE}}
```

teamsapp.yml
```yml
# yaml-language-server: $schema=https://aka.ms/teams-toolkit/v1.7/yaml.schema.json
# Visit https://aka.ms/teamsfx-v5.0-guide for details on this file
# Visit https://aka.ms/teamsfx-actions for details on actions
version: v1.7

environmentFolderPath: ./env

# Triggered when 'teamsapp provision' is executed
provision:
  # Creates a Teams app
  - uses: teamsApp/create
    with:
      # Teams app name
      name: TEAMZ2${{APP_NAME_SUFFIX}}
    # Write the information of created resources into environment file for
    # the specified environment variable(s).
    writeToEnvironmentFile:
      teamsAppId: TEAMS_APP_ID

  - uses: arm/deploy # Deploy given ARM templates parallelly.
    with:
      # AZURE_SUBSCRIPTION_ID is a built-in environment variable,
      # if its value is empty, TeamsFx will prompt you to select a subscription.
      # Referencing other environment variables with empty values
      # will skip the subscription selection prompt.
      subscriptionId: ${{AZURE_SUBSCRIPTION_ID}}
      # AZURE_RESOURCE_GROUP_NAME is a built-in environment variable,
      # if its value is empty, TeamsFx will prompt you to select or create one
      # resource group.
      # Referencing other environment variables with empty values
      # will skip the resource group selection prompt.
      resourceGroupName: ${{AZURE_RESOURCE_GROUP_NAME}}
      templates:
        - path: ./infra/azure.bicep # Relative path to this file
          # Relative path to this yaml file.
          # Placeholders will be replaced with corresponding environment
          # variable before ARM deployment.
          parameters: ./infra/azure.parameters.json
          # Required when deploying ARM template
          deploymentName: Create-resources-for-tab
      # Teams Toolkit will download this bicep CLI version from github for you,
      # will use bicep CLI in PATH if you remove this config.
      bicepCliVersion: v0.9.1

  # Validate using manifest schema
  - uses: teamsApp/validateManifest
    with:
      # Path to manifest template
      manifestPath: ./appPackage/manifest.json
  # Build Teams app package with latest env value
  - uses: teamsApp/zipAppPackage
    with:
      # Path to manifest template
      manifestPath: ./appPackage/manifest.json
      outputZipPath: ./appPackage/build/appPackage.${{TEAMSFX_ENV}}.zip
      outputFolder: ./appPackage/build
  # Validate app package using validation rules
  - uses: teamsApp/validateAppPackage
    with:
      # Relative path to this file. This is the path for built zip file.
      appPackagePath: ./appPackage/build/appPackage.${{TEAMSFX_ENV}}.zip
  # Apply the Teams app manifest to an existing Teams app in
  # Teams Developer Portal.
  # Will use the app id in manifest file to determine which Teams app to update.
  - uses: teamsApp/update
    with:
      # Relative path to this file. This is the path for built zip file.
      appPackagePath: ./appPackage/build/appPackage.${{TEAMSFX_ENV}}.zip
  # Extend your Teams app to Outlook and the Microsoft 365 app
  - uses: teamsApp/extendToM365
    with:
      # Relative path to the build app package.
      appPackagePath: ./appPackage/build/appPackage.${{TEAMSFX_ENV}}.zip
    # Write the information of created resources into environment file for
    # the specified environment variable(s).
    writeToEnvironmentFile:
      titleId: M365_TITLE_ID
      appId: M365_APP_ID

# Triggered when 'teamsapp deploy' is executed
deploy:
  # Run npm command
  - uses: cli/runNpmCommand
    name: install dependencies
    with:
      args: install
  - uses: cli/runNpmCommand
    name: build app
    with:
      args: run build --if-present
  # Deploy your application to Azure App Service using the zip deploy feature.
  # For additional details, refer to https://aka.ms/zip-deploy-to-app-services.
  - uses: azureAppService/zipDeploy
    with:
      # Deploy base folder
      artifactFolder: .
      # Ignore file location, leave blank will ignore nothing
      ignoreFile: .webappignore
      # The resource id of the cloud resource to be deployed to.
      # This key will be generated by arm/deploy action automatically.
      # You can replace it with your existing Azure Resource id
      # or add it to your environment variable file.
      resourceId: ${{TAB_AZURE_APP_SERVICE_RESOURCE_ID}}

# Triggered when 'teamsapp publish' is executed
publish:
  # Validate using manifest schema
  - uses: teamsApp/validateManifest
    with:
      # Path to manifest template
      manifestPath: ./appPackage/manifest.json
  # Build Teams app package with latest env value
  - uses: teamsApp/zipAppPackage
    with:
      # Path to manifest template
      manifestPath: ./appPackage/manifest.json
      outputZipPath: ./appPackage/build/appPackage.${{TEAMSFX_ENV}}.zip
      outputFolder: ./appPackage/build
  # Validate app package using validation rules
  - uses: teamsApp/validateAppPackage
    with:
      # Relative path to this file. This is the path for built zip file.
      appPackagePath: ./appPackage/build/appPackage.${{TEAMSFX_ENV}}.zip
  # Apply the Teams app manifest to an existing Teams app in
  # Teams Developer Portal.
  # Will use the app id in manifest file to determine which Teams app to update.
  - uses: teamsApp/update
    with:
      # Relative path to this file. This is the path for built zip file.
      appPackagePath: ./appPackage/build/appPackage.${{TEAMSFX_ENV}}.zip
  # Publish the app to
  # Teams Admin Center (https://admin.teams.microsoft.com/policies/manage-apps)
  # for review and approval
  - uses: teamsApp/publishAppPackage
    with:
      appPackagePath: ./appPackage/build/appPackage.${{TEAMSFX_ENV}}.zip
    # Write the information of created resources into environment file for
    # the specified environment variable(s).
    writeToEnvironmentFile:
      publishedAppId: TEAMS_APP_PUBLISHED_APP_ID
projectId: 7db39eba-6590-4156-9ed6-e180213cd43f
```

tsconfig.json
```json
{
  "compilerOptions": {
    "declaration": true,
    "target": "es2017",
    "module": "commonjs",
    "jsx": "react",
    "outDir": "./lib",
    "rootDir": "./src",
    "sourceMap": true,
    "incremental": true,
    "tsBuildInfoFile": "./lib/.tsbuildinfo",
    "resolveJsonModule": true,
    "esModuleInterop": true
  },
  "exclude": ["vite.config.ts"]
}
```

vite.config.ts
```ts
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';

export default defineConfig({
  plugins: [react()],
  root: path.join(__dirname, 'src/static'),
  build: {
    outDir: path.join(__dirname, 'dist'),
    emptyOutDir: true,
    rollupOptions: {
      input: {
        app: path.join(__dirname, 'src/static/scripts/app.tsx')
      },
      output: {
        entryFileNames: 'scripts/[name].js',
        chunkFileNames: 'scripts/[name]-[hash].js',
        assetFileNames: 'assets/[name]-[hash][extname]'
      }
    }
  },
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
      '@components': path.resolve(__dirname, './src/components'),
      '@services': path.resolve(__dirname, './src/services'),
      '@utils': path.resolve(__dirname, './src/utils')
    }
  },
  server: {
    port: 3000,
    proxy: {
      '/api': {
        target: 'http://localhost:7071',
        changeOrigin: true,
        rewrite: (path) => path.replace(/^\/api/, '')
      }
    }
  }
});
```