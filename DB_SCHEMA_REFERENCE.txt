-- =====================================================
-- HohimerPro-401k Database Schema
-- Generated: 2025-07-07
-- =====================================================

-- =====================================================
-- TABLES
-- =====================================================

-- Table: clients
CREATE TABLE [dbo].[clients](
    [client_id] [int] IDENTITY(1,1) NOT NULL,
    [display_name] [nvarchar](255) NOT NULL,
    [full_name] [nvarchar](255) NULL,
    [ima_signed_date] [date] NULL,
    CONSTRAINT [PK_clients] PRIMARY KEY CLUSTERED ([client_id])
);

-- Table: contracts
CREATE TABLE [dbo].[contracts](
    [contract_id] [int] IDENTITY(1,1) NOT NULL,
    [client_id] [int] NOT NULL,
    [contract_number] [nvarchar](100) NULL,
    [provider_name] [nvarchar](255) NULL,
    [contract_start_date] [date] NULL,
    [fee_type] [nvarchar](50) NULL,
    [percent_rate] [float] NULL,
    [flat_rate] [float] NULL,
    [payment_schedule] [nvarchar](50) NULL,
    [num_people] [int] NULL,
    [notes] [nvarchar](max) NULL,
    CONSTRAINT [PK_contracts] PRIMARY KEY CLUSTERED ([contract_id])
);

-- Table: contacts
CREATE TABLE [dbo].[contacts](
    [contact_id] [int] IDENTITY(1,1) NOT NULL,
    [client_id] [int] NOT NULL,
    [contact_type] [nvarchar](50) NOT NULL,
    [contact_name] [nvarchar](255) NULL,
    [phone] [nvarchar](50) NULL,
    [email] [nvarchar](255) NULL,
    [fax] [nvarchar](50) NULL,
    [physical_address] [nvarchar](500) NULL,
    [mailing_address] [nvarchar](500) NULL,
    CONSTRAINT [PK_contacts] PRIMARY KEY CLUSTERED ([contact_id])
);

-- Table: payments
CREATE TABLE [dbo].[payments](
    [payment_id] [int] IDENTITY(1,1) NOT NULL,
    [contract_id] [int] NOT NULL,
    [client_id] [int] NOT NULL,
    [received_date] [date] NULL,
    [total_assets] [float] NULL,
    [expected_fee] [float] NULL,
    [actual_fee] [float] NULL,
    [method] [nvarchar](50) NULL,
    [notes] [nvarchar](max) NULL,
    [applied_period_type] [nvarchar](10) NULL,
    [applied_period] [int] NULL,
    [applied_year] [int] NULL,
    CONSTRAINT [PK_payments] PRIMARY KEY CLUSTERED ([payment_id]),
    CONSTRAINT [UQ_payment_period] UNIQUE NONCLUSTERED ([client_id], [applied_year], [applied_period], [applied_period_type])
);

-- Table: payment_periods
CREATE TABLE [dbo].[payment_periods](
    [period_type] [nvarchar](10) NOT NULL,
    [year] [int] NOT NULL,
    [period] [int] NOT NULL,
    [period_name] [nvarchar](50) NOT NULL,
    [start_date] [date] NOT NULL,
    [end_date] [date] NOT NULL,
    [is_current] [bit] NOT NULL DEFAULT ((0)),
    PRIMARY KEY CLUSTERED ([period_type], [year], [period])
);

-- =====================================================
-- FOREIGN KEYS
-- =====================================================

ALTER TABLE [dbo].[contacts] ADD CONSTRAINT [FK_contacts_clients] 
    FOREIGN KEY([client_id]) REFERENCES [dbo].[clients] ([client_id]) ON DELETE CASCADE;

ALTER TABLE [dbo].[contracts] ADD CONSTRAINT [FK_contracts_clients] 
    FOREIGN KEY([client_id]) REFERENCES [dbo].[clients] ([client_id]) ON DELETE CASCADE;

ALTER TABLE [dbo].[payments] ADD CONSTRAINT [FK_payments_clients] 
    FOREIGN KEY([client_id]) REFERENCES [dbo].[clients] ([client_id]) ON DELETE CASCADE;

ALTER TABLE [dbo].[payments] ADD CONSTRAINT [FK_payments_contracts] 
    FOREIGN KEY([contract_id]) REFERENCES [dbo].[contracts] ([contract_id]);

-- =====================================================
-- CHECK CONSTRAINTS
-- =====================================================

ALTER TABLE [dbo].[payment_periods] ADD CHECK (([period_type]='quarterly' OR [period_type]='monthly'));

ALTER TABLE [dbo].[payments] ADD CONSTRAINT [chk_applied_period] 
    CHECK (([applied_period_type]='monthly' AND ([applied_period]>=(1) AND [applied_period]<=(12)) 
    OR [applied_period_type]='quarterly' AND ([applied_period]>=(1) AND [applied_period]<=(4))));

-- =====================================================
-- INDEXES
-- =====================================================

CREATE NONCLUSTERED INDEX [idx_contacts_client_id] ON [dbo].[contacts] ([client_id]);
CREATE NONCLUSTERED INDEX [idx_contacts_type] ON [dbo].[contacts] ([client_id], [contact_type]);
CREATE NONCLUSTERED INDEX [idx_contracts_client_id] ON [dbo].[contracts] ([client_id]);
CREATE NONCLUSTERED INDEX [idx_contracts_provider] ON [dbo].[contracts] ([provider_name]);
CREATE NONCLUSTERED INDEX [idx_payment_periods_dates] ON [dbo].[payment_periods] ([period_type], [start_date], [end_date]);
CREATE NONCLUSTERED INDEX [idx_payments_client_id] ON [dbo].[payments] ([client_id]);
CREATE NONCLUSTERED INDEX [idx_payments_contract_id] ON [dbo].[payments] ([contract_id]);
CREATE NONCLUSTERED INDEX [idx_payments_date] ON [dbo].[payments] ([client_id], [received_date]);
CREATE NONCLUSTERED INDEX [idx_payments_period_lookup] ON [dbo].[payments] ([client_id], [applied_year], [applied_period])
    INCLUDE([actual_fee], [expected_fee], [total_assets], [received_date]);

-- =====================================================
-- VIEWS
-- =====================================================

-- View: client_metrics_view
CREATE VIEW [dbo].[client_metrics_view] AS
WITH LastPayment AS (
    SELECT 
        client_id,
        received_date as last_payment_date,
        actual_fee as last_payment_amount,
        total_assets as last_recorded_assets,
        ROW_NUMBER() OVER (PARTITION BY client_id ORDER BY received_date DESC) as rn
    FROM payments
)
SELECT 
    c.client_id,
    lp.last_payment_date,
    lp.last_payment_amount,
    ytd.total_ytd_payments,
    lp.last_recorded_assets,
    GETDATE() as last_updated
FROM clients c
LEFT JOIN LastPayment lp ON c.client_id = lp.client_id AND lp.rn = 1
LEFT JOIN (
    SELECT client_id, SUM(actual_fee) as total_ytd_payments
    FROM payments 
    WHERE applied_year = YEAR(GETDATE())
    GROUP BY client_id
) ytd ON c.client_id = ytd.client_id;
GO

-- View: client_payment_status
CREATE VIEW [dbo].[client_payment_status] AS
SELECT
    c.client_id,
    c.display_name,
    ct.payment_schedule,
    ct.fee_type,
    ct.flat_rate,
    ct.percent_rate,
    cmv.last_payment_date,
    cmv.last_payment_amount,
    latest.applied_period,
    latest.applied_year,
    latest.applied_period_type,
    CASE 
        WHEN ct.payment_schedule = 'monthly' THEN 
            CASE WHEN MONTH(GETDATE()) = 1 THEN 12 ELSE MONTH(GETDATE()) - 1 END
        WHEN ct.payment_schedule = 'quarterly' THEN 
            CASE WHEN DATEPART(QUARTER, GETDATE()) = 1 THEN 4 ELSE DATEPART(QUARTER, GETDATE()) - 1 END
    END AS current_period,
    CASE 
        WHEN MONTH(GETDATE()) = 1 AND ct.payment_schedule = 'monthly' THEN YEAR(GETDATE()) - 1
        WHEN DATEPART(QUARTER, GETDATE()) = 1 AND ct.payment_schedule = 'quarterly' THEN YEAR(GETDATE()) - 1
        ELSE YEAR(GETDATE())
    END AS current_year,
    cmv.last_recorded_assets,
    CASE
        WHEN ct.fee_type = 'flat' THEN ct.flat_rate
        WHEN ct.fee_type = 'percentage' AND cmv.last_recorded_assets IS NOT NULL THEN 
            ROUND(cmv.last_recorded_assets * (ct.percent_rate / 100.0), 2)
        ELSE NULL
    END AS expected_fee,
    CASE
        WHEN latest.applied_year IS NULL THEN 'Due'
        WHEN latest.applied_year < CASE 
            WHEN (MONTH(GETDATE()) = 1 AND ct.payment_schedule = 'monthly') OR 
                 (DATEPART(QUARTER, GETDATE()) = 1 AND ct.payment_schedule = 'quarterly')
            THEN YEAR(GETDATE()) - 1
            ELSE YEAR(GETDATE()) 
        END THEN 'Due'
        WHEN latest.applied_year = CASE 
            WHEN (MONTH(GETDATE()) = 1 AND ct.payment_schedule = 'monthly') OR 
                 (DATEPART(QUARTER, GETDATE()) = 1 AND ct.payment_schedule = 'quarterly')
            THEN YEAR(GETDATE()) - 1
            ELSE YEAR(GETDATE()) 
        END AND latest.applied_period < CASE
            WHEN ct.payment_schedule = 'monthly' THEN 
                CASE WHEN MONTH(GETDATE()) = 1 THEN 12 ELSE MONTH(GETDATE()) - 1 END
            WHEN ct.payment_schedule = 'quarterly' THEN 
                CASE WHEN DATEPART(QUARTER, GETDATE()) = 1 THEN 4 ELSE DATEPART(QUARTER, GETDATE()) - 1 END
        END THEN 'Due'
        ELSE 'Paid'
    END AS payment_status
FROM clients c
JOIN contracts ct ON c.client_id = ct.client_id
LEFT JOIN client_metrics_view cmv ON c.client_id = cmv.client_id
LEFT JOIN (
    SELECT * FROM (
        SELECT *, ROW_NUMBER() OVER (PARTITION BY client_id ORDER BY received_date DESC) as rn
        FROM payments
    ) AS numbered WHERE rn = 1
) latest ON c.client_id = latest.client_id;
GO

-- View: clients_by_provider_view
CREATE VIEW [dbo].[clients_by_provider_view] AS
SELECT 
    c.client_id,
    c.display_name,
    c.full_name,
    c.ima_signed_date,
    ct.contract_id,
    ct.provider_name,
    ct.fee_type,
    ct.percent_rate,
    ct.flat_rate,
    ct.payment_schedule,
    cm.last_payment_date,
    cm.last_payment_amount,
    cm.last_recorded_assets,
    cm.total_ytd_payments,
    cps.payment_status,
    CASE 
        WHEN cps.payment_status = 'Paid' THEN 'green'
        ELSE 'yellow'
    END AS compliance_status
FROM clients c
LEFT JOIN contracts ct ON c.client_id = ct.client_id
LEFT JOIN client_metrics_view cm ON c.client_id = cm.client_id
LEFT JOIN client_payment_status cps ON c.client_id = cps.client_id;
GO

-- View: payment_variance_view
CREATE VIEW [dbo].[payment_variance_view] AS
SELECT 
    p.*,
    p.actual_fee - p.expected_fee AS variance_amount,
    CASE 
        WHEN p.expected_fee = 0 OR p.expected_fee IS NULL THEN NULL
        ELSE ((p.actual_fee - p.expected_fee) / p.expected_fee) * 100
    END AS variance_percent,
    CASE 
        WHEN p.expected_fee IS NULL OR p.expected_fee = 0 THEN 'unknown'
        WHEN ABS(p.actual_fee - p.expected_fee) < 0.01 THEN 'exact'
        WHEN ABS(((p.actual_fee - p.expected_fee) / p.expected_fee) * 100) <= 5 THEN 'acceptable'
        WHEN ABS(((p.actual_fee - p.expected_fee) / p.expected_fee) * 100) <= 15 THEN 'warning'
        ELSE 'alert'
    END AS variance_status
FROM payments p;
GO

-- View: quarterly_totals
CREATE VIEW [dbo].[quarterly_totals] AS
SELECT 
    c.client_id,
    c.display_name,
    p.applied_year as year,
    CASE 
        WHEN p.applied_period_type = 'monthly' THEN 
            CASE 
                WHEN p.applied_period IN (1,2,3) THEN 1
                WHEN p.applied_period IN (4,5,6) THEN 2
                WHEN p.applied_period IN (7,8,9) THEN 3
                WHEN p.applied_period IN (10,11,12) THEN 4
            END
        WHEN p.applied_period_type = 'quarterly' THEN p.applied_period
    END as quarter,
    COALESCE(SUM(p.actual_fee), 0) as total,
    COUNT(p.payment_id) as payment_count
FROM clients c
LEFT JOIN payments p ON c.client_id = p.client_id
GROUP BY 
    c.client_id, 
    c.display_name, 
    p.applied_year,
    CASE 
        WHEN p.applied_period_type = 'monthly' THEN 
            CASE 
                WHEN p.applied_period IN (1,2,3) THEN 1
                WHEN p.applied_period IN (4,5,6) THEN 2
                WHEN p.applied_period IN (7,8,9) THEN 3
                WHEN p.applied_period IN (10,11,12) THEN 4
            END
        WHEN p.applied_period_type = 'quarterly' THEN p.applied_period
    END;
GO

-- View: yearly_summaries
CREATE VIEW [dbo].[yearly_summaries] AS
WITH yearly_data AS (
    SELECT 
        client_id,
        applied_year as [year],
        SUM(actual_fee) as total_payments,
        AVG(total_assets) as total_assets,
        COUNT(*) as payment_count,
        AVG(actual_fee) as avg_payment
    FROM payments 
    GROUP BY client_id, applied_year
)
SELECT 
    y1.*,
    CASE 
        WHEN y2.total_payments > 0 
        THEN ((y1.total_payments - y2.total_payments) / y2.total_payments * 100) 
        ELSE NULL 
    END as yoy_growth,
    GETDATE() as last_updated
FROM yearly_data y1
LEFT JOIN yearly_data y2 ON y1.client_id = y2.client_id 
    AND y1.[year] = y2.[year] + 1;
GO