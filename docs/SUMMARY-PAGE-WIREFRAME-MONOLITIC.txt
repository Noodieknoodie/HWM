components.json
```json
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/index.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}
```

index.html
```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>provider-payment-tracker</title>
    <meta name="description" content="Lovable Generated Project" />
    <meta name="author" content="Lovable" />

    <meta property="og:title" content="provider-payment-tracker" />
    <meta property="og:description" content="Lovable Generated Project" />
    <meta property="og:type" content="website" />
    <meta property="og:image" content="https://lovable.dev/opengraph-image-p98pqg.png" />

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@lovable_dev" />
    <meta name="twitter:image" content="https://lovable.dev/opengraph-image-p98pqg.png" />
  </head>

  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
```

package.json
```json
{
  "name": "vite_react_shadcn_ts",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "build:dev": "vite build --mode development",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.0",
    "@radix-ui/react-accordion": "^1.2.0",
    "@radix-ui/react-alert-dialog": "^1.1.1",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-checkbox": "^1.1.1",
    "@radix-ui/react-collapsible": "^1.1.0",
    "@radix-ui/react-context-menu": "^2.2.1",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-hover-card": "^1.1.1",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.1",
    "@radix-ui/react-navigation-menu": "^1.2.0",
    "@radix-ui/react-popover": "^1.1.1",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.0",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.1",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.4",
    "@tanstack/react-query": "^5.56.2",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "date-fns": "^3.6.0",
    "embla-carousel-react": "^8.3.0",
    "input-otp": "^1.2.4",
    "lucide-react": "^0.462.0",
    "next-themes": "^0.3.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.53.0",
    "react-resizable-panels": "^2.1.3",
    "react-router-dom": "^6.26.2",
    "recharts": "^2.12.7",
    "sonner": "^1.5.0",
    "tailwind-merge": "^2.5.2",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.3",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@tailwindcss/typography": "^0.5.15",
    "@types/node": "^22.5.5",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react-swc": "^3.5.0",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^15.9.0",
    "lovable-tagger": "^1.1.7",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.11",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^5.4.1"
  }
}
```

src\App.css
```css
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
```

src\App.tsx
```tsx
import { Toaster } from "@/components/ui/toaster";
import { Toaster as Sonner } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import Index from "./pages/Index";
import NotFound from "./pages/NotFound";

const queryClient = new QueryClient();

const App = () => (
  <QueryClientProvider client={queryClient}>
    <TooltipProvider>
      <Toaster />
      <Sonner />
      <BrowserRouter>
        <Routes>
          <Route path="/" element={<Index />} />
          {/* ADD ALL CUSTOM ROUTES ABOVE THE CATCH-ALL "*" ROUTE */}
          <Route path="*" element={<NotFound />} />
        </Routes>
      </BrowserRouter>
    </TooltipProvider>
  </QueryClientProvider>
);

export default App;
```

src\components\FinancialSummary.tsx
```tsx
import { useState } from "react";
import { ChevronLeft, ChevronRight, Download } from "lucide-react";
import { Button } from "@/components/ui/button";
import { MetricCard } from "./MetricCard";
import { PaymentTable } from "./PaymentTable";

const mockQuarterlyData = {
  providers: [
    {
      name: "JOHN HANCOCK",
      totalExpected: "$59,493",
      totalActual: "$58,359",
      totalVariance: "-$1,134",
      statusCounts: "5/6",
      clients: [
        {
          name: "AirSea America",
          frequency: "Monthly",
          rate: "0.21%",
          expected: "$2,940",
          actual: "$2,790",
          variance: "-$150",
          variancePercent: 5.1,
          status: "2/3",
          posted: true
        },
        {
          name: "Auction Edge",
          frequency: "Quarterly",
          rate: "0.375%",
          expected: "$39,243",
          actual: "$39,243",
          variance: "$0",
          variancePercent: 0,
          status: "1/1",
          posted: true,
          paymentDetails: [
            { period: "Q4", amount: "$39,243", date: "10/28", method: "Wire Transfer" }
          ]
        },
        {
          name: "Bellmont Cabinets",
          frequency: "Monthly",
          rate: "0.06%",
          expected: "--",
          actual: "$1,826",
          variance: "--",
          variancePercent: 0,
          status: "3/3",
          posted: false,
          paymentDetails: [
            { period: "Oct", amount: "$605", date: "10/12", method: "Check" },
            { period: "Nov", amount: "$608", date: "11/15", method: "Check" },
            { period: "Dec", amount: "$613", date: "12/18", method: "Check" }
          ],
          note: "Missing AUM data - requested from client"
        },
        {
          name: "Dakota Creek",
          frequency: "Quarterly",
          rate: "$3,000",
          expected: "$9,000",
          actual: "$9,000",
          variance: "$0",
          variancePercent: 0,
          status: "1/1",
          posted: true
        },
        {
          name: "Edgewater Inn",
          frequency: "Monthly",
          rate: "0.225%",
          expected: "$2,430",
          actual: "$0",
          variance: "-$2,430",
          variancePercent: 100,
          status: "0/3",
          posted: false
        },
        {
          name: "HWM Holdings",
          frequency: "Monthly",
          rate: "$5,880",
          expected: "$5,880",
          actual: "$5,500",
          variance: "-$380",
          variancePercent: 6.5,
          status: "3/3",
          posted: true
        }
      ]
    },
    {
      name: "VOYA",
      totalExpected: "$15,234",
      totalActual: "$14,900",
      totalVariance: "-$334",
      statusCounts: "3/4",
      clients: [
        {
          name: "Amplero",
          frequency: "Monthly",
          rate: "$2,001",
          expected: "$2,001",
          actual: "$2,001",
          variance: "$0",
          variancePercent: 0,
          status: "3/3",
          posted: true,
          paymentDetails: [
            { period: "Oct", amount: "$667", date: "10/05", method: "ACH" },
            { period: "Nov", amount: "$667", date: "11/05", method: "ACH" },
            { period: "Dec", amount: "$667", date: "12/05", method: "ACH" }
          ]
        }
      ]
    }
  ],
  metrics: {
    totalExpected: "$287,453",
    totalReceived: "$276,890",
    collectionRate: "96.3%"
  }
};

const mockAnnualData = {
  providers: mockQuarterlyData.providers,
  metrics: {
    totalExpected: "$1,149,812",
    totalReceived: "$1,107,560",
    collectionRate: "96.3%"
  }
};

export function FinancialSummary() {
  const [viewMode, setViewMode] = useState<'quarterly' | 'annual'>('quarterly');
  const [currentPeriod, setCurrentPeriod] = useState(viewMode === 'quarterly' ? 'Q4 2025' : '2025');

  const data = viewMode === 'quarterly' ? mockQuarterlyData : mockAnnualData;

  const handlePreviousPeriod = () => {
    if (viewMode === 'quarterly') {
      setCurrentPeriod('Q3 2025');
    } else {
      setCurrentPeriod('2024');
    }
  };

  const handleNextPeriod = () => {
    if (viewMode === 'quarterly') {
      setCurrentPeriod('Q1 2026');
    } else {
      setCurrentPeriod('2026');
    }
  };

  const toggleViewMode = () => {
    const newMode = viewMode === 'quarterly' ? 'annual' : 'quarterly';
    setViewMode(newMode);
    setCurrentPeriod(newMode === 'quarterly' ? 'Q4 2025' : '2025');
  };

  return (
    <div className="min-h-screen bg-background p-6">
      <div className="max-w-7xl mx-auto space-y-6">
        {/* Header Section */}
        <div className="space-y-4">
          <h1 className="text-3xl font-bold">
            {viewMode === 'quarterly' ? 'Quarterly' : 'Annual'} Payment Summary
          </h1>
          
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <Button variant="outline" size="sm" onClick={handlePreviousPeriod}>
                <ChevronLeft className="w-4 h-4" />
              </Button>
              <span className="text-lg font-medium min-w-[120px] text-center">
                {currentPeriod}
              </span>
              <Button variant="outline" size="sm" onClick={handleNextPeriod}>
                <ChevronRight className="w-4 h-4" />
              </Button>
            </div>

            <div className="flex items-center gap-2">
              <Button 
                variant={viewMode === 'quarterly' ? 'default' : 'outline'} 
                size="sm"
                onClick={() => {
                  if (viewMode !== 'quarterly') toggleViewMode();
                }}
              >
                Quarter View
              </Button>
              <Button 
                variant={viewMode === 'annual' ? 'default' : 'outline'} 
                size="sm"
                onClick={() => {
                  if (viewMode !== 'annual') toggleViewMode();
                }}
              >
                Year View
              </Button>
              <Button variant="outline" size="sm">
                <Download className="w-4 h-4 mr-2" />
                Export
              </Button>
            </div>
          </div>
        </div>

        {/* Metrics Cards */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <MetricCard 
            title="Total Expected" 
            value={data.metrics.totalExpected}
          />
          <MetricCard 
            title="Total Received" 
            value={data.metrics.totalReceived}
          />
          <MetricCard 
            title="Collection Rate" 
            value={data.metrics.collectionRate}
          />
        </div>

        {/* Payment Table */}
        <PaymentTable 
          providers={data.providers}
          viewMode={viewMode}
        />
      </div>
    </div>
  );
}
```

src\components\MetricCard.tsx
```tsx
import { Card, CardContent } from "@/components/ui/card";

interface MetricCardProps {
  title: string;
  value: string;
  className?: string;
}

export function MetricCard({ title, value, className }: MetricCardProps) {
  return (
    <Card className={`${className}`}>
      <CardContent className="p-6">
        <div className="text-sm text-muted-foreground mb-2">{title}</div>
        <div className="text-2xl font-semibold">{value}</div>
      </CardContent>
    </Card>
  );
}
```

src\components\PaymentTable.tsx
```tsx
import { useState, useRef, useEffect } from "react";
import { 
  ChevronRight, 
  ChevronDown, 
  Check, 
  AlertTriangle, 
  AlertCircle, 
  Square, 
  CheckSquare,
  StickyNote,
  NotebookPen
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Textarea } from "@/components/ui/textarea";

interface PaymentDetail {
  period: string;
  amount: string;
  date: string;
  method: string;
}

interface Client {
  name: string;
  frequency: string;
  rate: string;
  expected: string;
  actual: string;
  variance: string;
  variancePercent: number;
  status: string;
  posted: boolean;
  paymentDetails?: PaymentDetail[];
  note?: string;
}

interface Provider {
  name: string;
  totalExpected: string;
  totalActual: string;
  totalVariance: string;
  statusCounts: string;
  clients: Client[];
}

interface PaymentTableProps {
  providers: Provider[];
  viewMode: 'quarterly' | 'annual';
}

export function PaymentTable({ providers, viewMode }: PaymentTableProps) {
  const [expandedProviders, setExpandedProviders] = useState<Set<string>>(new Set());
  const [expandedClients, setExpandedClients] = useState<Set<string>>(new Set());
  const [noteValues, setNoteValues] = useState<Record<string, string>>({});

  const toggleProvider = (providerName: string) => {
    const newExpanded = new Set(expandedProviders);
    if (newExpanded.has(providerName)) {
      newExpanded.delete(providerName);
    } else {
      newExpanded.add(providerName);
    }
    setExpandedProviders(newExpanded);
  };

  const toggleClient = (clientName: string) => {
    const newExpanded = new Set(expandedClients);
    if (newExpanded.has(clientName)) {
      newExpanded.delete(clientName);
    } else {
      newExpanded.add(clientName);
    }
    setExpandedClients(newExpanded);
  };

  const getVarianceIcon = (variancePercent: number) => {
    if (variancePercent === 0) {
      return <Check className="w-4 h-4 text-success" />;
    } else if (Math.abs(variancePercent) <= 15) {
      return <AlertTriangle className="w-4 h-4 text-warning" />;
    } else {
      return <AlertCircle className="w-4 h-4 text-destructive" />;
    }
  };

  const formatCurrency = (amount: string) => {
    if (amount === "Unknown" || amount === "--") return "--";
    // Remove $ and add consistent formatting
    const cleanAmount = amount.replace('$', '').replace(/,/g, '');
    if (cleanAmount && !isNaN(Number(cleanAmount))) {
      return new Intl.NumberFormat('en-US').format(Number(cleanAmount));
    }
    return amount.replace('$', '');
  };

  const saveNote = (clientName: string, noteText: string) => {
    console.log('Saving note for', clientName, ':', noteText);
    setNoteValues(prev => ({ ...prev, [clientName]: noteText }));
  };

  const NotePopover = ({ client }: { client: Client }) => {
    const [tempNote, setTempNote] = useState(noteValues[client.name] || client.note || "");
    const [isOpen, setIsOpen] = useState(false);

    const handleSave = () => {
      saveNote(client.name, tempNote);
      setIsOpen(false);
    };

    const handleCancel = () => {
      setTempNote(noteValues[client.name] || client.note || "");
      setIsOpen(false);
    };

    const currentNote = noteValues[client.name] || client.note;

    return (
      <Popover open={isOpen} onOpenChange={setIsOpen}>
        <PopoverTrigger asChild>
          <Button
            variant="ghost"
            size="sm"
            className="p-1 h-auto ml-2 hover:bg-muted/50"
            title={currentNote ? `Note: ${currentNote}` : "Add note"}
          >
            {currentNote ? (
              <StickyNote className="w-4 h-4 text-amber-600" />
            ) : (
              <NotebookPen className="w-4 h-4 text-muted-foreground hover:text-foreground" />
            )}
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-80 p-4" align="start">
          <div className="space-y-3">
            <h4 className="text-sm font-medium">Note for {client.name}</h4>
            <Textarea
              value={tempNote}
              onChange={(e) => setTempNote(e.target.value)}
              placeholder="Add a note about this client..."
              className="min-h-[80px] text-sm"
            />
            <div className="flex justify-end gap-2">
              <Button variant="outline" size="sm" onClick={handleCancel}>
                Cancel
              </Button>
              <Button size="sm" onClick={handleSave}>
                Save Note
              </Button>
            </div>
          </div>
        </PopoverContent>
      </Popover>
    );
  };

  return (
    <div className="border border-border/50 rounded-xl overflow-hidden shadow-sm">
      <table className="w-full">
        <colgroup>
          <col className="min-w-[280px]" />
          <col className="w-20" />
          <col className="w-24" />
          {viewMode === 'quarterly' ? (
            <>
              <col className="w-28" />
              <col className="w-28" />
              <col className="w-28" />
              <col className="w-24" />
              <col className="w-20" />
              <col className="w-16" />
            </>
          ) : (
            <>
              <col className="w-28" />
              <col className="w-28" />
              <col className="w-28" />
              <col className="w-28" />
              <col className="w-28" />
              <col className="w-16" />
            </>
          )}
        </colgroup>
        <thead className="bg-muted/30 border-b border-border/50">
          <tr>
            <th className="text-left py-4 px-6 font-semibold text-xs uppercase tracking-wider text-muted-foreground">Provider / Client</th>
            <th className="text-left py-4 px-4 font-semibold text-xs uppercase tracking-wider text-muted-foreground">Frequency</th>
            <th className="text-right py-4 px-4 font-semibold text-xs uppercase tracking-wider text-muted-foreground">
              {viewMode === 'quarterly' ? 'Rate' : 'Annual Rate'}
            </th>
            {viewMode === 'quarterly' ? (
              <>
                <th className="text-right py-4 px-4 font-semibold text-xs uppercase tracking-wider text-muted-foreground">Expected</th>
                <th className="text-right py-4 px-4 font-semibold text-xs uppercase tracking-wider text-muted-foreground">Actual</th>
                <th className="text-right py-4 px-4 font-semibold text-xs uppercase tracking-wider text-muted-foreground">Variance</th>
                <th className="text-center py-4 px-4 font-semibold text-xs uppercase tracking-wider text-muted-foreground">Status</th>
                <th className="text-center py-4 px-4 font-semibold text-xs uppercase tracking-wider text-muted-foreground">Posted</th>
                <th className="text-center py-4 px-4 font-semibold text-xs uppercase tracking-wider text-muted-foreground">Notes</th>
              </>
            ) : (
              <>
                <th className="text-right py-4 px-4 font-semibold text-xs uppercase tracking-wider text-muted-foreground">Q1 2025</th>
                <th className="text-right py-4 px-4 font-semibold text-xs uppercase tracking-wider text-muted-foreground">Q2 2025</th>
                <th className="text-right py-4 px-4 font-semibold text-xs uppercase tracking-wider text-muted-foreground">Q3 2025</th>
                <th className="text-right py-4 px-4 font-semibold text-xs uppercase tracking-wider text-muted-foreground">Q4 2025</th>
                <th className="text-right py-4 px-4 font-semibold text-xs uppercase tracking-wider text-muted-foreground">Total</th>
                <th className="text-center py-4 px-4 font-semibold text-xs uppercase tracking-wider text-muted-foreground">Notes</th>
              </>
            )}
          </tr>
        </thead>
        <tbody>
          {providers.map((provider, providerIndex) => (
            <>
              {/* Provider Header */}
              <tr key={provider.name} className="bg-provider-header border-b">
                <td className="py-6 px-6">
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => toggleProvider(provider.name)}
                    className="p-0 h-auto font-semibold text-sm text-foreground hover:bg-transparent"
                  >
                    {expandedProviders.has(provider.name) ? (
                      <ChevronDown className="w-4 h-4 mr-3" />
                    ) : (
                      <ChevronRight className="w-4 h-4 mr-3" />
                    )}
                    {provider.name} <span className="text-muted-foreground font-medium ml-2">({provider.clients.length} clients)</span>
                  </Button>
                </td>
                <td className="py-6 px-4"></td>
                <td className="py-6 px-4"></td>
                {viewMode === 'quarterly' ? (
                  <>
                    <td className="py-6 px-4 text-right font-semibold text-sm text-foreground">{formatCurrency(provider.totalExpected)}</td>
                    <td className="py-6 px-4 text-right font-semibold text-sm text-foreground">{formatCurrency(provider.totalActual)}</td>
                    <td className="py-6 px-4 text-right font-semibold text-sm text-foreground">{provider.totalVariance}</td>
                    <td className="py-6 px-4 text-center font-medium text-xs text-muted-foreground">{provider.statusCounts}</td>
                    <td className="py-6 px-4 text-center">
                      <CheckSquare className="w-4 h-4 mx-auto text-success" />
                    </td>
                    <td className="py-6 px-4"></td>
                  </>
                ) : (
                  <>
                    <td className="py-6 px-4 text-right font-semibold text-sm text-foreground">61,308</td>
                    <td className="py-6 px-4 text-right font-semibold text-sm text-foreground">61,313</td>
                    <td className="py-6 px-4 text-right font-semibold text-sm text-foreground">60,789</td>
                    <td className="py-6 px-4 text-right font-semibold text-sm text-foreground">55,569</td>
                    <td className="py-6 px-4 text-right font-semibold text-sm text-foreground">{formatCurrency(provider.totalExpected)}</td>
                    <td className="py-6 px-4"></td>
                  </>
                )}
              </tr>

              {/* Client Rows */}
              {expandedProviders.has(provider.name) && provider.clients.map((client, clientIndex) => (
                <>
                  <tr key={client.name} className="bg-background border-b border-border/30 hover:bg-muted/30 transition-colors">
                    <td className="py-4 px-6 pl-12">
                      <div className="flex items-center">
                        {client.paymentDetails && (
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => toggleClient(client.name)}
                            className="p-0 h-auto mr-3 hover:bg-muted/50"
                          >
                            {expandedClients.has(client.name) ? (
                              <ChevronDown className="w-3 h-3 text-muted-foreground" />
                            ) : (
                              <ChevronRight className="w-3 h-3 text-muted-foreground" />
                            )}
                          </Button>
                        )}
                        <Button variant="link" className="p-0 h-auto text-primary hover:underline font-medium text-sm">
                          {client.name}
                        </Button>
                      </div>
                    </td>
                    <td className="py-4 px-4 text-sm text-muted-foreground">{client.frequency}</td>
                    <td className="py-4 px-4 text-right text-sm text-muted-foreground">{client.rate}</td>
                    {viewMode === 'quarterly' ? (
                      <>
                        <td className="py-4 px-4 text-right text-sm">{formatCurrency(client.expected)}</td>
                        <td className="py-4 px-4 text-right text-sm">{formatCurrency(client.actual)}</td>
                        <td className="py-4 px-4 text-right text-sm">{client.variance}</td>
                        <td className="py-4 px-4 text-center text-sm text-muted-foreground">{client.status}</td>
                        <td className="py-4 px-4 text-center">
                          {client.posted ? (
                            <CheckSquare className="w-4 h-4 mx-auto text-success" />
                          ) : (
                            <Square className="w-4 h-4 mx-auto text-muted-foreground" />
                          )}
                        </td>
                        <td className="py-4 px-4 text-center">
                          <NotePopover client={client} />
                        </td>
                      </>
                    ) : (
                      <>
                        <td className="py-4 px-4 text-right text-sm">2,940</td>
                        <td className="py-4 px-4 text-right text-sm">2,940</td>
                        <td className="py-4 px-4 text-right text-sm">2,790</td>
                        <td className="py-4 px-4 text-right text-sm">0</td>
                        <td className="py-4 px-4 text-right text-sm">8,670</td>
                        <td className="py-4 px-4 text-center">
                          <NotePopover client={client} />
                        </td>
                      </>
                    )}
                  </tr>

                  {/* Payment Details */}
                  {viewMode === 'quarterly' && expandedClients.has(client.name) && client.paymentDetails && (
                    client.paymentDetails.map((payment, paymentIndex) => (
                      <tr key={`${client.name}-${paymentIndex}`} className="bg-muted/10">
                        <td 
                          colSpan={viewMode === 'quarterly' ? 9 : 6} 
                          className="py-3 px-6 pl-20 text-xs text-muted-foreground"
                        >
                          └─ {payment.period}: <span className="font-medium">{payment.amount}</span> paid {payment.date} via {payment.method}
                        </td>
                      </tr>
                    ))
                  )}
                </>
              ))}
            </>
          ))}
        </tbody>
      </table>
    </div>
  );
}
```

src\components\ui\button.tsx
```tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
```

src\components\ui\popover.tsx
```tsx
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }
```

src\components\ui\textarea.tsx
```tsx
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }
```

src\hooks\use-toast.ts
```ts
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
```

src\index.css
```css
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Definition of the design system. All colors, gradients, fonts, etc should be defined here. 
All colors MUST be HSL.
*/

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;

    --primary: 210 100% 8%;
    --primary-foreground: 210 40% 98%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;

    --success: 142 76% 36%;
    --success-foreground: 0 0% 100%;
    
    --warning: 38 92% 50%;
    --warning-foreground: 0 0% 100%;
    
    --provider-header: 210 20% 96%;
    --table-stripe: 210 40% 98%;

    --radius: 0.5rem;

    --sidebar-background: 0 0% 98%;

    --sidebar-foreground: 240 5.3% 26.1%;

    --sidebar-primary: 240 5.9% 10%;

    --sidebar-primary-foreground: 0 0% 98%;

    --sidebar-accent: 240 4.8% 95.9%;

    --sidebar-accent-foreground: 240 5.9% 10%;

    --sidebar-border: 220 13% 91%;

    --sidebar-ring: 217.2 91.2% 59.8%;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;

    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;

    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;

    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;

    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;

    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;

    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;

    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
  }
}
```

src\lib\utils.ts
```ts
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
```

src\main.tsx
```tsx
import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import './index.css'

createRoot(document.getElementById("root")!).render(<App />);
```

src\pages\Index.tsx
```tsx
import { FinancialSummary } from "@/components/FinancialSummary";

const Index = () => {
  return <FinancialSummary />;
};

export default Index;
```

src\pages\NotFound.tsx
```tsx
import { useLocation } from "react-router-dom";
import { useEffect } from "react";

const NotFound = () => {
  const location = useLocation();

  useEffect(() => {
    console.error(
      "404 Error: User attempted to access non-existent route:",
      location.pathname
    );
  }, [location.pathname]);

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="text-center">
        <h1 className="text-4xl font-bold mb-4">404</h1>
        <p className="text-xl text-gray-600 mb-4">Oops! Page not found</p>
        <a href="/" className="text-blue-500 hover:text-blue-700 underline">
          Return to Home
        </a>
      </div>
    </div>
  );
};

export default NotFound;
```

tailwind.config.ts
```ts
import type { Config } from "tailwindcss";

export default {
	darkMode: ["class"],
	content: [
		"./pages/**/*.{ts,tsx}",
		"./components/**/*.{ts,tsx}",
		"./app/**/*.{ts,tsx}",
		"./src/**/*.{ts,tsx}",
	],
	prefix: "",
	theme: {
		container: {
			center: true,
			padding: '2rem',
			screens: {
				'2xl': '1400px'
			}
		},
		extend: {
			colors: {
				border: 'hsl(var(--border))',
				input: 'hsl(var(--input))',
				ring: 'hsl(var(--ring))',
				background: 'hsl(var(--background))',
				foreground: 'hsl(var(--foreground))',
				primary: {
					DEFAULT: 'hsl(var(--primary))',
					foreground: 'hsl(var(--primary-foreground))'
				},
				secondary: {
					DEFAULT: 'hsl(var(--secondary))',
					foreground: 'hsl(var(--secondary-foreground))'
				},
				destructive: {
					DEFAULT: 'hsl(var(--destructive))',
					foreground: 'hsl(var(--destructive-foreground))'
				},
				muted: {
					DEFAULT: 'hsl(var(--muted))',
					foreground: 'hsl(var(--muted-foreground))'
				},
				accent: {
					DEFAULT: 'hsl(var(--accent))',
					foreground: 'hsl(var(--accent-foreground))'
				},
				popover: {
					DEFAULT: 'hsl(var(--popover))',
					foreground: 'hsl(var(--popover-foreground))'
				},
				card: {
					DEFAULT: 'hsl(var(--card))',
					foreground: 'hsl(var(--card-foreground))'
				},
				sidebar: {
					DEFAULT: 'hsl(var(--sidebar-background))',
					foreground: 'hsl(var(--sidebar-foreground))',
					primary: 'hsl(var(--sidebar-primary))',
					'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
					accent: 'hsl(var(--sidebar-accent))',
					'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
					border: 'hsl(var(--sidebar-border))',
					ring: 'hsl(var(--sidebar-ring))'
				},
				success: {
					DEFAULT: 'hsl(var(--success))',
					foreground: 'hsl(var(--success-foreground))'
				},
				warning: {
					DEFAULT: 'hsl(var(--warning))',
					foreground: 'hsl(var(--warning-foreground))'
				},
				'provider-header': 'hsl(var(--provider-header))',
				'table-stripe': 'hsl(var(--table-stripe))'
			},
			borderRadius: {
				lg: 'var(--radius)',
				md: 'calc(var(--radius) - 2px)',
				sm: 'calc(var(--radius) - 4px)'
			},
			keyframes: {
				'accordion-down': {
					from: {
						height: '0'
					},
					to: {
						height: 'var(--radix-accordion-content-height)'
					}
				},
				'accordion-up': {
					from: {
						height: 'var(--radix-accordion-content-height)'
					},
					to: {
						height: '0'
					}
				}
			},
			animation: {
				'accordion-down': 'accordion-down 0.2s ease-out',
				'accordion-up': 'accordion-up 0.2s ease-out'
			}
		}
	},
	plugins: [require("tailwindcss-animate")],
} satisfies Config;
```