Code Compilation - Mode 4: source_only
Generated: 2025-07-14 23:47:07
Total files: 43 (skipped 14034)
================================================================================

### src\App.tsx ###

```
// frontend/src/App.tsx
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom'
import { useAuth } from './auth/useAuth'
import PageLayout from './components/PageLayout'
import Payments from './pages/Payments'
import Documents from './pages/Documents'
import Summary from './pages/Summary'
import Contacts from './pages/Contacts'
import Contracts from './pages/Contracts'
import Export from './pages/Export'
import ErrorBoundary from './components/ErrorBoundary'

function AppContent() {
  const { user, loading } = useAuth();
  
  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-semibold text-gray-900 mb-2">
            Loading...
          </h1>
          <p className="text-gray-600">
            Verifying authentication
          </p>
        </div>
      </div>
    );
  }
  
  if (!user) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-semibold text-gray-900 mb-2">
            Authentication Required
          </h1>
          <p className="text-gray-600">
            Please sign in with your Microsoft account
          </p>
        </div>
      </div>
    );
  }
  
  return (
    <Routes>
      <Route path="/" element={<PageLayout />}>
        <Route index element={<Navigate to="/Summary" replace />} />
        <Route path="Summary" element={<Summary />} />
        <Route path="Payments" element={<Payments />} />
        <Route path="Contacts" element={<Contacts />} />
        <Route path="Contracts" element={<Contracts />} />
        <Route path="Export" element={<Export />} />
        <Route path="Documents" element={<Documents />} />
        <Route path="*" element={<Navigate to="/Summary" replace />} />
      </Route>
    </Routes>
  )
}

function App() {
  return (
    <ErrorBoundary>
      <BrowserRouter future={{ 
        v7_startTransition: true,
        v7_relativeSplatPath: true 
      }}>
        <AppContent />
      </BrowserRouter>
    </ErrorBoundary>
  )
}

export default App
```

### src\api\client.ts ###

```
// frontend/src/api/client.ts

// Azure Static Web Apps data-api provides consistent REST endpoints
const DATA_API_BASE = '/data-api/rest';

// Import types
import { Contact } from '../types/contact';
import { apiCache, cacheKeys } from '../utils/cache';

// Azure's standardized error format
export interface AzureApiError {
  error: {
    code: string;
    message: string;
  };
}

export class DataApiClient {
  async request<T>(
    entity: string,
    options: RequestInit = {}
  ): Promise<T> {
    const url = `${DATA_API_BASE}/${entity}`;
    console.log(`[DataApiClient] Requesting: ${url}`);
    
    const response = await fetch(url, {
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    });

    if (!response.ok) {
      let error: AzureApiError;
      const contentType = response.headers.get('content-type');
      
      // Check if we're getting HTML instead of JSON (common with 404s or auth redirects)
      if (contentType && contentType.includes('text/html')) {
        const htmlContent = await response.text();
        console.error(`[DataApiClient] Received HTML response instead of JSON from ${url}`);
        console.error(`[DataApiClient] Status: ${response.status} ${response.statusText}`);
        console.error(`[DataApiClient] First 500 chars of HTML:`, htmlContent.substring(0, 500));
        
        error = {
          error: {
            code: 'HTML_RESPONSE',
            message: `Expected JSON but received HTML. Status: ${response.status}. This usually means the data-api endpoint is not running or the URL is incorrect.`,
          },
        };
      } else {
        try {
          error = await response.json();
        } catch {
          error = {
            error: {
              code: 'REQUEST_FAILED',
              message: `Request failed with status ${response.status}`,
            },
          };
        }
      }
      throw error;
    }

    // Handle 204 No Content
    if (response.status === 204) {
      return {} as T;
    }

    try {
      const data = await response.json();
      console.log(`[DataApiClient] Response from ${url}:`, data);
      // Azure data-api returns results in a value array
      return data.value || data;
    } catch (e) {
      console.error(`[DataApiClient] Failed to parse JSON response from ${url}:`, e);
      throw {
        error: {
          code: 'JSON_PARSE_ERROR',
          message: 'Failed to parse response as JSON',
        },
      };
    }
  }

  // Client entity methods
  async getClients() {
    return this.request('sidebar_clients_view');
  }

  async getClient(id: number) {
    return this.request(`clients?$filter=client_id eq ${id}`);
  }

  async createClient(data: any) {
    return this.request('clients', {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  async updateClient(id: number, data: any) {
    return this.request(`clients/client_id/${id}`, {
      method: 'PATCH',
      body: JSON.stringify(data),
    });
  }

  async deleteClient(id: number) {
    return this.request(`clients/client_id/${id}`, {
      method: 'DELETE',
    });
  }

  // Contract entity methods
  async getClientContracts(clientId: number) {
    return this.request(`contracts?$filter=client_id eq ${clientId}`);
  }

  async createContract(data: any) {
    return this.request('contracts', {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  async updateContract(id: number, data: any) {
    return this.request(`contracts/contract_id/${id}`, {
      method: 'PATCH',
      body: JSON.stringify(data),
    });
  }

  // Payment entity methods - using payment_history_view for rich data
  async getPayments(clientId: number, year?: number) {
    let filter = `client_id eq ${clientId}`;
    if (year) {
      filter += ` and applied_year eq ${year}`;
    }
    return this.request(`payment_history_view?$filter=${filter}&$orderby=received_date desc`);
  }

  async createPayment(data: any) {
    return this.request('payments', {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  async updatePayment(id: number, data: any) {
    return this.request(`payments/payment_id/${id}`, {
      method: 'PATCH',
      body: JSON.stringify(data),
    });
  }

  async deletePayment(id: number) {
    return this.request(`payments/payment_id/${id}`, {
      method: 'DELETE',
    });
  }

  // Period methods - using payment_form_periods_view
  async getAvailablePeriods(clientId: number) {
    return this.request(`payment_form_periods_view?$filter=client_id eq ${clientId} and is_paid eq 0`);
  }

  // Dashboard data - single view for all dashboard data
  async getDashboardData(clientId: number) {
    const response = await this.request(`dashboard_view?$filter=client_id eq ${clientId}`);
    return Array.isArray(response) ? response[0] : response;
  }
  
  // Payment form defaults
  async getPaymentDefaults(clientId: number) {
    const response = await this.request(`payment_form_defaults_view?$filter=client_id eq ${clientId}`);
    return Array.isArray(response) ? response[0] : response;
  }

  // Quarterly summary data
  async getQuarterlySummaries(clientId: number, year?: number) {
    let filter = `client_id eq ${clientId}`;
    if (year) {
      filter += ` and applied_year eq ${year}`;
    }
    return this.request(`quarterly_summary_aggregated?$filter=${filter}&$orderby=applied_year desc,quarter desc`);
  }

  // Summary page data methods - LEGACY (keeping for compatibility)
  async getQuarterlySummaryByProvider(year: number, quarter: number) {
    // Use new aggregated view which shows all clients including those without payments
    return this.request(`quarterly_summary_aggregated?$filter=applied_year eq ${year} and quarter eq ${quarter}`);
  }

  async getAnnualSummaryByProvider(year: number) {
    // Use new yearly summaries view for annual data
    return this.request(`yearly_summaries_view?$filter=year eq ${year}`);
  }

  // NEW Summary page data methods using the page-ready views
  async getQuarterlyPageData(year: number, quarter: number) {
    // Returns complete quarterly data with provider aggregates and client details including notes
    return this.request(`quarterly_page_data?$filter=applied_year eq ${year} and quarter eq ${quarter}&$orderby=provider_name,display_name`);
  }

  async getAnnualPageData(year: number) {
    // Returns complete annual data with quarterly breakdowns and provider aggregates
    return this.request(`annual_page_data?$filter=applied_year eq ${year}&$orderby=provider_name,display_name`);
  }

  async getQuarterlySummaryDetail(clientId: number, year: number, quarter: number) {
    // Use comprehensive payment summary which includes missing payments (payment_id = NULL)
    return this.request(`comprehensive_payment_summary?$filter=client_id eq ${clientId} and year eq ${year} and quarter eq ${quarter}`);
  }

  // Quarterly notes methods
  async getQuarterlyNote(clientId: number, year: number, quarter: number) {
    return this.request(`quarterly_notes?$filter=client_id eq ${clientId} and year eq ${year} and quarter eq ${quarter}`);
  }

  // NEW: Batch method to get all quarterly notes for a period (WITH CACHING)
  async getQuarterlyNotesBatch(year: number, quarter: number) {
    const cacheKey = cacheKeys.quarterlyNotes(year, quarter);
    
    // Check cache first
    const cached = apiCache.get(cacheKey);
    if (cached) {
      return cached;
    }
    
    // If not cached, fetch from API
    const data = await this.request(`quarterly_notes_all_clients?$filter=year eq ${year} and quarter eq ${quarter}`);
    
    // Cache for 5 minutes (quarterly notes don't change often)
    apiCache.set(cacheKey, data, 5 * 60 * 1000);
    
    return data;
  }

  async updateQuarterlyNote(clientId: number, year: number, quarter: number, notes: string) {
    // First check if note exists
    const existing = await this.getQuarterlyNote(clientId, year, quarter);
    
    let result;
    if (existing && Array.isArray(existing) && existing.length > 0) {
      // Update existing note
      result = await this.request(`quarterly_notes/client_id/${clientId}/year/${year}/quarter/${quarter}`, {
        method: 'PATCH',
        body: JSON.stringify({ notes }),
      });
    } else {
      // Create new note
      result = await this.request('quarterly_notes', {
        method: 'POST',
        body: JSON.stringify({ client_id: clientId, year, quarter, notes }),
      });
    }
    
    // Invalidate cache after update
    apiCache.clear(cacheKeys.quarterlyNotes(year, quarter));
    
    return result;
  }

  // Client quarter marker methods (for posted checkbox)
  async updateClientQuarterMarker(clientId: number, year: number, quarter: number, isPosted: boolean) {
    // First check if marker exists
    const existing = await this.request(`client_quarter_markers?$filter=client_id eq ${clientId} and year eq ${year} and quarter eq ${quarter}`);
    
    if (existing && Array.isArray(existing) && existing.length > 0) {
      // Update existing marker
      return await this.request(`client_quarter_markers/client_id/${clientId}/year/${year}/quarter/${quarter}`, {
        method: 'PATCH',
        body: JSON.stringify({ is_posted: isPosted }),
      });
    } else {
      // Create new marker
      return await this.request('client_quarter_markers', {
        method: 'POST',
        body: JSON.stringify({ 
          client_id: clientId, 
          year, 
          quarter, 
          is_posted: isPosted 
        }),
      });
    }
  }

  // Contact Management
  async getContacts(clientId: number): Promise<Contact[]> {
    const response = await this.request<Contact[]>(`contacts?$filter=client_id eq ${clientId}&$orderby=contact_type,contact_name`);
    return response || [];
  }

  async createContact(data: Omit<Contact, 'contact_id'>): Promise<Contact> {
    const response = await this.request<Contact>('contacts', {
      method: 'POST',
      body: JSON.stringify(data),
    });
    return response;
  }

  async updateContact(contactId: number, data: Partial<Contact>): Promise<Contact> {
    const response = await this.request<Contact>(`contacts/contact_id/${contactId}`, {
      method: 'PATCH',
      body: JSON.stringify(data),
    });
    return response;
  }

  async deleteContact(contactId: number): Promise<void> {
    await this.request(`contacts/contact_id/${contactId}`, {
      method: 'DELETE',
    });
  }
}

// Create a singleton instance
export const dataApiClient = new DataApiClient();

// Hook to get the API client instance
export function useDataApiClient() {
  return dataApiClient;
}

```

### src\auth\useAuth.local.ts ###

```
// src/auth/useAuth.local.ts
// Local testing version of useAuth - bypasses Teams authentication

import { useState, useEffect } from 'react';

export interface AuthState {
  isAuthenticated: boolean;
  isLoading: boolean;
  userName?: string;
  userEmail?: string;
  error?: string;
}

export const useAuth = () => {
  const [authState, setAuthState] = useState<AuthState>({
    isAuthenticated: false,
    isLoading: true,
  });

  useEffect(() => {
    // Simulate auth for local testing
    setTimeout(() => {
      setAuthState({
        isAuthenticated: true,
        isLoading: false,
        userName: 'Test User',
        userEmail: 'test@hohimer.com'
      });
    }, 500);
  }, []);

  const signIn = async () => {
    console.log('Mock sign in');
  };

  const signOut = async () => {
    console.log('Mock sign out');
  };

  return { authState, signIn, signOut };
};
```

### src\auth\useAuth.ts ###

```
// frontend/src/auth/useAuth.ts
import { useState, useEffect } from 'react';

interface User {
  userId: string;
  userDetails: string; // email
  userRoles: string[];
  identityProvider: string;
}

interface AuthState {
  user: User | null;
  loading: boolean;
  error: Error | null;
}

export function useAuth() {
  const [authState, setAuthState] = useState<AuthState>({
    user: null,
    loading: true,
    error: null
  });

  useEffect(() => {
    // TEMPORARY: Mock auth for all environments during development
    // TODO: Remove this and uncomment production auth code
    setAuthState({
      user: {
        userId: 'dev-user',
        userDetails: 'dev@hohimer.com',
        userRoles: ['authenticated'],
        identityProvider: 'aad'
      },
      loading: false,
      error: null
    });
    return;
    
    // PRODUCTION AUTH CODE - UNCOMMENT WHEN READY
    // if (window.location.hostname === 'localhost') {
    //   setAuthState({
    //     user: {
    //       userId: 'local-dev-user',
    //       userDetails: 'dev@localhost',
    //       userRoles: ['authenticated'],
    //       identityProvider: 'aad'
    //     },
    //     loading: false,
    //     error: null
    //   });
    //   return;
    // }
    
    // Fetch user info from Static Web App auth endpoint
    fetch('/.auth/me')
      .then(res => res.json())
      .then(data => {
        if (data.clientPrincipal) {
          setAuthState({
            user: {
              userId: data.clientPrincipal.userId,
              userDetails: data.clientPrincipal.userDetails,
              userRoles: data.clientPrincipal.userRoles || [],
              identityProvider: data.clientPrincipal.identityProvider
            },
            loading: false,
            error: null
          });
        } else {
          setAuthState({
            user: null,
            loading: false,
            error: null
          });
        }
      })
      .catch(error => {
        setAuthState({
          user: null,
          loading: false,
          error
        });
      });
  }, []);

  const logout = () => {
    window.location.href = '/.auth/logout?post_logout_redirect_uri=/';
  };

  return {
    user: authState.user,
    loading: authState.loading,
    error: authState.error,
    isAuthenticated: !!authState.user,
    logout
  };
}
```

### src\components\Alert.tsx ###

```
// src/components/Alert.tsx
import React from 'react';

interface AlertProps {
  variant: 'error' | 'warning' | 'info' | 'success';
  title?: string;
  message: string;
  className?: string;
}

const variantStyles = {
  error: {
    container: 'bg-red-50 border-red-200',
    icon: 'text-red-400',
    title: 'text-red-800',
    message: 'text-red-700',
    path: 'M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z'
  },
  warning: {
    container: 'bg-yellow-50 border-yellow-200',
    icon: 'text-yellow-400',
    title: 'text-yellow-800',
    message: 'text-yellow-700',
    path: 'M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z'
  },
  info: {
    container: 'bg-blue-50 border-blue-200',
    icon: 'text-blue-400',
    title: 'text-blue-800',
    message: 'text-blue-700',
    path: 'M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 112 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z'
  },
  success: {
    container: 'bg-green-50 border-green-200',
    icon: 'text-green-400',
    title: 'text-green-800',
    message: 'text-green-700',
    path: 'M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z'
  }
};

export const Alert: React.FC<AlertProps> = ({ variant, title, message, className = '' }) => {
  const styles = variantStyles[variant];
  
  return (
    <div className={`border rounded-md p-4 ${styles.container} ${className}`}>
      <div className="flex">
        <div className="flex-shrink-0">
          <svg className={`h-5 w-5 ${styles.icon}`} viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d={styles.path} clipRule="evenodd" />
          </svg>
        </div>
        <div className="ml-3">
          {title && (
            <h3 className={`text-sm font-medium ${styles.title}`}>{title}</h3>
          )}
          <div className={`text-sm ${title ? 'mt-2' : ''} ${styles.message}`}>
            <p>{message}</p>
          </div>
        </div>
      </div>
    </div>
  );
};

// Convenience components
export const ErrorAlert: React.FC<{ message: string; className?: string }> = ({ message, className }) => (
  <Alert variant="error" message={message} className={className} />
);

export const WarningAlert: React.FC<{ title?: string; message: string; className?: string }> = ({ title, message, className }) => (
  <Alert variant="warning" title={title} message={message} className={className} />
);

export const InfoAlert: React.FC<{ title?: string; message: string; className?: string }> = ({ title, message, className }) => (
  <Alert variant="info" title={title} message={message} className={className} />
);

export const SuccessAlert: React.FC<{ title?: string; message: string; className?: string }> = ({ title, message, className }) => (
  <Alert variant="success" title={title} message={message} className={className} />
);
```

### src\components\ClientSearch.tsx ###

```
// frontend/src/components/ClientSearch.tsx
import React, { useState, useEffect } from 'react';
import useAppStore from '@/stores/useAppStore';

interface Client {
  client_id: number;
  display_name: string;
  full_name: string;
  provider_name?: string;
  compliance_status?: 'green' | 'yellow';
}

interface ClientSearchProps {
  clients: Client[];
  isLoading: boolean;
}

const ClientSearch: React.FC<ClientSearchProps> = ({ clients = [], isLoading = false }) => {
  const setSelectedClient = useAppStore((state) => state.setSelectedClient);
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredClients, setFilteredClients] = useState<Client[]>(clients);
  
  // Update filtered clients when search term or clients change
  useEffect(() => {
    if (!searchTerm.trim()) {
      setFilteredClients(clients);
      return;
    }
    
    const lowerSearchTerm = searchTerm.toLowerCase();
    const filtered = clients.filter(client => 
      client.display_name.toLowerCase().includes(lowerSearchTerm) ||
      (client.provider_name && client.provider_name.toLowerCase().includes(lowerSearchTerm))
    );
    
    setFilteredClients(filtered);
  }, [searchTerm, clients]);
  
  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value);
  };
  
  const handleClearSearch = () => {
    setSearchTerm('');
  };
  
  return (
    <div className="relative mb-4">
      <div className="relative group">
        <svg
          className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-600 group-hover:text-blue-500 transition-colors duration-200"
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
        >
          <circle cx="11" cy="11" r="8"></circle>
          <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
        </svg>
        
        <input
          type="search"
          placeholder="Search clients..."
          className="pl-10 pr-8 w-full p-2.5 rounded-lg border border-gray-200 bg-gray-50
                    focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent
                    shadow-sm hover:shadow transition-all duration-200 text-gray-800 placeholder-gray-600"
          value={searchTerm}
          onChange={handleSearchChange}
          disabled={isLoading}
        />
        
        {searchTerm && (
          <button
            className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-600 hover:text-blue-600 transition-colors duration-200"
            onClick={handleClearSearch}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            >
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          </button>
        )}
      </div>
      
      {searchTerm && filteredClients.length > 0 && (
        <div className="absolute left-0 right-0 mt-1 bg-white border border-light-400 rounded-lg shadow-lg z-10 max-h-64 overflow-y-auto animate-fade-in">
          {filteredClients.map(client => (
            <button
              key={client.client_id}
              className="w-full text-left px-4 py-2.5 hover:bg-gray-50 flex items-center first:rounded-t-lg last:rounded-b-lg border-b border-gray-200 last:border-b-0"
              onClick={() => {
                setSelectedClient(client);
                setSearchTerm('');
              }}
            >
              <span className="mr-2">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  className={
                    client.compliance_status === 'green'
                      ? 'text-green-500'
                      : 'text-yellow-500' // Binary: green or yellow only
                  }
                >
                  <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                  <circle cx="12" cy="7" r="4"></circle>
                </svg>
              </span>
              <div className="flex-1">
                <div className="font-medium">{client.display_name}</div>
                {client.provider_name && (
                  <div className="text-xs text-gray-700">{client.provider_name}</div>
                )}
              </div>
            </button>
          ))}
        </div>
      )}
      
      {searchTerm && filteredClients.length === 0 && (
        <div className="absolute left-0 right-0 mt-1 bg-white border border-gray-200 rounded-md shadow-lg z-10 p-4 text-center text-gray-700">
          No clients found matching "{searchTerm}"
        </div>
      )}
    </div>
  );
};

export default ClientSearch;
```

### src\components\ComingSoonPage.tsx ###

```
// src/components/ComingSoonPage.tsx
import React from 'react';

interface ComingSoonPageProps {
  title: string;
}

const ComingSoonPage: React.FC<ComingSoonPageProps> = ({ title }) => {
  return (
    <div className="bg-white shadow rounded-lg p-12">
      <div className="text-center">
        <h3 className="text-lg font-medium text-gray-900">{title}</h3>
        <p className="mt-1 text-sm text-gray-500">This feature is coming soon.</p>
      </div>
    </div>
  );
};

export default ComingSoonPage;
```

### src\components\ErrorBoundary.tsx ###

```
// src/components/ErrorBoundary.tsx
import { Component, ErrorInfo, ReactNode } from 'react';

interface Props {
  children: ReactNode;
  fallback?: ReactNode;
}

interface State {
  hasError: boolean;
  error: Error | null;
}

class ErrorBoundary extends Component<Props, State> {
  public state: State = {
    hasError: false,
    error: null
  };

  public static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('ErrorBoundary caught an error:', error, errorInfo);
  }

  public render() {
    if (this.state.hasError) {
      if (this.props.fallback) {
        return this.props.fallback;
      }

      return (
        <div className="min-h-screen flex items-center justify-center bg-gray-50">
          <div className="max-w-md w-full bg-white shadow-lg rounded-lg p-6">
            <div className="flex items-center mb-4">
              <svg className="h-8 w-8 text-red-500 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
              </svg>
              <h2 className="text-xl font-semibold text-gray-900">Something went wrong</h2>
            </div>
            <p className="text-gray-600 mb-4">
              An unexpected error occurred. Please refresh the page or try again later.
            </p>
            {this.state.error && (
              <details className="text-sm text-gray-500">
                <summary className="cursor-pointer hover:text-gray-700">Error details</summary>
                <pre className="mt-2 p-2 bg-gray-100 rounded text-xs overflow-auto">
                  {this.state.error.toString()}
                </pre>
              </details>
            )}
            <button
              onClick={() => window.location.reload()}
              className="mt-4 w-full bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              Refresh Page
            </button>
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;
```

### src\components\Header.tsx ###

```
// frontend/src/components/Header.tsx
import React from 'react';
import { Link, useLocation } from 'react-router-dom';

const Header: React.FC = () => {
  const location = useLocation();
  
  const navItems = [
    { title: 'SUMMARY', path: '/Summary' },
    { title: 'PAYMENTS', path: '/Payments' },
    { title: 'CONTACTS', path: '/Contacts' },
    { title: 'CONTRACTS', path: '/Contracts' },
    { title: 'DOCUMENTS', path: '/Documents' },
    { title: 'EXPORT', path: '/Export' },
  ];
  
  return (
    <header className="navbar-dark shadow-md">
      <div className="flex h-14 items-center justify-between px-6">
        <div className="flex items-center">
          <Link to="/" className="text-xl font-semibold text-white mr-8 hover:text-blue-300 transition-colors duration-200">
            401k Payment Tracker
          </Link>
          <nav className="hidden md:flex space-x-1">
            {navItems.map((item) => (
              <Link 
                key={item.path} 
                to={item.path}
                className={`${
                  location.pathname === item.path 
                    ? 'bg-blue-600 text-white shadow-sm' 
                    : 'text-gray-100 hover:bg-gray-800 hover:text-white'
                } rounded-md px-4 py-2 text-sm font-medium h-10 flex items-center transition-colors duration-200`}
              >
                {item.title}
              </Link>
            ))}
          </nav>
        </div>
        <div className="flex items-center space-x-4">
          <button className="flex items-center gap-2 p-2 text-gray-100 hover:text-white transition-colors duration-200">
            <span className="hidden sm:inline-block text-sm font-medium">Admin User</span>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <polyline points="6 9 12 15 18 9"></polyline>
            </svg>
          </button>
        </div>
      </div>
      <div className="md:hidden overflow-x-auto bg-gray-800 px-3 border-t border-gray-700">
        <nav className="flex">
          {navItems.map((item) => (
            <Link
              key={item.path}
              to={item.path}
              className={`${
                location.pathname === item.path
                  ? 'border-b-2 border-blue-500 text-white'
                  : 'text-gray-300 hover:text-white'
              } px-4 py-2 text-sm`}
            >
              {item.title}
            </Link>
          ))}
        </nav>
      </div>
    </header>
  );
};

export default Header;
```

### src\components\PageLayout.tsx ###

```
// frontend/src/components/PageLayout.tsx
import React from 'react';
import { Outlet, useLocation } from 'react-router-dom';
import Header from './Header';
import Sidebar from './Sidebar';
import useAppStore from '@/stores/useAppStore';

const PageLayout: React.FC = () => {
  const documentViewerOpen = useAppStore((state) => state.documentViewerOpen);
  const location = useLocation();
  
  // Show sidebar only on payments page
  const showSidebar = location.pathname === '/Payments';
  
  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      <Header />
      <div className="flex flex-1 overflow-hidden">
        {showSidebar && <Sidebar />}
        
        <main className={`flex-1 overflow-y-auto transition-all duration-300 ${documentViewerOpen ? 'mr-96' : ''}`}>
          <div className="max-w-screen-2xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <Outlet />
          </div>
        </main>
        
        {/* Document Viewer Placeholder */}
        {documentViewerOpen && (
          <div className="fixed right-0 top-14 h-[calc(100vh-3.5rem)] w-96 bg-white shadow-xl z-40 border-l border-gray-200">
            <div className="p-4 border-b border-gray-200">
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-semibold text-gray-900">Document Viewer</h3>
                <button
                  onClick={() => useAppStore.getState().setDocumentViewerOpen(false)}
                  className="text-gray-400 hover:text-gray-500"
                >
                  <span className="sr-only">Close</span>
                  <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="flex items-center justify-center h-full pb-20">
              <p className="text-gray-500">Coming Soon</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default PageLayout;
```

### src\components\Sidebar.tsx ###

```
// frontend/src/components/Sidebar.tsx
import React, { useState, useEffect } from 'react';
import useAppStore from '@/stores/useAppStore';
import ClientSearch from './ClientSearch';
import { useDataApiClient } from '@/api/client';

interface Client {
  client_id: number;
  display_name: string;
  full_name: string;
  provider_name?: string;
  compliance_status?: 'green' | 'yellow';
}

const Sidebar: React.FC = () => {
  const selectedClient = useAppStore((state) => state.selectedClient);
  const setSelectedClient = useAppStore((state) => state.setSelectedClient);
  
  const [clients, setClients] = useState<Client[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showByProvider, setShowByProvider] = useState(false);
  
  const dataApiClient = useDataApiClient();
  
  // Load clients on mount
  useEffect(() => {
    const loadClients = async () => {
      try {
        setIsLoading(true);
        setError(null);
        const data = await dataApiClient.getClients();
        setClients(Array.isArray(data) ? data : []);
      } catch (err: any) {
        console.error('Error loading clients:', err);
        setError(err.error?.message || 'Failed to load clients');
      } finally {
        setIsLoading(false);
      }
    };
    
    loadClients();
  }, []);
  
  // Group clients by provider
  const groupClientsByProvider = (): [string, Client[]][] => {
    if (!showByProvider) {
      return [['All', clients]];
    }
    
    return Object.entries(
      clients.reduce((acc, client) => {
        const provider = client.provider_name || 'No Provider';
        if (!acc[provider]) acc[provider] = [];
        acc[provider].push(client);
        return acc;
      }, {} as Record<string, Client[]>)
    ).sort((a, b) => a[0].localeCompare(b[0]));
  };
  
  const groupedClients = groupClientsByProvider();
  
  // Simple gray dot for items with pending entries (yellow status)
  const StatusIcon: React.FC<{ status?: 'green' | 'yellow' }> = ({ status }) => {
    // Only show gray dot for items with pending entries (yellow status)
    if (status === 'yellow') {
      return (
        <span className="w-2 h-2 bg-gray-400 rounded-full inline-block"></span>
      );
    }
    // Return nothing for green status (all caught up)
    return null;
  };
  
  if (error) {
    return (
      <div className="w-80 border-r border-gray-200 bg-white flex flex-col h-full">
        <div className="p-4 border-b border-gray-200">
          <h2 className="text-xl font-semibold text-gray-900 mb-4">Clients</h2>
          <div className="bg-red-50 border border-red-200 rounded-md p-4">
            <p className="text-sm text-red-800">{typeof error === 'string' ? error : 'Failed to load clients'}</p>
            <button
              onClick={() => window.location.reload()}
              className="mt-2 text-sm text-red-600 hover:text-red-500 underline"
            >
              Retry
            </button>
          </div>
        </div>
      </div>
    );
  }
  
  return (
    <div className="w-80 border-r border-gray-200 bg-white flex flex-col h-full lg:relative lg:translate-x-0 transition-transform duration-300">
      <div className="p-4 border-b border-gray-200">
        <h2 className="text-xl font-semibold text-gray-900 mb-4">Clients</h2>
        <ClientSearch clients={clients} isLoading={isLoading} />
        <div className="flex items-center justify-between mt-3">
          <span className="text-sm font-medium text-gray-800">View by Provider</span>
          <button 
            className={`h-5 w-10 rounded-full relative transition-colors ${showByProvider ? 'bg-blue-600' : 'bg-gray-200'}`}
            onClick={() => setShowByProvider(!showByProvider)}
            disabled={isLoading}
          >
            <div 
              className={`absolute w-3 h-3 rounded-full bg-white top-1 transition-all ${
                showByProvider ? 'right-1' : 'left-1'
              }`}
            ></div>
          </button>
        </div>
      </div>
      
      <div className="p-2 flex-1 overflow-y-auto">
        {isLoading ? (
          <div className="space-y-3">
            {[...Array(5)].map((_, i) => (
              <div key={i} className="animate-pulse">
                <div className="h-10 bg-gray-200 rounded"></div>
              </div>
            ))}
          </div>
        ) : (
          <>
            {groupedClients.map(([provider, providerClients]) => (
              <div key={provider} className="mb-2">
                {showByProvider && (
                  <div className="px-3 py-2 text-xs font-semibold text-gray-700 bg-gray-50 rounded-md mb-1">
                    {provider}
                  </div>
                )}
                {providerClients.map(client => (
                  <button
                    key={client.client_id}
                    className={`w-full flex items-center py-2 px-3 mb-1 text-left rounded transition-colors ${
                      selectedClient?.client_id === client.client_id 
                        ? 'bg-gray-100 border-l-4 border-blue-600 font-medium text-gray-900' 
                        : 'text-gray-800 hover:bg-gray-50'
                    }`}
                    onClick={() => setSelectedClient(client)}
                  >
                    <span className="truncate flex-grow">{client.display_name}</span>
                    <span className="ml-2 flex-shrink-0">
                      <StatusIcon status={client.compliance_status} />
                    </span>
                  </button>
                ))}
              </div>
            ))}
            
            {clients.length === 0 && (
              <div className="p-4 text-center text-gray-700">
                No clients available
              </div>
            )}
          </>
        )}
      </div>
    </div>
  );
};

export default Sidebar;
```

### src\components\contacts\ContactForm.tsx ###

```
// src/components/contacts/ContactForm.tsx
import React, { useState, useEffect } from 'react';
import { X } from 'lucide-react';
import { Contact, ContactFormData } from '../../types/contact';

interface ContactFormProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (data: ContactFormData) => Promise<void>;
  contact: Contact | null;
}

export const ContactForm: React.FC<ContactFormProps> = ({
  isOpen,
  onClose,
  onSave,
  contact,
}) => {
  const [formData, setFormData] = useState<ContactFormData>({
    contact_type: 'Primary',
    contact_name: '',
    phone: '',
    email: '',
    fax: '',
    physical_address: '',
    mailing_address: '',
  });
  const [saving, setSaving] = useState(false);
  const [errors, setErrors] = useState<Partial<ContactFormData>>({});

  useEffect(() => {
    if (contact) {
      setFormData({
        contact_type: contact.contact_type,
        contact_name: contact.contact_name,
        phone: contact.phone,
        email: contact.email,
        fax: contact.fax || '',
        physical_address: contact.physical_address,
        mailing_address: contact.mailing_address || '',
      });
    } else {
      setFormData({
        contact_type: 'Primary',
        contact_name: '',
        phone: '',
        email: '',
        fax: '',
        physical_address: '',
        mailing_address: '',
      });
    }
    setErrors({});
  }, [contact]);

  if (!isOpen) return null;

  const validateForm = (): boolean => {
    const newErrors: Partial<ContactFormData> = {};
    
    if (!formData.contact_name.trim()) {
      newErrors.contact_name = 'Contact name is required';
    }
    if (!formData.phone.trim()) {
      newErrors.phone = 'Phone is required';
    }
    if (!formData.email.trim()) {
      newErrors.email = 'Email is required';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = 'Invalid email format';
    }
    if (!formData.physical_address.trim()) {
      newErrors.physical_address = 'Physical address is required';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) return;
    
    setSaving(true);
    try {
      await onSave(formData);
      onClose();
    } catch (err) {
      // Error is handled by parent
    } finally {
      setSaving(false);
    }
  };

  const handleChange = (field: keyof ContactFormData, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    // Clear error for this field when user starts typing
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: undefined }));
    }
  };

  return (
    <>
      {/* Modal Backdrop */}
      <div className="fixed inset-0 bg-black bg-opacity-50 z-50" onClick={onClose} />
      
      {/* Modal Content */}
      <div className="fixed inset-0 z-[60] overflow-y-auto">
        <div className="flex min-h-full items-center justify-center p-4">
          <div className="relative bg-white rounded-lg shadow-xl max-w-2xl w-full">
            {/* Header */}
            <div className="flex items-center justify-between p-6 border-b">
              <h3 className="text-lg font-semibold">
                {contact ? 'Edit Contact' : 'Add New Contact'}
              </h3>
              <button
                onClick={onClose}
                className="text-gray-400 hover:text-gray-500 transition-colors"
                disabled={saving}
              >
                <X size={20} />
              </button>
            </div>
            
            {/* Form */}
            <form onSubmit={handleSubmit} className="p-6">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label htmlFor="contact_name" className="block text-sm font-medium text-gray-700 mb-1">
                    Contact Name *
                  </label>
                  <input
                    type="text"
                    id="contact_name"
                    value={formData.contact_name}
                    onChange={(e) => handleChange('contact_name', e.target.value)}
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                      errors.contact_name ? 'border-red-500' : 'border-gray-300'
                    }`}
                    disabled={saving}
                  />
                  {errors.contact_name && (
                    <p className="mt-1 text-xs text-red-600">{errors.contact_name}</p>
                  )}
                </div>
                
                <div>
                  <label htmlFor="contact_type" className="block text-sm font-medium text-gray-700 mb-1">
                    Contact Type
                  </label>
                  <select
                    id="contact_type"
                    value={formData.contact_type}
                    onChange={(e) => handleChange('contact_type', e.target.value as Contact['contact_type'])}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    disabled={saving}
                  >
                    <option value="Primary">Primary</option>
                    <option value="Authorized">Authorized</option>
                    <option value="Provider">Provider</option>
                  </select>
                </div>
                
                <div>
                  <label htmlFor="phone" className="block text-sm font-medium text-gray-700 mb-1">
                    Phone *
                  </label>
                  <input
                    type="tel"
                    id="phone"
                    value={formData.phone}
                    onChange={(e) => handleChange('phone', e.target.value)}
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                      errors.phone ? 'border-red-500' : 'border-gray-300'
                    }`}
                    disabled={saving}
                  />
                  {errors.phone && (
                    <p className="mt-1 text-xs text-red-600">{errors.phone}</p>
                  )}
                </div>
                
                <div>
                  <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
                    Email *
                  </label>
                  <input
                    type="email"
                    id="email"
                    value={formData.email}
                    onChange={(e) => handleChange('email', e.target.value)}
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                      errors.email ? 'border-red-500' : 'border-gray-300'
                    }`}
                    disabled={saving}
                  />
                  {errors.email && (
                    <p className="mt-1 text-xs text-red-600">{errors.email}</p>
                  )}
                </div>
                
                <div>
                  <label htmlFor="fax" className="block text-sm font-medium text-gray-700 mb-1">
                    Fax
                  </label>
                  <input
                    type="tel"
                    id="fax"
                    value={formData.fax}
                    onChange={(e) => handleChange('fax', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    disabled={saving}
                  />
                </div>
                
                <div className="col-span-2">
                  <label htmlFor="physical_address" className="block text-sm font-medium text-gray-700 mb-1">
                    Physical Address *
                  </label>
                  <input
                    type="text"
                    id="physical_address"
                    value={formData.physical_address}
                    onChange={(e) => handleChange('physical_address', e.target.value)}
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                      errors.physical_address ? 'border-red-500' : 'border-gray-300'
                    }`}
                    disabled={saving}
                  />
                  {errors.physical_address && (
                    <p className="mt-1 text-xs text-red-600">{errors.physical_address}</p>
                  )}
                </div>
                
                <div className="col-span-2">
                  <label htmlFor="mailing_address" className="block text-sm font-medium text-gray-700 mb-1">
                    Mailing Address
                  </label>
                  <input
                    type="text"
                    id="mailing_address"
                    value={formData.mailing_address}
                    onChange={(e) => handleChange('mailing_address', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Leave blank if same as physical address"
                    disabled={saving}
                  />
                </div>
              </div>
              
              {/* Footer */}
              <div className="flex justify-end gap-3 mt-6 pt-6 border-t">
                <button
                  type="button"
                  onClick={onClose}
                  className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                  disabled={saving}
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
                  disabled={saving}
                >
                  {saving ? 'Saving...' : (contact ? 'Update' : 'Add')} Contact
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </>
  );
};
```

### src\components\contacts\ContactsModal.tsx ###

```
// src/components/contacts/ContactsModal.tsx
import React, { useState } from 'react';
import { X } from 'lucide-react';
import { useContacts } from '../../hooks/useContacts';
import { ContactsTable } from './ContactsTable';
import { ContactForm } from './ContactForm';
import { Contact, ContactFormData } from '../../types/contact';
import { Alert } from '../Alert';

interface ContactsModalProps {
  isOpen: boolean;
  onClose: () => void;
  clientId: number;
  clientName: string;
}

export const ContactsModal: React.FC<ContactsModalProps> = ({
  isOpen,
  onClose,
  clientId,
  clientName,
}) => {
  const { contacts, loading, error, createContact, updateContact, deleteContact } = useContacts(clientId);
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [editingContact, setEditingContact] = useState<Contact | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);

  if (!isOpen) return null;

  const handleAdd = () => {
    setEditingContact(null);
    setIsFormOpen(true);
  };

  const handleEdit = (contact: Contact) => {
    setEditingContact(contact);
    setIsFormOpen(true);
  };

  const handleSave = async (formData: ContactFormData) => {
    try {
      if (editingContact) {
        await updateContact(editingContact.contact_id!, {
          ...formData,
          fax: formData.fax || null,
          mailing_address: formData.mailing_address || null,
        });
        setSuccessMessage('Contact updated successfully');
      } else {
        await createContact({
          client_id: clientId,
          ...formData,
          fax: formData.fax || null,
          mailing_address: formData.mailing_address || null,
        });
        setSuccessMessage('Contact added successfully');
      }
      setIsFormOpen(false);
      setEditingContact(null);
      
      // Clear success message after 3 seconds
      setTimeout(() => setSuccessMessage(null), 3000);
    } catch (err) {
      // Error is handled by the hook
      console.error('Error saving contact:', err);
    }
  };

  const handleDelete = async (contactId: number) => {
    if (window.confirm('Are you sure you want to delete this contact?')) {
      try {
        await deleteContact(contactId);
        setSuccessMessage('Contact deleted successfully');
        setTimeout(() => setSuccessMessage(null), 3000);
      } catch (err) {
        console.error('Error deleting contact:', err);
      }
    }
  };

  const handleFormClose = () => {
    setIsFormOpen(false);
    setEditingContact(null);
  };

  return (
    <>
      {/* Modal Backdrop */}
      <div className="fixed inset-0 bg-black bg-opacity-50 z-40" onClick={onClose} />
      
      {/* Modal Content */}
      <div className="fixed inset-0 z-50 overflow-y-auto">
        <div className="flex min-h-full items-center justify-center p-4">
          <div className="relative bg-white rounded-lg shadow-xl max-w-6xl w-full max-h-[90vh] flex flex-col">
            {/* Header */}
            <div className="flex items-center justify-between p-6 border-b">
              <h2 className="text-xl font-semibold">Manage Contacts - {clientName}</h2>
              <button
                onClick={onClose}
                className="text-gray-400 hover:text-gray-500 transition-colors"
              >
                <X size={24} />
              </button>
            </div>
            
            {/* Body */}
            <div className="flex-1 overflow-y-auto p-6">
              {successMessage && (
                <Alert variant="success" message={successMessage} className="mb-4" />
              )}
              
              {error && (
                <Alert variant="error" message={error} className="mb-4" />
              )}
              
              {loading ? (
                <div className="text-center py-8">Loading contacts...</div>
              ) : (
                <ContactsTable
                  contacts={contacts}
                  onAdd={handleAdd}
                  onEdit={handleEdit}
                  onDelete={handleDelete}
                />
              )}
            </div>
          </div>
        </div>
      </div>
      
      {/* Contact Form Modal */}
      {isFormOpen && (
        <ContactForm
          isOpen={isFormOpen}
          onClose={handleFormClose}
          onSave={handleSave}
          contact={editingContact}
        />
      )}
    </>
  );
};
```

### src\components\contacts\ContactsTable.tsx ###

```
// src/components/contacts/ContactsTable.tsx
import React from 'react';
import { Plus, Edit, Trash, Phone, Mail, MapPin } from 'lucide-react';
import { Contact } from '../../types/contact';
import { formatPhone } from '../../utils/formatters';

interface ContactsTableProps {
  contacts: Contact[];
  onAdd: () => void;
  onEdit: (contact: Contact) => void;
  onDelete: (contactId: number) => void;
}

export const ContactsTable: React.FC<ContactsTableProps> = ({
  contacts,
  onAdd,
  onEdit,
  onDelete,
}) => {
  const getContactTypeBadgeClass = (type: string) => {
    switch (type) {
      case 'Primary':
        return 'bg-blue-100 text-blue-700';
      case 'Authorized':
        return 'bg-green-100 text-green-700';
      case 'Provider':
        return 'bg-purple-100 text-purple-700';
      default:
        return 'bg-gray-100 text-gray-700';
    }
  };

  return (
    <div>
      {/* Header */}
      <div className="flex justify-between items-center mb-4">
        <p className="text-gray-600">Manage all contact types for this client</p>
        <button
          onClick={onAdd}
          className="inline-flex items-center px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 gap-2"
        >
          <Plus size={16} /> Add Contact
        </button>
      </div>

      {/* Table */}
      <div className="border rounded-lg overflow-hidden">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Name
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Type
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Contact Info
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Address
              </th>
              <th className="relative px-6 py-3">
                <span className="sr-only">Actions</span>
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {contacts.length === 0 ? (
              <tr>
                <td colSpan={5} className="px-6 py-4 text-center text-gray-500">
                  No contacts found. Click "Add Contact" to create one.
                </td>
              </tr>
            ) : (
              contacts.map((contact) => (
                <tr key={contact.contact_id}>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm font-medium text-gray-900">
                      {contact.contact_name}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${getContactTypeBadgeClass(contact.contact_type)}`}>
                      {contact.contact_type}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="space-y-1">
                      <div className="flex items-center gap-2 text-sm text-gray-900">
                        <Phone size={12} className="text-gray-400" />
                        {formatPhone(contact.phone)}
                      </div>
                      <div className="flex items-center gap-2 text-sm">
                        <Mail size={12} className="text-gray-400" />
                        <a href={`mailto:${contact.email}`} className="text-blue-600 hover:text-blue-900">
                          {contact.email}
                        </a>
                      </div>
                      {contact.fax && (
                        <div className="text-sm text-gray-500">
                          Fax: {formatPhone(contact.fax)}
                        </div>
                      )}
                    </div>
                  </td>
                  <td className="px-6 py-4">
                    <div className="flex items-start gap-2 text-sm text-gray-900">
                      <MapPin size={12} className="text-gray-400 mt-0.5 flex-shrink-0" />
                      <div>
                        <p>{contact.physical_address}</p>
                        {contact.mailing_address && contact.mailing_address !== contact.physical_address && (
                          <p className="text-gray-500 text-xs mt-1">
                            Mailing: {contact.mailing_address}
                          </p>
                        )}
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <div className="flex gap-2 justify-end">
                      <button
                        onClick={() => onEdit(contact)}
                        className="text-blue-600 hover:text-blue-900 p-1"
                        title="Edit contact"
                      >
                        <Edit size={16} />
                      </button>
                      <button
                        onClick={() => onDelete(contact.contact_id!)}
                        className="text-red-600 hover:text-red-900 p-1"
                        title="Delete contact"
                      >
                        <Trash size={16} />
                      </button>
                    </div>
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
};
```

### src\components\dashboard\cards\AssetsAndFeesCard.tsx ###

```
// src/components/dashboard/cards/AssetsAndFeesCard.tsx
import React from 'react';
import { DashboardViewData } from '../../../hooks/useClientDashboard';
import { formatCurrency, formatRate } from '../../../utils/formatters';
import { GridAlignedCard } from './GridAlignedCard';

interface AssetsAndFeesCardProps {
  dashboardData: DashboardViewData;
}

export const AssetsAndFeesCard: React.FC<AssetsAndFeesCardProps> = ({ dashboardData }) => {
  const isPercentage = dashboardData.fee_type === 'percentage';
  
  // Format composite rates display as inline pills
  const compositeRates = (
    <div className="flex gap-1 flex-wrap">
      <span className="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-700">
        M: {formatRate(dashboardData.monthly_rate, dashboardData.fee_type)}
      </span>
      <span className="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-700">
        Q: {formatRate(dashboardData.quarterly_rate, dashboardData.fee_type)}
      </span>
      <span className="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-700">
        A: {formatRate(dashboardData.annual_rate, dashboardData.fee_type)}
      </span>
    </div>
  );
  
  const details = [
    { 
      label: "Frequency", 
      value: dashboardData.payment_schedule === 'monthly' ? 'Monthly' : 'Quarterly' 
    },
    { 
      label: "Fee Type", 
      value: isPercentage ? 'Percentage' : 'Flat' 
    },
    { 
      label: "Rates", 
      value: compositeRates 
    },
  ];
  
  // Format AUM with asterisk if estimated
  const aumDisplay = dashboardData.aum 
    ? `${formatCurrency(dashboardData.aum, 0)}${dashboardData.aum_source === 'estimated' ? '*' : ''}`
    : 'N/A';

  return (
    <GridAlignedCard
      title="Assets & Fees"
      mainValueLabel="AUM"
      mainValue={aumDisplay}
      details={details}
    />
  );
};
```

### src\components\dashboard\cards\ContactCard.tsx ###

```
// src/components/dashboard/cards/ContactCard.tsx
import React, { useState } from 'react';
import { DashboardViewData } from '../../../hooks/useClientDashboard';
import { formatPhone } from '../../../utils/formatters';
import { GridAlignedCard } from './GridAlignedCard';
import { ContactsModal } from '../../contacts/ContactsModal';

interface ContactCardProps {
  dashboardData: DashboardViewData;
}

export const ContactCard: React.FC<ContactCardProps> = ({ dashboardData }) => {
  const [isContactsModalOpen, setIsContactsModalOpen] = useState(false);
  // Format address for display
  const formatAddress = (address: string | null | undefined) => {
    if (!address) return '--';
    
    // Split address by comma and clean up
    const parts = address.split(',').map(part => part.trim());
    
    if (parts.length === 0) return '--';
    
    // Return formatted address as JSX with line breaks
    return (
      <div className="text-right text-xs leading-relaxed">
        {parts.map((part, index) => (
          <div key={index}>{part}</div>
        ))}
      </div>
    );
  };
  
  const details = [
    { 
      label: "Phone", 
      value: formatPhone(dashboardData.phone) || '--'
    },
    { 
      label: "Address", 
      value: formatAddress(dashboardData.physical_address)
    },
  ];

  return (
    <>
      <GridAlignedCard
        title="Contact"
        mainValueLabel="Primary Contact"
        mainValue={dashboardData.contact_name || '--'}
        details={details}
        action={
          <button
            onClick={() => setIsContactsModalOpen(true)}
            className="w-full px-4 py-2 text-sm font-medium text-blue-600 bg-white border border-blue-600 rounded-md hover:bg-blue-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
          >
            Manage Contacts
          </button>
        }
      />
      
      {dashboardData.client_id && (
        <ContactsModal
          isOpen={isContactsModalOpen}
          onClose={() => setIsContactsModalOpen(false)}
          clientId={dashboardData.client_id}
          clientName={dashboardData.display_name || 'Client'}
        />
      )}
    </>
  );
};
```

### src\components\dashboard\cards\CurrentStatusCard.tsx ###

```
// src/components/dashboard/cards/CurrentStatusCard.tsx
import React from 'react';
import { DashboardViewData } from '../../../hooks/useClientDashboard';
import { formatCurrency, formatDateMMDDYY } from '../../../utils/formatters';
import { GridAlignedCard } from './GridAlignedCard';

interface CurrentStatusCardProps {
  dashboardData: DashboardViewData;
}

export const CurrentStatusCard: React.FC<CurrentStatusCardProps> = ({ dashboardData }) => {
  const isPaid = dashboardData.payment_status === 'Paid';
  
  const details = [
    { 
      label: "Expected Payment", 
      value: formatCurrency(dashboardData.expected_fee) || '--'
    },
    { 
      label: "Last Payment Date", 
      value: dashboardData.last_payment_date ? formatDateMMDDYY(dashboardData.last_payment_date) : '--'
    },
    { 
      label: "Last Payment Amount", 
      value: dashboardData.last_payment_amount ? formatCurrency(dashboardData.last_payment_amount) : '--'
    },
  ];

  return (
    <GridAlignedCard
      title="Current Status"
      mainValue={
        <div>
          <p className="text-xl font-bold text-gray-800 break-words leading-tight">
            {dashboardData.current_period_display || '--'}
          </p>
          {!isPaid && (
            <p className="text-sm text-gray-500 mt-1">Awaiting Entry</p>
          )}
        </div>
      }
      details={details}
    />
  );
};
```

### src\components\dashboard\cards\DashboardCard.tsx ###

```
// src/components/dashboard/cards/DashboardCard.tsx
import React from 'react';
import { LucideIcon } from 'lucide-react';

interface DashboardCardProps {
  icon: LucideIcon;
  title: string;
  children: React.ReactNode;
  className?: string;
}

export const DashboardCard: React.FC<DashboardCardProps> = ({ 
  icon: Icon, 
  title, 
  children,
  className = ''
}) => {
  return (
    <div className={`bg-white rounded-lg border border-gray-200 p-5 h-full ${className}`}>
      <div className="flex items-center mb-4">
        <Icon className="w-4 h-4 text-gray-500 mr-2" />
        <h3 className="text-xs font-semibold text-gray-500 uppercase tracking-wider">{title}</h3>
      </div>
      
      <div className="space-y-3">
        {children}
      </div>
    </div>
  );
};
```

### src\components\dashboard\cards\GridAlignedCard.tsx ###

```
// src/components/dashboard/cards/GridAlignedCard.tsx
import React from 'react';

interface GridAlignedCardProps {
  title: string;
  mainValue: React.ReactNode;
  mainValueLabel?: string;
  details: { label: string; value: React.ReactNode }[];
  action?: React.ReactNode;
}

export const GridAlignedCard: React.FC<GridAlignedCardProps> = ({ 
  title, 
  mainValue, 
  mainValueLabel, 
  details,
  action 
}) => {
  return (
    <div className="bg-white rounded-lg p-6 border border-gray-200 flex flex-col h-full">
      <h3 className="font-semibold text-sm mb-3 text-gray-600">{title}</h3>
      <div className="min-h-[4rem] flex flex-col justify-center border-b pb-3 mb-3">
        {mainValueLabel && <p className="text-xs text-gray-500 uppercase tracking-wider mb-1">{mainValueLabel}</p>}
        {typeof mainValue === "string" ? (
          <p className="text-xl font-bold text-gray-800 break-words leading-tight">{mainValue}</p>
        ) : (
          mainValue
        )}
      </div>
      <div className="flex-grow space-y-2 text-sm">
        {details.map((item, index) => (
          <div key={`${item.label}-${index}`} className="flex justify-between items-start gap-3">
            <span className="text-gray-500 text-xs whitespace-nowrap flex-shrink-0">{item.label}</span>
            <span className="font-medium text-right text-xs leading-relaxed">{item.value}</span>
          </div>
        ))}
      </div>
      {action && (
        <div className="mt-4 pt-3 border-t">
          {action}
        </div>
      )}
    </div>
  );
};
```

### src\components\dashboard\cards\PlanDetailsCard.tsx ###

```
// src/components/dashboard/cards/PlanDetailsCard.tsx
import React from 'react';
import { DashboardViewData } from '../../../hooks/useClientDashboard';
import { formatDateMMYY, formatNumber } from '../../../utils/formatters';
import { GridAlignedCard } from './GridAlignedCard';

interface PlanDetailsCardProps {
  dashboardData: DashboardViewData;
}

export const PlanDetailsCard: React.FC<PlanDetailsCardProps> = ({ dashboardData }) => {
  const details = [
    { 
      label: "Contract #", 
      value: dashboardData.contract_number || '--' 
    },
    { 
      label: "Participants", 
      value: dashboardData.num_people ? `${formatNumber(dashboardData.num_people)}` : '--'
    },
    { 
      label: "Client Since", 
      value: formatDateMMYY(dashboardData.ima_signed_date) 
    },
  ];

  return (
    <GridAlignedCard
      title="Plan Details"
      mainValueLabel="Provider"
      mainValue={dashboardData.provider_name || '--'}
      details={details}
    />
  );
};
```

### src\components\dashboard\cards\StatusDisplay.tsx ###

```
// src/components/dashboard/cards/StatusDisplay.tsx
import React from 'react';

interface StatusDisplayProps {
  status: string;
}

export const StatusDisplay: React.FC<StatusDisplayProps> = ({ status }) => {
  const statusConfig: { [key: string]: { text: string; color: string } } = {
    Paid: { text: "PAID", color: "text-green-600" },
    "Payment Due": { text: "PAYMENT DUE", color: "text-amber-600" },
    Due: { text: "PAYMENT DUE", color: "text-amber-600" },
    Overdue: { text: "OVERDUE", color: "text-red-600" },
  };
  
  const config = statusConfig[status] || { text: status.toUpperCase(), color: "text-gray-800" };

  return <p className={`text-xl font-bold break-words leading-tight ${config.color}`}>{config.text}</p>;
};
```

### src\components\payment\PaymentForm.tsx ###

```
// src/components/payment/PaymentForm.tsx
import React, { useState, useEffect, useRef } from 'react';
import { usePeriods } from '@/hooks/usePeriods';
import { Payment, PaymentCreateData, PaymentUpdateData } from '@/hooks/usePayments';
import { useClientDashboard } from '@/hooks/useClientDashboard';
import { usePaymentDefaults } from '@/hooks/usePaymentDefaults';
import { getErrorMessage } from '@/utils/errorUtils';

interface PaymentFormProps {
  clientId: number;
  contractId: number | null;
  editingPayment: Payment | null;
  onSubmit: (data: PaymentCreateData | PaymentUpdateData) => Promise<void>;
  onCancel?: () => void;
}

const PAYMENT_METHODS = [
  { value: 'Auto - ACH', label: 'Auto - ACH' },
  { value: 'Auto - Check', label: 'Auto - Check' },
  { value: 'Invoice - Check', label: 'Invoice - Check' },
  { value: 'Wire Transfer', label: 'Wire Transfer' },
  { value: 'Check', label: 'Check' },
];

const PaymentForm: React.FC<PaymentFormProps> = ({
  clientId,
  contractId,
  editingPayment,
  onSubmit,
  onCancel,
}) => {
  const { periods, loading: periodsLoading } = usePeriods(clientId);
  const { dashboardData } = useClientDashboard(clientId);
  const { defaults: paymentDefaults } = usePaymentDefaults(clientId);
  const formRef = useRef<HTMLDivElement>(null);
  const firstInputRef = useRef<HTMLInputElement>(null);
  
  const [formData, setFormData] = useState({
    received_date: new Date().toISOString().split('T')[0],
    total_assets: '',
    actual_fee: '',
    method: 'Check',
    notes: '',
    period_selection: '',
  });
  
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isDirty, setIsDirty] = useState(false);
  
  // Pre-fill AUM with suggested value when defaults are loaded
  useEffect(() => {
    if (!editingPayment && paymentDefaults?.suggested_aum && !formData.total_assets && !isDirty) {
      setFormData(prev => ({
        ...prev,
        total_assets: paymentDefaults.suggested_aum?.toString() || ''
      }));
    }
  }, [paymentDefaults, editingPayment, isDirty]);
  
  // Populate form when editing and handle focus/scroll
  useEffect(() => {
    if (editingPayment) {
      setFormData({
        received_date: editingPayment.received_date,
        total_assets: editingPayment.total_assets?.toString() || '',
        actual_fee: editingPayment.actual_fee.toString(),
        method: editingPayment.method || 'Check',
        notes: editingPayment.notes || '',
        period_selection: `${editingPayment.applied_period}-${editingPayment.applied_year}`,
      });
      
      // Scroll to form and focus first input
      setTimeout(() => {
        formRef.current?.scrollIntoView({ behavior: 'smooth', block: 'center' });
        firstInputRef.current?.focus();
      }, 100);
    }
  }, [editingPayment]);
  
  // Calculate expected fee based on contract
  const calculateExpectedFee = () => {
    if (!dashboardData || !formData.total_assets) return null;
    
    const assets = parseFloat(formData.total_assets);
    
    if (dashboardData.fee_type === 'percentage' && dashboardData.percent_rate) {
      // percent_rate is already scaled (e.g., 0.0007 for 0.07% monthly)
      // So just multiply by AUM to get dollar amount
      return assets * dashboardData.percent_rate;
    } else if (dashboardData.fee_type === 'flat' && dashboardData.flat_rate) {
      return dashboardData.flat_rate;
    }
    
    return null;
  };
  
  const expectedFee = calculateExpectedFee();
  
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    setIsDirty(true);
  };
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    
    // Validation
    if (!formData.period_selection) {
      setError('Please select a period');
      return;
    }
    
    if (!formData.actual_fee) {
      setError('Please enter the actual fee amount');
      return;
    }
    
    const periodParts = formData.period_selection.split('-').map(Number);
    const [year, period] = periodParts.length === 2 ? periodParts : [0, 0];
    
    if (!period || !year) {
      setError('Invalid period selection format');
      return;
    }
    
    try {
      setIsSubmitting(true);
      
      // Prevent form submission during periods loading
      if (periodsLoading) {
        setError('Please wait for periods to load');
        return;
      }
      
      if (!contractId) {
        setError('This client does not have an active contract. Please add a contract before recording payments.');
        return;
      }
      
      const data: PaymentCreateData | PaymentUpdateData = editingPayment ? {
        received_date: formData.received_date,
        total_assets: formData.total_assets ? parseFloat(formData.total_assets) : null,
        expected_fee: expectedFee,
        actual_fee: parseFloat(formData.actual_fee),
        method: formData.method,
        notes: formData.notes || null,
        applied_period_type: dashboardData?.payment_schedule || 'monthly',
        applied_period: period,
        applied_year: year,
      } : {
        contract_id: contractId || 0,
        client_id: clientId,
        received_date: formData.received_date,
        total_assets: formData.total_assets ? parseFloat(formData.total_assets) : null,
        expected_fee: expectedFee,
        actual_fee: parseFloat(formData.actual_fee),
        method: formData.method,
        notes: formData.notes || null,
        applied_period_type: dashboardData?.payment_schedule || 'monthly',
        applied_period: period,
        applied_year: year,
      };
      
      await onSubmit(data);
      
      // Reset form after successful submission
      if (!editingPayment) {
        setFormData({
          received_date: new Date().toISOString().split('T')[0],
          total_assets: '',
          actual_fee: '',
          method: 'Check',
          notes: '',
          period_selection: '',
        });
        setIsDirty(false);
      }
    } catch (err: any) {
      setError(getErrorMessage(err, 'Failed to save payment'));
    } finally {
      setIsSubmitting(false);
    }
  };
  
  const handleClear = () => {
    if (isDirty && !confirm('Are you sure you want to clear the form? Your changes will be lost.')) {
      return;
    }
    
    setFormData({
      received_date: new Date().toISOString().split('T')[0],
      total_assets: '',
      actual_fee: '',
      method: 'Check',
      notes: '',
      period_selection: '',
    });
    setIsDirty(false);
    setError(null);
    if (onCancel) onCancel();
  };
  
  return (
    <div 
      ref={formRef}
      className={`
        bg-white shadow-sm rounded-lg border p-6 transition-all duration-300
        ${editingPayment 
          ? 'border-blue-500 ring-4 ring-blue-100 shadow-lg' 
          : 'border-gray-200'
        }
      `}
    >
      <h3 className="text-lg font-medium text-gray-900 mb-4">
        {editingPayment ? 'Edit Payment' : 'Record New Payment'}
      </h3>
      
      {error && (
        <div className="mb-4 bg-red-50 border border-red-200 rounded-md p-3">
          <p className="text-sm text-red-800">{error}</p>
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {/* Received Date */}
          <div>
            <label htmlFor="received_date" className="block text-sm font-medium text-gray-700">
              Received Date <span className="text-red-500">*</span>
            </label>
            <input
              ref={firstInputRef}
              type="date"
              id="received_date"
              name="received_date"
              value={formData.received_date}
              onChange={handleInputChange}
              required
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
            />
          </div>
          
          {/* Payment Amount */}
          <div>
            <label htmlFor="actual_fee" className="block text-sm font-medium text-gray-700">
              Payment Amount <span className="text-red-500">*</span>
            </label>
            <div className="mt-1 relative rounded-md shadow-sm">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <span className="text-gray-500 sm:text-sm">$</span>
              </div>
              <input
                type="number"
                id="actual_fee"
                name="actual_fee"
                value={formData.actual_fee}
                onChange={handleInputChange}
                required
                step="0.01"
                min="0"
                placeholder="0.00"
                className="pl-7 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
              />
            </div>
          </div>
          
          {/* AUM */}
          <div>
            <label htmlFor="total_assets" className="block text-sm font-medium text-gray-700">
              AUM (Assets Under Management)
            </label>
            <div className="mt-1 relative rounded-md shadow-sm">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <span className="text-gray-500 sm:text-sm">$</span>
              </div>
              <input
                type="number"
                id="total_assets"
                name="total_assets"
                value={formData.total_assets}
                onChange={handleInputChange}
                step="0.01"
                min="0"
                placeholder="0.00"
                className="pl-7 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
              />
            </div>
          </div>
          
          {/* Payment Method */}
          <div>
            <label htmlFor="method" className="block text-sm font-medium text-gray-700">
              Payment Method <span className="text-red-500">*</span>
            </label>
            <select
              id="method"
              name="method"
              value={formData.method}
              onChange={handleInputChange}
              required
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
            >
              {PAYMENT_METHODS.map(method => (
                <option key={method.value} value={method.value}>
                  {method.label}
                </option>
              ))}
            </select>
          </div>
          
          {/* Applied Period */}
          <div>
            <label htmlFor="period_selection" className="block text-sm font-medium text-gray-700">
              Applied Period <span className="text-red-500">*</span>
            </label>
            <select
              id="period_selection"
              name="period_selection"
              value={formData.period_selection}
              onChange={handleInputChange}
              required
              disabled={periodsLoading || periods.length === 0}
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm disabled:bg-gray-100 disabled:cursor-not-allowed"
            >
              <option value="">Select a period</option>
              {periods.map(period => (
                <option key={period.value} value={period.value}>
                  {period.label}
                </option>
              ))}
            </select>
            {periodsLoading && (
              <p className="mt-1 text-sm text-gray-500">Loading periods...</p>
            )}
            {!periodsLoading && periods.length === 0 && (
              <p className="mt-1 text-sm text-yellow-600">No available periods found</p>
            )}
          </div>
          
          {/* Expected Fee (display only) */}
          {expectedFee !== null && (
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Expected Fee
              </label>
              <div className="mt-1 text-sm text-gray-900 bg-gray-50 rounded-md px-3 py-2 border border-gray-300">
                ${expectedFee.toFixed(2)}
              </div>
            </div>
          )}
        </div>
        
        {/* Notes */}
        <div>
          <label htmlFor="notes" className="block text-sm font-medium text-gray-700">
            Notes
          </label>
          <textarea
            id="notes"
            name="notes"
            value={formData.notes}
            onChange={handleInputChange}
            rows={3}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
            placeholder="Optional notes about this payment"
          />
        </div>
        
        {/* Form Actions */}
        <div className="flex justify-end space-x-3 pt-4">
          <button
            type="button"
            onClick={handleClear}
            className="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            {editingPayment ? 'Cancel' : 'Clear'}
          </button>
          <button
            type="submit"
            disabled={isSubmitting}
            className="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:bg-gray-400 disabled:cursor-not-allowed"
          >
            {isSubmitting ? 'Saving...' : (editingPayment ? 'Update Payment' : 'Record Payment')}
          </button>
        </div>
      </form>
    </div>
  );
};

export default PaymentForm;
```

### src\components\payment\PaymentHistory.tsx ###

```
// frontend/src/components/payment/PaymentHistory.tsx
import React, { useState, useMemo } from 'react';
import { Payment } from '@/hooks/usePayments';
import { formatCurrency } from '@/utils/formatters';
import { formatPeriodDisplay } from '@/utils/periodFormatting';

interface PaymentHistoryProps {
  payments: Payment[];
  loading: boolean;
  error: string | null;
  onEdit: (payment: Payment) => void;
  onDelete: (paymentId: number) => void;
  selectedYear: number | null;
  onYearChange: (year: number | null) => void;
}

const PaymentHistory: React.FC<PaymentHistoryProps> = ({
  payments,
  loading,
  error,
  onEdit,
  onDelete,
  selectedYear,
  onYearChange,
}) => {
  const [deletingId, setDeletingId] = useState<number | null>(null);
  
  // Get unique years from payments for filter
  const availableYears = useMemo(() => {
    const years = new Set(payments.map(p => p.applied_year));
    return Array.from(years).sort((a, b) => b - a);
  }, [payments]);
  
  const formatPeriod = (payment: Payment) => {
    return formatPeriodDisplay(payment.applied_period, payment.applied_year, payment.applied_period_type as 'monthly' | 'quarterly');
  };
  
  const shouldShowVarianceIndicator = (variancePercent: number | null | undefined) => {
    return variancePercent !== null && variancePercent !== undefined && Math.abs(variancePercent) > 10;
  };
  
  const handleDelete = async (paymentId: number) => {
    if (!confirm('Are you sure you want to delete this payment? This action cannot be undone.')) {
      return;
    }
    
    setDeletingId(paymentId);
    try {
      await onDelete(paymentId);
    } finally {
      setDeletingId(null);
    }
  };
  
  if (loading) {
    return (
      <div className="bg-white shadow-sm rounded-lg border border-gray-200 p-6">
        <div className="animate-pulse">
          <div className="h-6 bg-gray-200 rounded w-1/4 mb-4"></div>
          <div className="space-y-3">
            {[1, 2, 3].map(i => (
              <div key={i} className="h-16 bg-gray-100 rounded"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }
  
  if (error) {
    return (
      <div className="bg-white shadow-sm rounded-lg border border-gray-200 p-6">
        <div className="bg-red-50 border border-red-200 rounded-md p-4">
          <p className="text-sm text-red-800">{error}</p>
        </div>
      </div>
    );
  }
  
  return (
    <div className="bg-white shadow-sm rounded-lg border border-gray-200">
      <div className="px-6 py-4 border-b border-gray-200">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-medium text-gray-900">Payment History</h3>
          {availableYears.length > 0 && (
            <select
              value={selectedYear || ''}
              onChange={(e) => onYearChange(e.target.value ? Number(e.target.value) : null)}
              className="block rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
            >
              <option value="">All Years</option>
              {availableYears.map(year => (
                <option key={year} value={year}>{year}</option>
              ))}
            </select>
          )}
        </div>
      </div>
      
      {payments.length === 0 ? (
        <div className="px-6 py-12 text-center">
          <svg
            className="mx-auto h-12 w-12 text-gray-400"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
            />
          </svg>
          <h3 className="mt-2 text-sm font-medium text-gray-900">No payments found</h3>
          <p className="mt-1 text-sm text-gray-500">
            {selectedYear ? `No payments recorded for ${selectedYear}` : 'Get started by recording a new payment above.'}
          </p>
        </div>
      ) : (
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Date
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Provider
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Applied Period
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Payment
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Expected
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Variance
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  AUM
                </th>
                <th className="relative px-6 py-3">
                  <span className="sr-only">Actions</span>
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {payments.map((payment) => (
                <tr key={payment.payment_id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {new Date(payment.received_date).toLocaleDateString()}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {payment.provider_name || 'N/A'}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {formatPeriod(payment)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {formatCurrency(payment.actual_fee)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {formatCurrency(payment.expected_fee)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm">
                    {payment.variance_amount !== undefined && payment.variance_amount !== null ? (
                      <span className="text-gray-900">
                        {formatCurrency(payment.variance_amount)}
                        {payment.variance_percent !== undefined && payment.variance_percent !== null && (
                          <span className="text-xs ml-1">
                            ({payment.variance_percent.toFixed(1)}%)
                          </span>
                        )}
                        {shouldShowVarianceIndicator(payment.variance_percent) && (
                          <span className="text-amber-500 ml-1">•</span>
                        )}
                      </span>
                    ) : (
                      <span className="text-gray-400">N/A</span>
                    )}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {formatCurrency(payment.total_assets)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <div className="flex items-center justify-end space-x-2">
                      {payment.has_files && (
                        <button
                          type="button"
                          className="text-gray-400 hover:text-gray-600"
                          title="Has attached files"
                        >
                          <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                          </svg>
                        </button>
                      )}
                      <button
                        onClick={() => onEdit(payment)}
                        className="text-blue-600 hover:text-blue-900"
                      >
                        Edit
                      </button>
                      <button
                        onClick={() => handleDelete(payment.payment_id)}
                        disabled={deletingId === payment.payment_id}
                        className="text-red-600 hover:text-red-900 disabled:text-gray-400 disabled:cursor-not-allowed"
                      >
                        {deletingId === payment.payment_id ? 'Deleting...' : 'Delete'}
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
};

export default PaymentHistory;
```

### src\hooks\useClientDashboard.ts ###

```
// src/hooks/useClientDashboard.ts
import { useEffect, useState } from 'react';
import { useDataApiClient } from '../api/client';
import { getErrorMessage } from '../utils/errorUtils';

// New consolidated dashboard view data
export interface DashboardViewData {
  // Client info
  client_id: number;
  display_name: string;
  full_name: string;
  ima_signed_date: string | null;
  
  // Contract info
  contract_id: number;
  contract_number: string | null;
  provider_name: string;
  num_people: number | null;
  payment_schedule: 'monthly' | 'quarterly';
  fee_type: 'percentage' | 'flat';
  percent_rate: number | null;
  flat_rate: number | null;
  
  // AUM and estimation
  aum: number | null;
  aum_estimated: number | null;
  aum_source: 'recorded' | 'estimated' | null;
  
  // Payment info
  last_payment_date: string | null;
  last_payment_amount: number | null;
  total_ytd_payments: number | null;
  
  // Current period
  current_period: number;
  current_year: number;
  current_period_display: string;
  current_quarter: number;
  current_quarter_payments: number;
  expected_payments_per_quarter: number;
  
  // Fee rates (already scaled)
  monthly_rate: number | null;
  quarterly_rate: number | null;
  annual_rate: number | null;
  
  // Expected fee and status
  expected_fee: number | null;
  payment_status: 'Paid' | 'Due';
  
  // Contact info
  contact_name: string | null;
  phone: string | null;
  physical_address: string | null;
}

// Dashboard Types (matching backend models)
export interface DashboardClient {
  client_id: number;
  display_name: string;
  full_name: string;
  ima_signed_date: string | null;
}

export interface DashboardContract {
  contract_id: number;
  contract_number: string | null;
  provider_name: string;
  fee_type: 'percentage' | 'flat';
  percent_rate: number | null;
  flat_rate: number | null;
  payment_schedule: 'monthly' | 'quarterly';
}

export interface DashboardPaymentStatus {
  status: 'Paid' | 'Due';
  current_period: string;
  current_period_number: number;
  current_year: number;
  last_payment_date: string | null;
  last_payment_amount: number | null;
  expected_fee: number;
}

export interface DashboardCompliance {
  status: 'compliant';
  color: 'green' | 'yellow';
  reason: string;
}

export interface DashboardPayment {
  payment_id: number;
  received_date: string;
  actual_fee: number;
  total_assets: number;
  applied_period: number;
  applied_year: number;
  applied_period_type: 'monthly' | 'quarterly';
  period_display: string;
  variance_amount: number | null;
  variance_percent: number | null;
  variance_status: 'exact' | 'acceptable' | 'warning' | 'alert' | null;
}

export interface DashboardMetrics {
  total_ytd_payments: number | null;
  avg_quarterly_payment: number;
  last_recorded_assets: number | null;
  next_payment_due: string | null;
}

export interface QuarterlySummary {
  quarter: number;
  year: number;
  total_payments: number;
  payment_count: number;
  avg_payment: number;
  expected_total: number;
}

// Legacy interfaces - kept for backward compatibility
// These map the new dashboard_view data to the old structure

export function useClientDashboard(clientId: number | null) {
  const [dashboardData, setDashboardData] = useState<DashboardViewData | null>(null);
  const [recentPayments, setRecentPayments] = useState<DashboardPayment[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const dataApiClient = useDataApiClient();

  useEffect(() => {
    if (!clientId) {
      setDashboardData(null);
      setRecentPayments([]);
      setLoading(false);
      setError(null);
      return;
    }

    let cancelled = false;

    const fetchDashboard = async () => {
      setLoading(true);
      setError(null);

      try {
        // Fetch dashboard data and recent payments in parallel
        const [dashboard, payments] = await Promise.all([
          dataApiClient.getDashboardData(clientId),
          dataApiClient.getPayments(clientId)
        ]);
        
        if (!cancelled) {
          setDashboardData(dashboard);
          // Take only the 10 most recent payments for the dashboard
          setRecentPayments(Array.isArray(payments) ? payments.slice(0, 10) : []);
        }
      } catch (err: any) {
        if (!cancelled) {
          setError(getErrorMessage(err, 'Failed to load dashboard data'));
        }
      } finally {
        if (!cancelled) {
          setLoading(false);
        }
      }
    };

    fetchDashboard();

    return () => {
      cancelled = true;
    };
  }, [clientId]);

  // Return the flat dashboard data directly - no transformation needed
  return { 
    dashboardData, 
    recentPayments, 
    loading, 
    error 
  };
}
```

### src\hooks\useContacts.ts ###

```
// src/hooks/useContacts.ts
import { useState, useEffect, useCallback } from 'react';
import { useDataApiClient } from '../api/client';
import { Contact } from '../types/contact';
import { getErrorMessage } from '../utils/errorUtils';

interface UseContactsResult {
  contacts: Contact[];
  loading: boolean;
  error: string | null;
  refreshContacts: () => Promise<void>;
  createContact: (data: Omit<Contact, 'contact_id'>) => Promise<void>;
  updateContact: (contactId: number, data: Partial<Contact>) => Promise<void>;
  deleteContact: (contactId: number) => Promise<void>;
}

export function useContacts(clientId: number | null): UseContactsResult {
  const apiClient = useDataApiClient();
  const [contacts, setContacts] = useState<Contact[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchContacts = useCallback(async () => {
    if (!clientId) {
      setContacts([]);
      setLoading(false);
      return;
    }

    try {
      setLoading(true);
      setError(null);
      const data = await apiClient.getContacts(clientId);
      setContacts(data);
    } catch (err) {
      setError(getErrorMessage(err));
      console.error('Error fetching contacts:', err);
    } finally {
      setLoading(false);
    }
  }, [apiClient, clientId]);

  const createContact = useCallback(async (data: Omit<Contact, 'contact_id'>) => {
    if (!clientId) return;
    
    try {
      setError(null);
      await apiClient.createContact({ ...data, client_id: clientId });
      await fetchContacts();
    } catch (err) {
      setError(getErrorMessage(err));
      throw err;
    }
  }, [apiClient, clientId, fetchContacts]);

  const updateContact = useCallback(async (contactId: number, data: Partial<Contact>) => {
    try {
      setError(null);
      await apiClient.updateContact(contactId, data);
      await fetchContacts();
    } catch (err) {
      setError(getErrorMessage(err));
      throw err;
    }
  }, [apiClient, fetchContacts]);

  const deleteContact = useCallback(async (contactId: number) => {
    try {
      setError(null);
      await apiClient.deleteContact(contactId);
      await fetchContacts();
    } catch (err) {
      setError(getErrorMessage(err));
      throw err;
    }
  }, [apiClient, fetchContacts]);

  useEffect(() => {
    fetchContacts();
  }, [fetchContacts]);

  return {
    contacts,
    loading,
    error,
    refreshContacts: fetchContacts,
    createContact,
    updateContact,
    deleteContact,
  };
}
```

### src\hooks\usePaymentDefaults.ts ###

```
// src/hooks/usePaymentDefaults.ts
import { useState, useEffect } from 'react';
import { useDataApiClient } from '@/api/client';
import { getErrorMessage } from '@/utils/errorUtils';

export interface PaymentDefaults {
  client_id: number;
  suggested_aum: number | null;
  current_period: number;
  current_year: number;
  payment_schedule: 'monthly' | 'quarterly';
  fee_type: 'percentage' | 'flat';
  percent_rate: number | null;
  flat_rate: number | null;
}

export function usePaymentDefaults(clientId: number | null) {
  const dataApiClient = useDataApiClient();
  const [defaults, setDefaults] = useState<PaymentDefaults | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (!clientId) {
      setDefaults(null);
      setLoading(false);
      setError(null);
      return;
    }
    
    const fetchDefaults = async () => {
      setLoading(true);
      setError(null);
      
      try {
        const response = await dataApiClient.getPaymentDefaults(clientId);
        setDefaults(response);
      } catch (err: any) {
        setError(getErrorMessage(err, 'Failed to fetch payment defaults'));
      } finally {
        setLoading(false);
      }
    };
    
    fetchDefaults();
  }, [clientId]);
  
  return { defaults, loading, error };
}
```

### src\hooks\usePayments.ts ###

```
// src/hooks/usePayments.ts
import { useState, useEffect } from 'react';
import { useDataApiClient } from '@/api/client';
import { getErrorMessage } from '@/utils/errorUtils';

export interface Payment {
  payment_id: number;
  contract_id: number;
  client_id: number;
  received_date: string;
  total_assets: number | null;
  expected_fee: number | null;
  actual_fee: number;
  method: string | null;
  notes: string | null;
  applied_period_type: string;
  applied_period: number;
  applied_year: number;
  // From joined data
  client_name?: string;
  provider_name?: string;
  fee_type?: string;
  percent_rate?: number | null;
  flat_rate?: number | null;
  payment_schedule?: string;
  has_files?: boolean;
  // From payment_history_view
  variance_amount?: number | null;
  variance_percent?: number | null;
  variance_status?: string;
}

export interface PaymentCreateData {
  contract_id: number;
  client_id: number;
  received_date: string;
  total_assets: number | null;
  expected_fee: number | null;
  actual_fee: number;
  method: string | null;
  notes: string | null;
  applied_period_type: string;
  applied_period: number;
  applied_year: number;
}

export interface PaymentUpdateData {
  received_date?: string;
  total_assets?: number | null;
  expected_fee?: number | null;
  actual_fee?: number;
  method?: string | null;
  notes?: string | null;
  applied_period_type?: string;
  applied_period?: number;
  applied_year?: number;
}

export interface UsePaymentsOptions {
  page?: number;
  limit?: number;
  year?: number | null;
}

export function usePayments(clientId: number | null, options: UsePaymentsOptions = {}) {
  const dataApiClient = useDataApiClient();
  const [payments, setPayments] = useState<Payment[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [refreshKey, setRefreshKey] = useState(0);
  
  const { year = null } = options; // Azure handles pagination

  useEffect(() => {
    if (!clientId) return;
    
    let cancelled = false;
    
    const fetchPayments = async () => {
      setLoading(true);
      setError(null);
      
      try {
        const response = await dataApiClient.getPayments(clientId, year || undefined);
        
        if (!cancelled) {
          setPayments(Array.isArray(response) ? response : []);
        }
      } catch (err: any) {
        if (!cancelled) {
          setError(getErrorMessage(err, 'Failed to fetch payments'));
        }
      } finally {
        if (!cancelled) {
          setLoading(false);
        }
      }
    };
    
    fetchPayments();
    
    return () => {
      cancelled = true;
    };
  }, [clientId, year, refreshKey]);
  
  const createPayment = async (data: PaymentCreateData) => {
    try {
      const response = await dataApiClient.createPayment(data);
      // Trigger refresh by updating key
      setRefreshKey(prev => prev + 1);
      return response;
    } catch (err: any) {
      throw new Error(err.error?.message || 'Failed to create payment');
    }
  };
  
  const updatePayment = async (paymentId: number, data: PaymentUpdateData) => {
    try {
      const response = await dataApiClient.updatePayment(paymentId, data);
      // Trigger refresh by updating key
      setRefreshKey(prev => prev + 1);
      return response;
    } catch (err: any) {
      throw new Error(err.error?.message || 'Failed to update payment');
    }
  };
  
  const deletePayment = async (paymentId: number) => {
    try {
      await dataApiClient.deletePayment(paymentId);
      // Trigger refresh by updating key
      setRefreshKey(prev => prev + 1);
    } catch (err: any) {
      throw new Error(err.error?.message || 'Failed to delete payment');
    }
  };
  
  return {
    payments,
    loading,
    error,
    createPayment,
    updatePayment,
    deletePayment,
  };
}
```

### src\hooks\usePeriods.ts ###

```
// src/hooks/usePeriods.ts
import { useState, useEffect } from 'react';
import { useDataApiClient } from '@/api/client';
import { getErrorMessage } from '@/utils/errorUtils';

// Period data from payment_form_periods_view
export interface Period {
  client_id: number;
  year: number;
  period: number;
  display_text: string;
  is_paid: number;
}

export function usePeriods(clientId: number | null) {
  const dataApiClient = useDataApiClient();
  const [periods, setPeriods] = useState<Period[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (!clientId) return;
    
    const fetchPeriods = async () => {
      setLoading(true);
      setError(null);
      
      try {
        const response = await dataApiClient.getAvailablePeriods(clientId);
        setPeriods(Array.isArray(response) ? response : []);
      } catch (err: any) {
        setError(getErrorMessage(err, 'Failed to fetch periods'));
      } finally {
        setLoading(false);
      }
    };
    
    fetchPeriods();
  }, [clientId]);
  
  // Transform to match expected format
  const formattedPeriods = periods.map(p => ({
    value: `${p.year}-${p.period}`,
    label: p.display_text,
    period: p.period,
    year: p.year,
    period_type: p.display_text.includes('Q') ? 'quarterly' : 'monthly'
  }));
  
  return {
    periods: formattedPeriods,
    loading,
    error,
  };
}
```

### src\index.css ###

```
/* frontend/src/index.css */

@tailwind base;
@tailwind components;
@tailwind utilities;

/* Minimal base styles */
@layer base {
  body {
    @apply text-gray-700 bg-gray-50 antialiased;
  }
}

/* Component styles using Tailwind */
@layer components {
  .card {
    @apply bg-white rounded-lg shadow-sm border border-gray-200;
  }
  
  .navbar-dark {
    @apply bg-dark-bg text-light-300;
  }
  
  .hover\:bg-dark-accent:hover {
    @apply bg-dark-accent;
  }
  
  .animate-fade-in {
    animation: fadeIn 0.3s ease-in-out;
  }
  
  .animate-slide-up {
    animation: slideUp 0.3s ease-out;
  }
}

/* Animations */
@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes slideUp {
  from { 
    transform: translateY(10px); 
    opacity: 0; 
  }
  to { 
    transform: translateY(0); 
    opacity: 1; 
  }
}

/* Form focus effect */
.form-focus {
  position: relative;
  z-index: 50;
}

.form-focus::before {
  content: '';
  position: fixed;
  inset: 0;
  background-color: rgba(0, 0, 0, 0.3);
  backdrop-filter: blur(2px);
  z-index: 40;
  animation: fadeIn 0.2s ease-out;
}

.form-focus > * {
  position: relative;
  z-index: 50;
  transform: translateY(0);
  transition: transform 0.2s ease-out;
  animation: cardRaise 0.3s cubic-bezier(0.19, 1, 0.22, 1);
  box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
}

@keyframes cardRaise {
  from { transform: translateY(10px); }
  to { transform: translateY(0); }
}

/* Custom scrollbar styling */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  @apply bg-light-300 rounded;
}

::-webkit-scrollbar-thumb {
  @apply bg-light-500 rounded transition-colors duration-200;
}

::-webkit-scrollbar-thumb:hover {
  @apply bg-dark-400;
}
```

### src\main.tsx ###

```
// src/main.tsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)
```

### src\pages\Contacts.tsx ###

```
// src/pages/Contacts.tsx
import React from 'react';
import ComingSoonPage from '@/components/ComingSoonPage';

const Contacts: React.FC = () => {
  return <ComingSoonPage title="Contacts" />;
};

export default Contacts;
```

### src\pages\Contracts.tsx ###

```
// src/pages/Contracts.tsx
import React from 'react';
import ComingSoonPage from '@/components/ComingSoonPage';

const Contracts: React.FC = () => {
  return <ComingSoonPage title="Contracts" />;
};

export default Contracts;
```

### src\pages\Documents.tsx ###

```
// frontend/src/pages/Documents.tsx
import React from 'react';

const Documents: React.FC = () => {
  return (
    <div className="space-y-6">
      <div className="border-b border-gray-200 pb-5">
        <h2 className="text-2xl font-bold text-gray-900">Documents</h2>
        <p className="mt-2 text-sm text-gray-600">
          View and manage client documents
        </p>
      </div>
      
      <div className="bg-white shadow rounded-lg p-12">
        <div className="text-center">
          <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
          <h3 className="mt-2 text-lg font-medium text-gray-900">Document Management</h3>
          <p className="mt-1 text-sm text-gray-500">
            This feature is coming soon. Document viewing and management functionality will be added in a future update.
          </p>
        </div>
      </div>
    </div>
  );
};

export default Documents; 
```

### src\pages\Export.tsx ###

```
// src/pages/Export.tsx
import React from 'react';
import ComingSoonPage from '@/components/ComingSoonPage';

const Export: React.FC = () => {
  return <ComingSoonPage title="Export" />;
};

export default Export;
```

### src\pages\Payments.tsx ###

```
// frontend/src/pages/Payments.tsx
import React, { useState } from 'react';
import useAppStore from '@/stores/useAppStore';
import { useClientDashboard } from '@/hooks/useClientDashboard';
import { usePayments, Payment, PaymentCreateData, PaymentUpdateData } from '@/hooks/usePayments';
import { PlanDetailsCard } from '@/components/dashboard/cards/PlanDetailsCard';
import { CurrentStatusCard } from '@/components/dashboard/cards/CurrentStatusCard';
import { AssetsAndFeesCard } from '@/components/dashboard/cards/AssetsAndFeesCard';
import { ContactCard } from '@/components/dashboard/cards/ContactCard';
import PaymentForm from '@/components/payment/PaymentForm';
import PaymentHistory from '@/components/payment/PaymentHistory';
import ErrorBoundary from '@/components/ErrorBoundary';
import { ErrorAlert, WarningAlert } from '@/components/Alert';

const getErrorMessage = (error: any): string => {
  if (typeof error === 'string') return error;
  if (error?.error) return error.error;
  if (error?.message) return error.message;
  return 'An error occurred';
};

const Payments: React.FC = () => {
  const selectedClient = useAppStore((state) => state.selectedClient);
  const documentViewerOpen = useAppStore((state) => state.documentViewerOpen);
  const { dashboardData, loading, error } = useClientDashboard(selectedClient?.client_id || null);
  
  // Payment form and history state
  const [editingPayment, setEditingPayment] = useState<Payment | null>(null);
  const [selectedYear, setSelectedYear] = useState<number | null>(null);
  
  // Payment hooks
  const {
    payments,
    loading: paymentsLoading,
    error: paymentsError,
    createPayment,
    updatePayment,
    deletePayment,
  } = usePayments(selectedClient?.client_id || null, { year: selectedYear });
  
  return (
    <div className="space-y-6">
      {selectedClient ? (
        <>
          {/* Client name header - Updated to match Version A */}
          <div className="flex items-center justify-between mb-8">
            <div>
              <div>
                {selectedClient.full_name && (
                  <div className="text-sm text-gray-600 mb-1 uppercase tracking-wider">
                    {selectedClient.full_name}
                  </div>
                )}
                <h1 className="text-2xl font-bold text-gray-900">
                  {selectedClient.display_name}
                </h1>
                <div className="h-1 w-full mt-2 bg-gradient-to-r from-blue-600 to-blue-200 rounded-full"></div>
              </div>
            </div>
            <button
              onClick={() => useAppStore.getState().toggleDocumentViewer()}
              className={`
                flex items-center gap-2 px-4 py-2.5 rounded-lg shadow-sm transition-all duration-200
                ${documentViewerOpen
                  ? 'bg-blue-600 text-white hover:bg-blue-700 shadow-md'
                  : 'bg-white border border-gray-200 text-gray-800 hover:bg-gray-50 hover:border-blue-400'}
              `}
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="18"
                height="18"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
                className={documentViewerOpen ? 'text-white' : 'text-blue-500'}
              >
                <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                <polyline points="14 2 14 8 20 8"></polyline>
                <line x1="16" y1="13" x2="8" y2="13"></line>
                <line x1="16" y1="17" x2="8" y2="17"></line>
                <polyline points="10 9 9 9 8 9"></polyline>
              </svg>
              <span className="font-medium">{documentViewerOpen ? "Hide Documents" : "View Documents"}</span>
            </button>
          </div>

          {/* Error state */}
          {error && (
            <ErrorAlert message={getErrorMessage(error)} />
          )}

          {/* Dashboard cards - New 4-card layout with better spacing */}
          <div className={`grid gap-4 ${
            documentViewerOpen 
              ? 'lg:grid-cols-2 xl:grid-cols-2' 
              : 'lg:grid-cols-2 xl:grid-cols-4'
          } grid-cols-1 sm:grid-cols-2`}>
            {dashboardData && !loading && (
              <>
                <ErrorBoundary>
                  <PlanDetailsCard dashboardData={dashboardData} />
                </ErrorBoundary>
                <ErrorBoundary>
                  <CurrentStatusCard dashboardData={dashboardData} />
                </ErrorBoundary>
                <ErrorBoundary>
                  <AssetsAndFeesCard dashboardData={dashboardData} />
                </ErrorBoundary>
                <ErrorBoundary>
                  <ContactCard dashboardData={dashboardData} />
                </ErrorBoundary>
              </>
            )}
            {(loading || (!dashboardData && !error)) && (
              <>
                {/* Loading skeletons for 4 cards */}
                {[1, 2, 3, 4].map((index) => (
                  <div key={index} className="bg-white rounded-lg shadow-sm p-6 h-full animate-pulse">
                    <div className="flex items-center mb-4">
                      <div className="w-8 h-8 bg-gray-200 rounded mr-3"></div>
                      <div className="h-6 w-32 bg-gray-200 rounded"></div>
                    </div>
                    <div className="space-y-2">
                      <div className="h-5 w-full bg-gray-200 rounded"></div>
                      <div className="h-5 w-3/4 bg-gray-200 rounded"></div>
                      <div className="h-5 w-1/2 bg-gray-200 rounded"></div>
                    </div>
                  </div>
                ))}
              </>
            )}
          </div>

          {/* Payment Form and History - Fixed TypeScript error */}
          <div className="space-y-6 relative">
            {/* Overlay when editing */}
            {editingPayment && (
              <div className="fixed inset-0 bg-black bg-opacity-10 z-10 pointer-events-none" />
            )}
            
            <ErrorBoundary>
              <div className={editingPayment ? 'relative z-20' : ''}>
                <PaymentForm
                  clientId={selectedClient.client_id}
                  contractId={dashboardData?.contract_id || null}
                  editingPayment={editingPayment}
                  onSubmit={async (data) => {
                    if (editingPayment) {
                      await updatePayment(editingPayment.payment_id, data as PaymentUpdateData);
                    } else {
                      await createPayment(data as PaymentCreateData);
                    }
                    setEditingPayment(null);
                  }}
                  onCancel={() => setEditingPayment(null)}
                />
              </div>
            </ErrorBoundary>
            
            <ErrorBoundary>
              <div className={editingPayment ? 'opacity-50 pointer-events-none' : ''}>
                <PaymentHistory
                  payments={payments}
                  loading={paymentsLoading}
                  error={paymentsError}
                  onEdit={setEditingPayment}
                  onDelete={deletePayment}
                  selectedYear={selectedYear}
                  onYearChange={setSelectedYear}
                />
              </div>
            </ErrorBoundary>
          </div>
        </>
      ) : (
        <WarningAlert 
          title="No client selected" 
          message="Please select a client from the sidebar to view payment information." 
        />
      )}
    </div>
  );
};

export default Payments;
```

### src\pages\Summary.tsx ###

```
// src/pages/Summary.tsx
import React, { useState, useEffect, useCallback } from 'react';
import { Link, useSearchParams } from 'react-router-dom';
import { 
  ChevronRight, 
  ChevronDown, 
  Check, 
  Square, 
  CheckSquare,
  Download,
  FileText,
  ChevronLeft,
  FileSpreadsheet,
  FileDown
} from 'lucide-react';
import { dataApiClient } from '@/api/client';
import { Alert } from '@/components/Alert';

// Interfaces for the new page-ready views
interface QuarterlyPageData {
  // Provider-level fields
  provider_name: string;
  provider_client_count: number;
  provider_actual_total: number;
  provider_expected_total: number;
  provider_variance: number;
  clients_posted: number;
  total_clients: number;
  provider_posted_display: string; // e.g., "2/3"
  
  // Client-level fields
  client_id: number;
  display_name: string;
  payment_schedule: string;
  fee_type: string;
  percent_rate: number | null;
  flat_rate: number | null;
  quarterly_rate: number; // Pre-calculated rate for display
  client_expected: number;
  client_actual: number;
  client_variance: number;
  client_variance_percent: number | null;
  variance_status: string;
  payment_count: number;
  expected_payment_count: number;
  payment_status_display: string; // e.g., "2/3"
  fully_posted: number;
  has_notes: number;
  quarterly_notes: string | null;
  posted_count: number;
  is_posted: boolean; // Simple boolean marker from the companion table
  
  // Period identifiers
  applied_year: number;
  quarter: number;
  
  row_type: 'client'; // Always 'client' for now
}

interface AnnualPageData {
  // Provider-level fields
  provider_name: string;
  provider_client_count: number;
  provider_q1_total: number;
  provider_q2_total: number;
  provider_q3_total: number;
  provider_q4_total: number;
  provider_annual_total: number;
  
  // Client-level fields
  client_id: number;
  display_name: string;
  payment_schedule: string;
  fee_type: string;
  percent_rate: number | null;
  flat_rate: number | null;
  annual_rate: number; // Pre-calculated annual rate
  q1_actual: number;
  q2_actual: number;
  q3_actual: number;
  q4_actual: number;
  q1_payments: number;
  q2_payments: number;
  q3_payments: number;
  q4_payments: number;
  client_annual_total: number;
  client_annual_expected: number;
  client_annual_variance: number;
  client_annual_variance_percent: number | null;
  fully_posted: number;
  total_payments: number;
  total_expected_payments: number;
  
  // Period identifier
  applied_year: number;
  
  row_type: 'client'; // Always 'client' for now
}

interface ProviderGroup<T> {
  provider_name: string;
  clients: T[];
  isExpanded: boolean;
  // Provider-level totals (from first client in group)
  providerData?: T;
}

interface QuarterlySummaryDetail {
  provider_name: string;
  client_id: number;
  display_name: string;
  payment_schedule: string;
  fee_type: string;
  percent_rate: number | null;
  flat_rate: number | null;
  year: number;
  quarter: number;
  period: number;  // Changed from applied_period to match DB view
  period_type: string;  // Changed from applied_period_type to match DB view
  payment_id: number | null; // NULL for missing payments
  received_date: string | null;
  actual_fee: number;
  expected_fee: number | null;
  total_assets: number | null;
  method: string | null;
  posted_to_hwm: boolean;
  variance_status: string | null;
}

const Summary: React.FC = () => {
  const [searchParams, setSearchParams] = useSearchParams();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // URL parameters with arrears logic
  const now = new Date();
  const defaultYear = (() => {
    const currentMonth = now.getMonth() + 1; // 1-12
    const currentQ = Math.ceil(currentMonth / 3); // 1-4
    // If we're in Q1, we bill for Q4 of previous year
    if (currentQ === 1) {
      return now.getFullYear() - 1;
    }
    return now.getFullYear();
  })();
  const currentYear = parseInt(searchParams.get('year') || defaultYear.toString());
  
  // Arrears logic: default to previous quarter (billing is for the quarter that just ended)
  const defaultQuarter = (() => {
    const currentMonth = now.getMonth() + 1; // 1-12
    const currentQ = Math.ceil(currentMonth / 3); // 1-4
    if (currentQ === 1) {
      // If we're in Q1, we bill for Q4 of previous year
      return 4;
    }
    return currentQ - 1;
  })();
  const currentQuarter = parseInt(searchParams.get('quarter') || defaultQuarter.toString());
  const viewMode = searchParams.get('view') || 'quarterly';
  
  // Data state
  const [quarterlyGroups, setQuarterlyGroups] = useState<ProviderGroup<QuarterlyPageData>[]>([]);
  const [annualGroups, setAnnualGroups] = useState<ProviderGroup<AnnualPageData>[]>([]);
  const [expandedClients, setExpandedClients] = useState<Set<number>>(new Set());
  const [paymentDetails, setPaymentDetails] = useState<Map<number, QuarterlySummaryDetail[]>>(new Map());
  const [editingNote, setEditingNote] = useState<{ clientId: number; note: string } | null>(null);
  const [showExportMenu, setShowExportMenu] = useState(false);

  // Navigation functions
  const navigateQuarter = (direction: 'prev' | 'next') => {
    let newQuarter = currentQuarter;
    let newYear = currentYear;
    
    if (direction === 'prev') {
      if (currentQuarter === 1) {
        newQuarter = 4;
        newYear--;
      } else {
        newQuarter--;
      }
    } else {
      if (currentQuarter === 4) {
        newQuarter = 1;
        newYear++;
      } else {
        newQuarter++;
      }
    }
    
    setSearchParams({ year: newYear.toString(), quarter: newQuarter.toString(), view: viewMode });
  };

  const navigateYear = (direction: 'prev' | 'next') => {
    const newYear = direction === 'prev' ? currentYear - 1 : currentYear + 1;
    setSearchParams({ year: newYear.toString(), view: viewMode });
  };

  const toggleViewMode = () => {
    const newMode = viewMode === 'quarterly' ? 'annual' : 'quarterly';
    if (newMode === 'quarterly') {
      setSearchParams({ year: currentYear.toString(), quarter: currentQuarter.toString(), view: newMode });
    } else {
      setSearchParams({ year: currentYear.toString(), view: newMode });
    }
  };

  // Load data using the new page-ready views
  const loadData = useCallback(async () => {
    setLoading(true);
    setError(null);
    
    try {
      if (viewMode === 'quarterly') {
        // Load quarterly data from the new view
        const data = await dataApiClient.getQuarterlyPageData(currentYear, currentQuarter) as QuarterlyPageData[];
        
        // Group by provider (data comes flat, we need to group for display)
        const grouped = data.reduce((acc, row) => {
          let group = acc.find(g => g.provider_name === row.provider_name);
          if (!group) {
            group = {
              provider_name: row.provider_name,
              clients: [],
              isExpanded: true,
              providerData: row // Store first row as provider data
            };
            acc.push(group);
          }
          group.clients.push(row);
          return acc;
        }, [] as ProviderGroup<QuarterlyPageData>[]);
        
        setQuarterlyGroups(grouped);
      } else {
        // Load annual data from the new view
        const data = await dataApiClient.getAnnualPageData(currentYear) as AnnualPageData[];
        
        // Group by provider
        const grouped = data.reduce((acc, row) => {
          let group = acc.find(g => g.provider_name === row.provider_name);
          if (!group) {
            group = {
              provider_name: row.provider_name,
              clients: [],
              isExpanded: true,
              providerData: row // Store first row as provider data
            };
            acc.push(group);
          }
          group.clients.push(row);
          return acc;
        }, [] as ProviderGroup<AnnualPageData>[]);
        
        setAnnualGroups(grouped);
      }
    } catch (err) {
      console.error('Failed to load summary data:', err);
      setError('Failed to load summary data. Please try again.');
    } finally {
      setLoading(false);
    }
  }, [currentYear, currentQuarter, viewMode]);

  useEffect(() => {
    loadData();
  }, [loadData]);

  // Close export menu when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      const target = event.target as HTMLElement;
      if (!target.closest('.export-menu-container')) {
        setShowExportMenu(false);
      }
    };

    if (showExportMenu) {
      document.addEventListener('click', handleClickOutside);
      return () => document.removeEventListener('click', handleClickOutside);
    }
  }, [showExportMenu]);

  // Toggle provider expansion
  const toggleProvider = (providerName: string) => {
    if (viewMode === 'quarterly') {
      setQuarterlyGroups(prev => prev.map(provider => 
        provider.provider_name === providerName 
          ? { ...provider, isExpanded: !provider.isExpanded }
          : provider
      ));
    } else {
      setAnnualGroups(prev => prev.map(provider => 
        provider.provider_name === providerName 
          ? { ...provider, isExpanded: !provider.isExpanded }
          : provider
      ));
    }
  };

  // Toggle client expansion
  const toggleClient = async (clientId: number) => {
    const newExpanded = new Set(expandedClients);
    
    if (newExpanded.has(clientId)) {
      newExpanded.delete(clientId);
    } else {
      newExpanded.add(clientId);
      
      // Load payment details if not already loaded (only for quarterly view)
      if (viewMode === 'quarterly' && !paymentDetails.has(clientId)) {
        try {
          console.log(`Loading payment details for client ${clientId}, year ${currentYear}, quarter ${currentQuarter}`);
          const details = await dataApiClient.getQuarterlySummaryDetail(clientId, currentYear, currentQuarter) as QuarterlySummaryDetail[];
          console.log(`Received ${details.length} payment details:`, details);
          setPaymentDetails(prev => new Map(prev).set(clientId, details));
        } catch (err) {
          console.error(`Failed to load payment details for client ${clientId}:`, err);
        }
      }
    }
    
    setExpandedClients(newExpanded);
  };

  // Format payment detail line
  const formatPaymentLine = (payment: QuarterlySummaryDetail) => {
    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    
    const period = payment.period_type === 'monthly' 
      ? months[payment.period - 1]
      : `Q${payment.period}`;
      
    if (!payment.payment_id) {
      return `${period}: Missing Payment`;
    }
      
    const amount = Math.round(payment.actual_fee);
    const date = new Date(payment.received_date!).toLocaleDateString('en-US', 
      { month: '2-digit', day: '2-digit' }
    );
    
    return `${period}: $${amount.toLocaleString()} paid ${date} via ${payment.method}`;
  };

  // Update posted status - simple toggle for internal marking
  const updatePostedStatus = async (clientId: number, currentStatus: boolean) => {
    try {
      await dataApiClient.updateClientQuarterMarker(clientId, currentYear, currentQuarter, !currentStatus);
      await loadData(); // Reload to update the display
    } catch (err) {
      console.error('Failed to update posted status:', err);
    }
  };

  // Save note
  const saveNote = async () => {
    if (!editingNote) return;
    
    try {
      await dataApiClient.updateQuarterlyNote(
        editingNote.clientId, 
        currentYear, 
        currentQuarter, 
        editingNote.note
      );
      
      // Reload data to get updated notes
      await loadData();
      setEditingNote(null);
    } catch (err) {
      console.error('Failed to save note:', err);
    }
  };

  // Handle export
  const handleExport = async (format: 'csv' | 'excel') => {
    setShowExportMenu(false);
    
    try {
      const Papa = (await import('papaparse')).default;
      const XLSX = format === 'excel' ? await import('xlsx') : null;
      
      // Build export data
      const exportRows: any[] = [];
      
      // Add title row
      const title = viewMode === 'quarterly' 
        ? `Q${currentQuarter} ${currentYear} Payment Summary`
        : `${currentYear} Annual Payment Summary`;
      
      // Build header row based on view mode
      const headers = viewMode === 'quarterly'
        ? ['Client', 'Frequency', 'Quarterly Rate', 'Expected', 'Actual', 'Variance', 'Status', 'Posted', 'Notes']
        : ['Client', 'Frequency', 'Annual Rate', 'Q1 ' + currentYear, 'Q2 ' + currentYear, 'Q3 ' + currentYear, 'Q4 ' + currentYear, 'Total'];
      
      // Process provider groups
      const groups = viewMode === 'quarterly' ? quarterlyGroups : annualGroups;
      
      groups.forEach(provider => {
        const providerData = provider.providerData;
        if (!providerData) return;
        
        // Provider row
        const providerRow: any = {
          Client: provider.provider_name.toUpperCase(),
          Frequency: '',
        };
        
        if (viewMode === 'quarterly') {
          const qData = providerData as QuarterlyPageData;
          providerRow['Quarterly Rate'] = '';
          providerRow.Expected = qData.provider_expected_total.toFixed(2);
          providerRow.Actual = qData.provider_actual_total.toFixed(2);
          providerRow.Variance = qData.provider_variance.toFixed(2);
          providerRow.Status = qData.provider_posted_display;
          providerRow.Posted = qData.clients_posted === qData.total_clients ? 'Y' : 'N';
          providerRow.Notes = '';
        } else {
          const aData = providerData as AnnualPageData;
          providerRow['Annual Rate'] = '';
          providerRow['Q1 ' + currentYear] = aData.provider_q1_total.toFixed(2);
          providerRow['Q2 ' + currentYear] = aData.provider_q2_total.toFixed(2);
          providerRow['Q3 ' + currentYear] = aData.provider_q3_total.toFixed(2);
          providerRow['Q4 ' + currentYear] = aData.provider_q4_total.toFixed(2);
          providerRow.Total = aData.provider_annual_total.toFixed(2);
        }
        
        exportRows.push(providerRow);
        
        // Client rows
        provider.clients.forEach(client => {
          const clientRow: any = {
            Client: `  ${client.display_name}`,
            Frequency: client.payment_schedule === 'monthly' ? 'Monthly' : 'Quarterly',
          };
          
          if (viewMode === 'quarterly') {
            const qClient = client as QuarterlyPageData;
            const rateDisplay = qClient.fee_type === 'percentage' 
              ? `${qClient.quarterly_rate}%`
              : `$${qClient.quarterly_rate.toLocaleString()}`;
            
            clientRow['Quarterly Rate'] = rateDisplay;
            clientRow.Expected = qClient.client_expected.toFixed(2);
            clientRow.Actual = qClient.client_actual.toFixed(2);
            clientRow.Variance = qClient.client_variance.toFixed(2);
            clientRow.Status = qClient.payment_status_display;
            clientRow.Posted = qClient.is_posted ? 'Y' : 'N';
            clientRow.Notes = qClient.quarterly_notes || '';
          } else {
            const aClient = client as AnnualPageData;
            const rateDisplay = aClient.fee_type === 'percentage' 
              ? `${aClient.annual_rate}%`
              : `$${aClient.annual_rate.toLocaleString()}`;
            
            clientRow['Annual Rate'] = rateDisplay;
            clientRow['Q1 ' + currentYear] = aClient.q1_actual.toFixed(2);
            clientRow['Q2 ' + currentYear] = aClient.q2_actual.toFixed(2);
            clientRow['Q3 ' + currentYear] = aClient.q3_actual.toFixed(2);
            clientRow['Q4 ' + currentYear] = aClient.q4_actual.toFixed(2);
            clientRow.Total = aClient.client_annual_total.toFixed(2);
          }
          
          exportRows.push(clientRow);
        });
      });
      
      // Generate and download file
      const filename = viewMode === 'quarterly' 
        ? `summary-${currentYear}-Q${currentQuarter}`
        : `summary-${currentYear}-annual`;
      
      if (format === 'csv') {
        const csv = Papa.unparse(exportRows, { header: true });
        const blob = new Blob([title + '\n\n' + csv], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = `${filename}.csv`;
        link.click();
      } else if (format === 'excel' && XLSX) {
        // Add title as first row
        const titleRow: any = {};
        headers.forEach((header, index) => {
          titleRow[header] = index === 0 ? title : '';
        });
        
        const allRows = [titleRow, ...exportRows];
        const ws = XLSX.utils.json_to_sheet(allRows, { header: headers, skipHeader: false });
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, 'Summary');
        XLSX.writeFile(wb, `${filename}.xlsx`);
      }
    } catch (err) {
      console.error('Export failed:', err);
      setError('Export failed. Please make sure required libraries are installed.');
    }
  };

  // Show amber dot for variance >10%
  const getVarianceIndicator = (variancePercent: number | null | undefined) => {
    if (variancePercent !== null && variancePercent !== undefined && Math.abs(variancePercent) > 10) {
      return <span className="text-amber-500 ml-1">•</span>;
    }
    return null;
  };

  // Calculate totals
  const totals = (() => {
    if (viewMode === 'quarterly') {
      return quarterlyGroups.reduce((acc, provider) => {
        const data = provider.providerData;
        if (data) {
          return {
            expected: acc.expected + data.provider_expected_total,
            actual: acc.actual + data.provider_actual_total,
            variance: acc.variance + data.provider_variance
          };
        }
        return acc;
      }, { expected: 0, actual: 0, variance: 0 });
    } else {
      return annualGroups.reduce((acc, provider) => {
        const data = provider.providerData;
        if (data) {
          return {
            expected: acc.expected + provider.clients.reduce((sum, c) => sum + c.client_annual_expected, 0),
            actual: acc.actual + data.provider_annual_total,
            variance: acc.variance + provider.clients.reduce((sum, c) => sum + c.client_annual_variance, 0)
          };
        }
        return acc;
      }, { expected: 0, actual: 0, variance: 0 });
    }
  })();

  const collectionRate = totals.expected > 0 ? (totals.actual / totals.expected * 100) : 0;

  if (loading) {
    return (
      <div className="p-6">
        <div className="text-center py-12">
          <h2 className="text-xl font-medium text-gray-600">Loading summary data...</h2>
        </div>
      </div>
    );
  }

  const providerGroups = viewMode === 'quarterly' ? quarterlyGroups : annualGroups;

  return (
    <div className="p-6 max-w-7xl mx-auto">
      {error && (
        <Alert variant="error" message={error} className="mb-4" />
      )}

      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-900">
          {viewMode === 'quarterly' ? 'Quarterly' : 'Annual'} Payment Summary
        </h1>
      </div>

      {/* Navigation Controls */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center gap-4">
          {viewMode === 'quarterly' ? (
            <>
              <button 
                onClick={() => navigateQuarter('prev')}
                className="p-2 hover:bg-gray-100 rounded"
              >
                <ChevronLeft className="w-5 h-5" />
              </button>
              <div className="text-lg font-medium">
                Q{currentQuarter} {currentYear}
              </div>
              <button 
                onClick={() => navigateQuarter('next')}
                className="p-2 hover:bg-gray-100 rounded"
              >
                <ChevronRight className="w-5 h-5" />
              </button>
            </>
          ) : (
            <>
              <button 
                onClick={() => navigateYear('prev')}
                className="p-2 hover:bg-gray-100 rounded"
              >
                <ChevronLeft className="w-5 h-5" />
              </button>
              <div className="text-lg font-medium">
                {currentYear}
              </div>
              <button 
                onClick={() => navigateYear('next')}
                className="p-2 hover:bg-gray-100 rounded"
              >
                <ChevronRight className="w-5 h-5" />
              </button>
            </>
          )}
        </div>
        
        <div className="flex items-center gap-4">
          <button
            onClick={toggleViewMode}
            className="px-4 py-2 bg-white border border-gray-300 rounded-md hover:bg-gray-50 text-sm font-medium"
          >
            {viewMode === 'quarterly' ? 'Year View' : 'Quarter View'}
          </button>
          <div className="relative export-menu-container">
            <button 
              onClick={() => setShowExportMenu(!showExportMenu)}
              className="px-4 py-2 bg-white border border-gray-300 rounded-md hover:bg-gray-50 text-sm font-medium flex items-center gap-2"
            >
              <Download className="w-4 h-4" />
              Export
            </button>
            {showExportMenu && (
              <div className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg border border-gray-200 z-10">
                <button
                  onClick={() => handleExport('csv')}
                  className="w-full px-4 py-2 text-left text-sm hover:bg-gray-50 flex items-center gap-2"
                >
                  <FileDown className="w-4 h-4" />
                  Download as CSV
                </button>
                <button
                  onClick={() => handleExport('excel')}
                  className="w-full px-4 py-2 text-left text-sm hover:bg-gray-50 flex items-center gap-2"
                >
                  <FileSpreadsheet className="w-4 h-4" />
                  Download as Excel
                </button>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Metric Cards */}
      <div className="grid grid-cols-3 gap-4 mb-6">
        <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
          <h3 className="text-sm font-medium text-gray-600 mb-1">Total Expected</h3>
          <p className="text-2xl font-bold text-gray-900">
            ${totals.expected.toLocaleString()}
          </p>
        </div>
        <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
          <h3 className="text-sm font-medium text-gray-600 mb-1">Total Received</h3>
          <p className="text-2xl font-bold text-gray-900">
            ${totals.actual.toLocaleString()}
          </p>
        </div>
        <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
          <h3 className="text-sm font-medium text-gray-600 mb-1">Collection Rate</h3>
          <p className="text-2xl font-bold text-gray-900">
            {collectionRate.toFixed(1)}%
          </p>
        </div>
      </div>

      {/* Data Table */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200">
        <table className="w-full">
          <thead className="border-b border-gray-200">
            <tr className="text-left text-sm font-medium text-gray-600">
              <th className="px-4 py-3" style={{ width: '300px' }}>Provider / Client</th>
              <th className="px-4 py-3" style={{ width: '100px' }}>Frequency</th>
              <th className="px-4 py-3" style={{ width: '120px' }}>
                {viewMode === 'quarterly' ? 'Quarterly Rate' : 'Annual Rate'}
              </th>
              {viewMode === 'quarterly' ? (
                <>
                  <th className="px-4 py-3 text-right" style={{ width: '100px' }}>Expected</th>
                  <th className="px-4 py-3 text-right" style={{ width: '100px' }}>Actual</th>
                  <th className="px-4 py-3 text-right" style={{ width: '100px' }}>Variance</th>
                  <th className="px-4 py-3 text-center" style={{ width: '80px' }}>Status</th>
                  <th className="px-4 py-3 text-center" style={{ width: '80px' }}>Posted</th>
                </>
              ) : (
                <>
                  <th className="px-4 py-3 text-right" style={{ width: '100px' }}>Q1 {currentYear}</th>
                  <th className="px-4 py-3 text-right" style={{ width: '100px' }}>Q2 {currentYear}</th>
                  <th className="px-4 py-3 text-right" style={{ width: '100px' }}>Q3 {currentYear}</th>
                  <th className="px-4 py-3 text-right" style={{ width: '100px' }}>Q4 {currentYear}</th>
                  <th className="px-4 py-3 text-right" style={{ width: '100px' }}>Total</th>
                </>
              )}
            </tr>
          </thead>
          <tbody>
            {providerGroups.map((provider) => (
              <React.Fragment key={provider.provider_name}>
                {/* Provider Row */}
                <tr className="bg-gray-50 border-b border-gray-200">
                  <td className="px-4 py-3 font-medium text-gray-900">
                    <button
                      onClick={() => toggleProvider(provider.provider_name)}
                      className="flex items-center gap-2 hover:text-blue-600"
                    >
                      {provider.isExpanded ? (
                        <ChevronDown className="w-4 h-4" />
                      ) : (
                        <ChevronRight className="w-4 h-4" />
                      )}
                      {provider.provider_name.toUpperCase()} ({provider.clients.length} clients)
                    </button>
                  </td>
                  <td className="px-4 py-3"></td>
                  <td className="px-4 py-3"></td>
                  {viewMode === 'quarterly' && provider.providerData ? (
                    <>
                      <td className="px-4 py-3 text-right font-medium">
                        ${Math.round((provider.providerData as QuarterlyPageData).provider_expected_total).toLocaleString()}
                      </td>
                      <td className="px-4 py-3 text-right font-medium">
                        ${Math.round((provider.providerData as QuarterlyPageData).provider_actual_total).toLocaleString()}
                      </td>
                      <td className="px-4 py-3 text-right font-medium">
                        ${Math.round((provider.providerData as QuarterlyPageData).provider_variance).toLocaleString()}
                      </td>
                      <td className="px-4 py-3"></td>
                      <td className="px-4 py-3 text-center">
                        {(provider.providerData as QuarterlyPageData).provider_posted_display} ☑
                      </td>
                    </>
                  ) : viewMode === 'annual' && provider.providerData ? (
                    <>
                      <td className="px-4 py-3 text-right font-medium">
                        ${Math.round((provider.providerData as AnnualPageData).provider_q1_total).toLocaleString()}
                      </td>
                      <td className="px-4 py-3 text-right font-medium">
                        ${Math.round((provider.providerData as AnnualPageData).provider_q2_total).toLocaleString()}
                      </td>
                      <td className="px-4 py-3 text-right font-medium">
                        ${Math.round((provider.providerData as AnnualPageData).provider_q3_total).toLocaleString()}
                      </td>
                      <td className="px-4 py-3 text-right font-medium">
                        ${Math.round((provider.providerData as AnnualPageData).provider_q4_total).toLocaleString()}
                      </td>
                      <td className="px-4 py-3 text-right font-medium">
                        ${Math.round((provider.providerData as AnnualPageData).provider_annual_total).toLocaleString()}
                      </td>
                    </>
                  ) : (
                    <>
                      <td className="px-4 py-3"></td>
                      <td className="px-4 py-3"></td>
                      <td className="px-4 py-3"></td>
                      <td className="px-4 py-3"></td>
                      <td className="px-4 py-3"></td>
                    </>
                  )}
                </tr>

                {/* Client Rows */}
                {provider.isExpanded && provider.clients.map((client) => (
                  <React.Fragment key={client.client_id}>
                    <tr className="border-b border-gray-100 hover:bg-gray-50">
                      <td className="px-4 py-3 pl-10">
                        <div className="flex items-center gap-2">
                          {viewMode === 'quarterly' && (
                            <button
                              onClick={() => toggleClient(client.client_id)}
                              className="p-1"
                            >
                              {expandedClients.has(client.client_id) ? (
                                <ChevronDown className="w-4 h-4" />
                              ) : (
                                <ChevronRight className="w-4 h-4" />
                              )}
                            </button>
                          )}
                          <Link
                            to={`/client/${client.client_id}`}
                            className="text-blue-600 hover:text-blue-800"
                            onClick={(e) => e.stopPropagation()}
                          >
                            {client.display_name}
                          </Link>
                          {viewMode === 'quarterly' && (client as QuarterlyPageData).has_notes ? (
                            <button
                              onClick={() => setEditingNote({ 
                                clientId: client.client_id, 
                                note: (client as QuarterlyPageData).quarterly_notes || '' 
                              })}
                              className="p-1 hover:bg-gray-200 rounded"
                            >
                              <FileText className="w-4 h-4 text-gray-600" />
                            </button>
                          ) : null}
                        </div>
                      </td>
                      <td className="px-4 py-3 text-sm">
                        {client.payment_schedule === 'monthly' ? 'Monthly' : 'Quarterly'}
                      </td>
                      <td className="px-4 py-3 text-sm">
                        {viewMode === 'quarterly' ? (
                          (client as QuarterlyPageData).fee_type === 'percentage' 
                            ? `${(client as QuarterlyPageData).quarterly_rate}%`
                            : `$${(client as QuarterlyPageData).quarterly_rate.toLocaleString()}`
                        ) : (
                          (client as AnnualPageData).fee_type === 'percentage' 
                            ? `${(client as AnnualPageData).annual_rate}%`
                            : `$${(client as AnnualPageData).annual_rate.toLocaleString()}`
                        )}
                      </td>
                      {viewMode === 'quarterly' ? (
                        <>
                          <td className="px-4 py-3 text-right">
                            ${Math.round((client as QuarterlyPageData).client_expected).toLocaleString()}
                          </td>
                          <td className="px-4 py-3 text-right">
                            ${Math.round((client as QuarterlyPageData).client_actual).toLocaleString()}
                            {getVarianceIndicator((client as QuarterlyPageData).client_variance_percent)}
                          </td>
                          <td className="px-4 py-3 text-right">
                            ${Math.round((client as QuarterlyPageData).client_variance).toLocaleString()}
                          </td>
                          <td className="px-4 py-3 text-center text-sm">
                            {(client as QuarterlyPageData).payment_status_display}
                          </td>
                          <td className="px-4 py-3 text-center">
                            <button
                              onClick={() => updatePostedStatus(client.client_id, (client as QuarterlyPageData).is_posted)}
                            >
                              {(client as QuarterlyPageData).is_posted ? (
                                <CheckSquare className="w-5 h-5 text-green-600" />
                              ) : (
                                <Square className="w-5 h-5 text-gray-400" />
                              )}
                            </button>
                          </td>
                        </>
                      ) : (
                        <>
                          <td className="px-4 py-3 text-right">
                            ${Math.round((client as AnnualPageData).q1_actual).toLocaleString()}
                            {(client as AnnualPageData).q1_payments > 0 && (
                              <Check className="inline w-4 h-4 text-green-600 ml-1" />
                            )}
                          </td>
                          <td className="px-4 py-3 text-right">
                            ${Math.round((client as AnnualPageData).q2_actual).toLocaleString()}
                            {(client as AnnualPageData).q2_payments > 0 && (
                              <Check className="inline w-4 h-4 text-green-600 ml-1" />
                            )}
                          </td>
                          <td className="px-4 py-3 text-right">
                            ${Math.round((client as AnnualPageData).q3_actual).toLocaleString()}
                            {(client as AnnualPageData).q3_payments > 0 && (
                              <Check className="inline w-4 h-4 text-green-600 ml-1" />
                            )}
                          </td>
                          <td className="px-4 py-3 text-right">
                            ${Math.round((client as AnnualPageData).q4_actual).toLocaleString()}
                            {(client as AnnualPageData).q4_payments > 0 && (
                              <Check className="inline w-4 h-4 text-green-600 ml-1" />
                            )}
                          </td>
                          <td className="px-4 py-3 text-right font-medium">
                            ${Math.round((client as AnnualPageData).client_annual_total).toLocaleString()}
                            {getVarianceIndicator((client as AnnualPageData).client_annual_variance_percent)}
                          </td>
                        </>
                      )}
                    </tr>

                    {/* Payment Details (Quarterly View Only) */}
                    {viewMode === 'quarterly' && expandedClients.has(client.client_id) && paymentDetails.has(client.client_id) && (
                      <tr>
                        <td colSpan={8} className="px-4 py-2 bg-gray-50">
                          <div className="pl-16 space-y-1 text-sm text-gray-600">
                            {paymentDetails.get(client.client_id)?.map((payment, idx) => {
                              console.log(`Rendering payment ${idx} for client ${client.client_id}:`, payment);
                              return (
                              <div key={idx}>
                                └─ {formatPaymentLine(payment)}
                              </div>
                              );
                            })}
                            {(client as QuarterlyPageData).has_notes && (client as QuarterlyPageData).quarterly_notes && (
                              <div className="mt-2">
                                └─ Note: "{(client as QuarterlyPageData).quarterly_notes}"
                              </div>
                            )}
                          </div>
                        </td>
                      </tr>
                    )}

                    {/* Notes section for quarterly view - inline editing like v1 */}
                    {viewMode === 'quarterly' && (client as QuarterlyPageData).has_notes && !expandedClients.has(client.client_id) ? (
                      <tr>
                        <td colSpan={8} className="px-4 py-2">
                          <div className="ml-7">
                            {editingNote?.clientId === client.client_id ? (
                              <div className="flex items-start space-x-2">
                                <textarea
                                  value={editingNote.note}
                                  onChange={(e) => setEditingNote({ ...editingNote, note: e.target.value })}
                                  className="flex-1 px-3 py-2 border border-gray-300 rounded-md text-sm"
                                  rows={2}
                                  onClick={(e) => e.stopPropagation()}
                                />
                                <button
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    saveNote();
                                  }}
                                  className="px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700"
                                >
                                  Save
                                </button>
                                <button
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    setEditingNote(null);
                                  }}
                                  className="px-3 py-1 bg-gray-300 text-gray-700 rounded text-sm hover:bg-gray-400"
                                >
                                  Cancel
                                </button>
                              </div>
                            ) : (
                              <div
                                className="text-sm text-gray-600 italic cursor-pointer hover:text-gray-800"
                                onClick={(e) => {
                                  e.stopPropagation();
                                  setEditingNote({
                                    clientId: client.client_id,
                                    note: (client as QuarterlyPageData).quarterly_notes || ''
                                  });
                                }}
                              >
                                {(client as QuarterlyPageData).quarterly_notes || 'Click to add note...'}
                              </div>
                            )}
                          </div>
                        </td>
                      </tr>
                    ) : null}
                    
                    {/* Add note button for quarterly view without notes */}
                    {viewMode === 'quarterly' && !(client as QuarterlyPageData).has_notes && !expandedClients.has(client.client_id) ? (
                      <tr>
                        <td colSpan={8} className="px-4 py-2">
                          <div className="ml-7">
                            {editingNote?.clientId === client.client_id ? (
                              <div className="flex items-start space-x-2">
                                <textarea
                                  value={editingNote.note}
                                  onChange={(e) => setEditingNote({ ...editingNote, note: e.target.value })}
                                  className="flex-1 px-3 py-2 border border-gray-300 rounded-md text-sm"
                                  rows={2}
                                  placeholder="Add a note..."
                                  onClick={(e) => e.stopPropagation()}
                                />
                                <button
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    saveNote();
                                  }}
                                  className="px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700"
                                >
                                  Save
                                </button>
                                <button
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    setEditingNote(null);
                                  }}
                                  className="px-3 py-1 bg-gray-300 text-gray-700 rounded text-sm hover:bg-gray-400"
                                >
                                  Cancel
                                </button>
                              </div>
                            ) : (
                              <button
                                className="text-sm text-gray-500 hover:text-gray-700"
                                onClick={(e) => {
                                  e.stopPropagation();
                                  setEditingNote({ clientId: client.client_id, note: '' });
                                }}
                              >
                                <FileText className="h-4 w-4 inline mr-1" />
                                Add note
                              </button>
                            )}
                          </div>
                        </td>
                      </tr>
                    ) : null}
                  </React.Fragment>
                ))}
              </React.Fragment>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default Summary;
```

### src\stores\useAppStore.ts ###

```
// frontend/src/stores/useAppStore.ts
import { create } from 'zustand';

interface Client {
  client_id: number;
  display_name: string;
  full_name: string;
  provider_name?: string;
  compliance_status?: 'green' | 'yellow';
}

interface AppState {
  // Selected client
  selectedClient: Client | null;
  setSelectedClient: (client: Client | null) => void;
  
  // Document viewer state
  documentViewerOpen: boolean;
  toggleDocumentViewer: () => void;
  setDocumentViewerOpen: (open: boolean) => void;
}

const useAppStore = create<AppState>((set) => ({
  // Selected client
  selectedClient: null,
  setSelectedClient: (client) => set({ selectedClient: client }),
  
  // Document viewer state
  documentViewerOpen: false,
  toggleDocumentViewer: () => set((state) => ({ documentViewerOpen: !state.documentViewerOpen })),
  setDocumentViewerOpen: (open) => set({ documentViewerOpen: open }),
  
  // Removed - no longer needed with Azure data-api
}));

export default useAppStore;
```

### src\styles\reference.tsx ###

```
// src/styles/reference.tsx
/**
 * HWM Style Reference Guide
 * 
 * This file contains standardized component patterns and style classes
 * to ensure consistency across the application.
 */

export const StyleReference = {
  // Spacing Standards
  spacing: {
    cards: "p-6",
    tableCells: "px-6 py-4",
    tableHeaders: "px-6 py-3",
    buttons: "px-4 py-2",
    pageContainers: "px-4 sm:px-6 lg:px-8 py-8", // Applied by PageLayout
  },

  // Typography Hierarchy
  typography: {
    pageHeader: "text-2xl font-bold text-gray-900",
    sectionHeader: "text-lg font-semibold text-gray-900",
    cardHeader: "text-sm font-semibold text-gray-600",
    bodyText: "text-sm text-gray-900",
    mutedText: "text-sm text-gray-500",
    smallText: "text-xs text-gray-600",
  },

  // Color Scheme
  colors: {
    // Primary action color
    primary: {
      background: "bg-blue-600",
      hover: "hover:bg-blue-700",
      text: "text-blue-600",
      border: "border-blue-600",
      ring: "focus:ring-blue-500",
    },
    // Gray hierarchy for text
    text: {
      primary: "text-gray-900",
      secondary: "text-gray-700",
      muted: "text-gray-500",
      disabled: "text-gray-400",
    },
    // Background colors
    background: {
      white: "bg-white",
      gray50: "bg-gray-50",
      gray100: "bg-gray-100",
    },
    // Border colors
    border: {
      default: "border-gray-200",
      divider: "divide-gray-200",
    },
  },

  // Component Patterns
  components: {
    // Dashboard Cards
    dashboardCard: "bg-white rounded-lg p-6 border border-gray-200 flex flex-col h-full",
    
    // Primary Button
    primaryButton: "px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500",
    
    // Secondary Button
    secondaryButton: "px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500",
    
    // Table
    table: {
      container: "overflow-x-auto",
      table: "min-w-full divide-y divide-gray-200",
      header: "bg-gray-50",
      headerCell: "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider",
      body: "bg-white divide-y divide-gray-200",
      cell: "px-6 py-4 whitespace-nowrap text-sm text-gray-900",
      rowHover: "hover:bg-gray-50",
    },
    
    // Form Elements
    input: "block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm",
    
    // Status Indicators
    statusDot: {
      gray: "w-2 h-2 bg-gray-400 rounded-full inline-block", // For pending items
    },
    
    // Variance Indicators
    variance: {
      text: "text-gray-900", // All variance amounts in gray
      indicator: "text-amber-500 ml-1", // Amber dot for >10% variance
    },
  },

  // Layout Patterns
  layout: {
    // Page header with gradient line
    pageHeader: `
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-900">
          Page Title
        </h1>
        <div className="h-1 w-full mt-2 bg-gradient-to-r from-blue-600 to-blue-200 rounded-full"></div>
      </div>
    `,
    
    // Grid layout for dashboard cards
    dashboardGrid: "grid gap-4 grid-cols-1 sm:grid-cols-2 lg:grid-cols-2 xl:grid-cols-4",
  },
};

// Example usage components demonstrating the patterns

export const ExampleCard = () => (
  <div className={StyleReference.components.dashboardCard}>
    <h3 className={StyleReference.typography.cardHeader}>Card Title</h3>
    <div className="flex-grow">
      <p className={StyleReference.typography.bodyText}>Card content goes here</p>
    </div>
  </div>
);

export const ExampleButton = () => (
  <button className={StyleReference.components.primaryButton}>
    Primary Action
  </button>
);

export const ExampleVariance = ({ amount, percent }: { amount: number; percent: number }) => (
  <span className={StyleReference.components.variance.text}>
    ${amount.toLocaleString()}
    {Math.abs(percent) > 10 && (
      <span className={StyleReference.components.variance.indicator}>•</span>
    )}
  </span>
);
```

### src\types\contact.ts ###

```
// src/types/contact.ts

export interface Contact {
  contact_id?: number; // Optional for new contacts
  client_id: number;
  contact_type: 'Primary' | 'Authorized' | 'Provider';
  contact_name: string;
  phone: string;
  email: string;
  fax: string | null;
  physical_address: string;
  mailing_address: string | null;
}

export interface ContactFormData {
  contact_type: 'Primary' | 'Authorized' | 'Provider';
  contact_name: string;
  phone: string;
  email: string;
  fax: string;
  physical_address: string;
  mailing_address: string;
}
```

### src\utils\cache.ts ###

```
// src/utils/cache.ts
/**
 * Simple in-memory cache with TTL (time-to-live) support
 * Perfect for caching API responses that don't change often
 */

interface CacheEntry<T> {
  data: T;
  timestamp: number;
  ttl: number;
}

class SimpleCache {
  private cache = new Map<string, CacheEntry<any>>();
  private readonly DEFAULT_TTL = 5 * 60 * 1000; // 5 minutes

  /**
   * Get cached data if valid (not expired)
   */
  get<T>(key: string): T | null {
    const entry = this.cache.get(key);
    
    if (!entry) {
      return null;
    }

    const now = Date.now();
    const isExpired = now - entry.timestamp > entry.ttl;

    if (isExpired) {
      this.cache.delete(key);
      return null;
    }

    console.log(`[Cache HIT] ${key}`);
    return entry.data as T;
  }

  /**
   * Set data in cache with optional TTL
   */
  set<T>(key: string, data: T, ttl?: number): void {
    console.log(`[Cache SET] ${key} (TTL: ${ttl || this.DEFAULT_TTL}ms)`);
    
    this.cache.set(key, {
      data,
      timestamp: Date.now(),
      ttl: ttl || this.DEFAULT_TTL,
    });
  }

  /**
   * Clear specific key or entire cache
   */
  clear(key?: string): void {
    if (key) {
      console.log(`[Cache CLEAR] ${key}`);
      this.cache.delete(key);
    } else {
      console.log('[Cache CLEAR ALL]');
      this.cache.clear();
    }
  }

  /**
   * Invalidate cache entries matching a pattern
   */
  invalidatePattern(pattern: string): void {
    const keysToDelete: string[] = [];
    
    for (const key of this.cache.keys()) {
      if (key.includes(pattern)) {
        keysToDelete.push(key);
      }
    }

    keysToDelete.forEach(key => {
      console.log(`[Cache INVALIDATE] ${key}`);
      this.cache.delete(key);
    });
  }

  /**
   * Get cache stats for debugging
   */
  getStats() {
    const now = Date.now();
    const entries = Array.from(this.cache.entries()).map(([key, entry]) => ({
      key,
      age: now - entry.timestamp,
      ttl: entry.ttl,
      expired: now - entry.timestamp > entry.ttl,
    }));

    return {
      size: this.cache.size,
      entries,
    };
  }
}

// Singleton instance
export const apiCache = new SimpleCache();

// Cache key builders
export const cacheKeys = {
  dashboard: (viewType: string) => `dashboard_${viewType}`,
  quarterlyNotes: (year: number, quarter: number) => `quarterly_notes_${year}_${quarter}`,
  quarterlySummary: (clientId: number, year: number, quarter: number) => 
    `quarterly_summary_${clientId}_${year}_${quarter}`,
  clients: () => 'clients_all',
  contacts: (clientId: number) => `contacts_${clientId}`,
};
```

### src\utils\errorUtils.ts ###

```
// frontend/src/utils/errorUtils.ts

/**
 * Extract error message from Azure data-api standardized error format
 */
export function getErrorMessage(error: any, defaultMessage: string = 'An error occurred'): string {
  // Azure data-api error format: {error: {code: string, message: string}}
  if (error?.error?.message && typeof error.error.message === 'string') {
    return error.error.message;
  }
  
  // Handle Error instances
  if (error instanceof Error) {
    return error.message;
  }
  
  // Handle string errors
  if (typeof error === 'string') {
    return error;
  }
  
  // Default message
  return defaultMessage;
}
```

### src\utils\formatters.ts ###

```
// src/utils/formatters.ts

/**
 * Currency formatter - for displaying dollar amounts
 */
export function formatCurrency(amount: number | null | undefined, decimals: number = 2): string {
  if (amount === null || amount === undefined) return '--';
  
  const formatter = new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    minimumFractionDigits: decimals,
    maximumFractionDigits: decimals
  });
  
  return formatter.format(amount);
}

/**
 * Date formatter - for displaying dates in MM/YY format
 */
export function formatDateMMYY(date: string | null | undefined): string {
  if (!date) return '--';
  
  const dateObj = new Date(date);
  if (isNaN(dateObj.getTime())) return '--';
  
  const month = String(dateObj.getMonth() + 1).padStart(2, '0');
  const year = String(dateObj.getFullYear()).slice(-2);
  
  return `${month}/${year}`;
}

/**
 * Date formatter - for displaying dates in MM/DD/YY format
 */
export function formatDateMMDDYY(date: string | null | undefined): string {
  if (!date) return '--';
  
  const dateObj = new Date(date);
  if (isNaN(dateObj.getTime())) return '--';
  
  const month = String(dateObj.getMonth() + 1).padStart(2, '0');
  const day = String(dateObj.getDate()).padStart(2, '0');
  const year = String(dateObj.getFullYear()).slice(-2);
  
  return `${month}/${day}/${year}`;
}

/**
 * Rate formatter - for displaying percentage or flat fee rates
 */
export function formatRate(rate: number | null | undefined, feeType: 'percentage' | 'flat' | null): string {
  if (rate === null || rate === undefined) return '--';
  
  if (feeType === 'percentage') {
    // Rates are already scaled (e.g., 0.07 for 0.07%)
    return `${rate.toFixed(2)}%`;
  } else if (feeType === 'flat') {
    // Flat fees are dollar amounts
    return formatCurrency(rate, 0);
  }
  
  return '--';
}

/**
 * Combined rates formatter - for displaying all three rates in one line
 */
export function formatCombinedRates(
  monthlyRate: number | null | undefined,
  quarterlyRate: number | null | undefined,
  annualRate: number | null | undefined,
  feeType: 'percentage' | 'flat' | null
): string {
  const monthly = formatRate(monthlyRate, feeType);
  const quarterly = formatRate(quarterlyRate, feeType);
  const annual = formatRate(annualRate, feeType);
  
  // If all are missing, return single dash
  if (monthly === '--' && quarterly === '--' && annual === '--') {
    return '--';
  }
  
  return `${monthly} / ${quarterly} / ${annual}`;
}

/**
 * Phone formatter - for displaying phone numbers
 */
export function formatPhone(phone: string | null | undefined): string {
  if (!phone) return '--';
  
  // Remove all non-digits
  const digits = phone.replace(/\D/g, '');
  
  // Format as (XXX) XXX-XXXX if we have 10 digits
  if (digits.length === 10) {
    return `(${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6)}`;
  }
  
  // Return as-is if not standard format
  return phone;
}

/**
 * Number formatter - for participant counts
 */
export function formatNumber(num: number | null | undefined): string {
  if (num === null || num === undefined) return '--';
  return num.toString();
}
```

### src\utils\periodFormatting.ts ###

```
// src/utils/periodFormatting.ts

export function formatPeriodDisplay(
  period: number,
  year: number,
  paymentSchedule: 'monthly' | 'quarterly'
): string {
  if (paymentSchedule === 'monthly') {
    const monthNames = [
      'January', 'February', 'March', 'April', 'May', 'June',
      'July', 'August', 'September', 'October', 'November', 'December'
    ];
    return `${monthNames[period - 1]} ${year}`;
  } else {
    return `Q${period} ${year}`;
  }
}
```

