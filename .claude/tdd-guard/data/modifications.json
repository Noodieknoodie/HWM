{
  "session_id": "c84f13f9-ef3e-4931-acf3-3c67b4276e86",
  "transcript_path": "/home/eriknudsen/.claude/projects/-mnt-c-Users-ErikKnudsen-Documents-HWM/c84f13f9-ef3e-4931-acf3-3c67b4276e86.jsonl",
  "hook_event_name": "PreToolUse",
  "tool_name": "Write",
  "tool_input": {
    "file_path": "/mnt/c/Users/ErikKnudsen/Documents/HWM/E2E_Business_Logic_Tests/README.md",
    "content": "# E2E Business Logic Test Suite\n\n## Overview\nThis test suite validates the core business logic of the HWM 401k Fee Tracker application, ensuring that data flows correctly from the database through to the user interface. All tests use 2024 data as the source of truth.\n\n## Core Business Logic to Test\n\n### 1. Fee Calculations\n- **Expected Fee Calculation**\n  - Flat rate fees: `flat_rate × payment_frequency`\n  - Percentage fees: `AUM × percent_rate`\n  - Missing AUM scenarios\n  - Rate changes mid-year\n\n### 2. Payment Status Logic\n- **Current Period Determination** (Arrears billing model)\n  - Monthly: Previous month is billable\n  - Quarterly: Previous quarter is billable\n  - Year boundary transitions (Q1 bills for Q4 of previous year)\n  \n- **Payment Status Classification**\n  - \"Due\" vs \"Paid\" logic\n  - Edge cases: partial payments, overpayments\n\n### 3. AUM (Assets Under Management) Tracking\n- **AUM Sources**\n  - Recorded: Direct entry in payment record\n  - Estimated: Calculated from payment amount / rate\n  - Missing: No AUM available scenarios\n  \n- **AUM Propagation**\n  - How AUM carries forward to future periods\n  - What happens when AUM is missing\n\n### 4. Variance Calculations\n- **Variance Amount**: `actual_fee - expected_fee`\n- **Variance Percentage**: `(variance_amount / expected_fee) × 100`\n- **Variance Status Thresholds**\n  - exact: < $0.01 difference\n  - acceptable: ≤ 5%\n  - warning: ≤ 15%\n  - alert: > 15%\n\n### 5. Period Aggregations\n- **Quarterly Summaries**\n  - Monthly payments rolled up to quarters\n  - Expected vs actual totals\n  - Posted status tracking\n  \n- **Annual Summaries**\n  - Quarterly totals by year\n  - Year-over-year comparisons\n  - Collection rate calculations\n\n### 6. Data Integrity Scenarios\n\n#### Missing Data Cases\n- Client without contract\n- Contract without rates (both null)\n- Payments without AUM (percentage-based)\n- Missing payment periods\n- Gaps in payment history\n\n#### Edge Cases\n- Multiple payments in same period\n- Payments applied to wrong period\n- Retroactive payments\n- Contract changes mid-period\n- Zero-value payments\n- Negative variances\n\n### 7. Display Logic Validation\n\n#### Payment History Table\n- Expected fee display (NULL vs 0)\n- Variance indicators (amber dots)\n- Period formatting\n- Provider grouping\n\n#### Quarterly Summary Page\n- Provider aggregation totals\n- Client-level calculations\n- Posted fraction display (e.g., \"2/3\")\n- Note persistence\n\n#### Dashboard Metrics\n- Current period display\n- Payment status\n- Rate conversions (monthly/quarterly/annual)\n\n## Test Data Scenarios (2024)\n\n### Clean Scenario Clients\n1. **Flat Fee Monthly** - Consistent payments all year\n2. **Flat Fee Quarterly** - All quarters paid on time\n3. **Percentage Monthly** - Stable AUM throughout year\n4. **Percentage Quarterly** - Varying AUM by quarter\n\n### Problem Scenario Clients\n1. **Missing Q2** - Gap in payment history\n2. **No AUM Client** - Percentage-based with missing AUM data\n3. **Late Starter** - Contract began mid-year\n4. **Rate Change** - Fee structure changed in Q3\n5. **Overpayment Client** - Paid more than expected\n6. **Zero Payment** - $0 payment recorded\n\n## Test Structure\n\n```\nE2E_Business_Logic_Tests/\n├── README.md (this file)\n├── sql-validations/\n│   ├── 01_fee_calculations.sql\n│   ├── 02_payment_status.sql\n│   ├── 03_variance_logic.sql\n│   ├── 04_aggregations.sql\n│   └── 05_edge_cases.sql\n├── frontend-tests/\n│   ├── payment-history.test.ts\n│   ├── quarterly-summary.test.ts\n│   ├── dashboard.test.ts\n│   └── data-flow.test.ts\n├── test-data/\n│   ├── clients.json\n│   ├── contracts.json\n│   ├── payments_2024.json\n│   └── expected_results.json\n└── utilities/\n    ├── test-helpers.ts\n    ├── data-generators.ts\n    └── validation-utils.ts\n```\n\n## Success Criteria\n\n1. **Data Accuracy**: Database calculations match frontend display\n2. **Edge Case Handling**: All missing data scenarios handled gracefully\n3. **Business Rule Compliance**: Arrears billing, variance thresholds, etc.\n4. **Performance**: Aggregations complete in reasonable time\n5. **Consistency**: Same data shows identically across all views\n\n## Next Steps\n\n1. Create SQL validation queries for each business rule\n2. Build test data set with known inputs/outputs\n3. Write frontend tests to verify display logic\n4. Document any discovered discrepancies\n5. Create automated test runner"
  }
}